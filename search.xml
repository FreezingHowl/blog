<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>学习与思考与思绪</title>
    <url>/%E5%93%B2%E5%AD%A6%E6%80%9D%E8%80%83/learning-and-thinkking.html</url>
    <content><![CDATA[<span id="more"></span>

<h3 id="学习过程中两种不同的认知模式"><a href="#学习过程中两种不同的认知模式" class="headerlink" title="学习过程中两种不同的认知模式"></a>学习过程中两种不同的认知模式</h3><ul>
<li><p>专注学习：</p>
<ul>
<li>定义： 这是一种深入学习的模式，通常用于解决特定的问题或理解特定的概念。在专注学习时，你集中注意力，深入研究和掌握特定的信息或技能。</li>
<li>特点： 强调深度思考和集中注意力。这种模式涉及对特定主题进行深入研究，以便更好地理解和应用所学的知识。</li>
</ul>
</li>
<li><p>分散学习：</p>
<ul>
<li>定义： 这是一种广泛的学习模式，通常发生在专注学习之外。在分散学习时，你的思维更加放松，允许思维在不同的概念和想法之间漂移。</li>
<li>特点： 强调对多个概念的涉猎和连接。这种模式涉及到与多种信息和概念有关的广泛思考，有助于提供新的视角和创意。</li>
</ul>
</li>
<li><p>区别：</p>
<ul>
<li>焦点： 专注学习侧重于深度思考和对特定主题的集中注意力；分散学习强调对多个概念的广泛涉猎和连接。</li>
<li>状态： 专注学习时，思维状态通常较为紧凑和有针对性；而在分散学习时，思维状态较为放松和漂移。</li>
<li>应用： 专注学习通常用于解决问题、深入理解复杂的主题；分散学习有助于激发创意、将不同领域的知识联系起来。</li>
</ul>
</li>
<li><p>建议：</p>
<blockquote>
<p>在进入具体细节之前，先阅读一些介绍性材料，以便对一个领域有一个高度的了解，这通常是好的。</p>
</blockquote>
</li>
</ul>
<h3 id="制定计划"><a href="#制定计划" class="headerlink" title="制定计划"></a>制定计划</h3><ul>
<li><p>确定目标</p>
<blockquote>
<p>我想在两年后成为一名专业的 Web 开发者。<br>我想学习足够的知识，为我当地的业余网球俱乐部建立一个网站。</p>
</blockquote>
</li>
<li><p>准备条件</p>
<blockquote>
<p>需要哪些工具<br>需要哪些知识</p>
</blockquote>
</li>
<li><p>投入规划</p>
<blockquote>
<p>我每周需要投入多少小时？<br>这需要花费多少时间和金钱？<br>分为几个阶段，每个阶段达到怎样的效果</p>
</blockquote>
</li>
<li><p>保持动力</p>
<blockquote>
<p>尽量让你的工作环境更有效率<br>把大问题分成具体的小问题，确定问题层级<br>奖励你自己</p>
</blockquote>
</li>
<li><p>周期练习</p>
<blockquote>
<p>计划实行的过程是了解-认识-实践-思考的迭代提升过程</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>哲学思考</category>
      </categories>
      <tags>
        <tag>学习思考</tag>
        <tag>方法论</tag>
      </tags>
  </entry>
  <entry>
    <title>多重阅读-阅读技巧</title>
    <url>/%E5%93%B2%E5%AD%A6%E6%80%9D%E8%80%83/multiple-reading.html</url>
    <content><![CDATA[<p>快时代下的高效阅读方法。</p>
<span id="more"></span>

<blockquote>
<p>多重阅读是画出阅读框架的过程。<br>多重阅读第一遍以变速阅读为主，核心目的就是要选出重点精读的内容。<br>多重阅读第二遍以重点精读为主，就是要将阅读内容归到你的个人知识体系中，变成你自己的理解和知识，从而在需要的时候可以被顺畅地调用出来。</p>
</blockquote>
<h4 id="阅读步骤"><a href="#阅读步骤" class="headerlink" title="阅读步骤"></a>阅读步骤</h4><ol>
<li>明确阅读目的</li>
<li>绘制内容框架</li>
<li>变速阅读</li>
<li>重点精度</li>
</ol>
<h4 id="阅读过程"><a href="#阅读过程" class="headerlink" title="阅读过程"></a>阅读过程</h4><h5 id="明确阅读目的"><a href="#明确阅读目的" class="headerlink" title="-| 明确阅读目的"></a>-| 明确阅读目的</h5><blockquote>
<p>阅读之前建议思考一个问题：<br>如果是我写这本书的话，我会怎么组织观点呢？<br>带着这样的问题来阅读会更加高效的抓取关键信息。</p>
</blockquote>
<h5 id="绘制内容框架"><a href="#绘制内容框架" class="headerlink" title="-| 绘制内容框架"></a>-| 绘制内容框架</h5><blockquote>
<p>从阅读目的出发，在浏览封面、作者简介、前言、目录后，画出一个整体的阅读框架关键词，这样效率就更高了。<br>通常来说，一本书的目录就是最原始的框架，阅读过程中可以增加自己的理解，逐渐完善框架。</p>
</blockquote>
<h5 id="变速阅读"><a href="#变速阅读" class="headerlink" title="-| 变速阅读"></a>-| 变速阅读</h5><p>第一遍阅读的时候，要采用泛读的方式。</p>
<p>针对四类不同的内容采用不同的阅读速度。</p>
<ol>
<li><p>与阅读目的不相关的内容</p>
<blockquote>
<p>这部分内容，阅读时跳过就行，或者做个标记以防后期需要再次复盘。</p>
</blockquote>
</li>
<li><p>与阅读目的相关，但你已经很熟悉的内容</p>
<blockquote>
<p>这部分内容，阅读时以你能达到的最快速度浏览即可，只需留意其中是否有个别值得借鉴的要点。<br>切记不要反复阅读自己熟悉的内容，浪费时间的同时效率不高。</p>
</blockquote>
</li>
<li><p>与阅读目的相关，但是你不熟悉的内容</p>
<blockquote>
<p>这部分内容，在第一遍阅读时就要回到正常的阅读速度进行阅读。<br>在每一章或每阅读 10 分钟之后，必须停下来，离开书本，在脑海里回忆刚刚阅读过的内容，然后将你能回忆出来的内容，添加到阅读框架中。<br>这一边的复盘很重要，通常也非常消耗精力，但是用自己的语言表述出来的时候也就意味着掌握了这个知识。</p>
</blockquote>
</li>
<li><p>与阅读目的相关，但第一遍理解起来很难的内容</p>
<blockquote>
<p>在阅读不熟悉的内容时，如果碰到理解起来很难的内容，第一遍阅读时标记下来，看一看，在脑海中有点印象就行。</p>
</blockquote>
</li>
</ol>
<h5 id="重点精读"><a href="#重点精读" class="headerlink" title="-| 重点精读"></a>-| 重点精读</h5><blockquote>
<p>第二遍阅读的时候，我们不需要将所有内容都重新阅读一遍，而是重点精读符合阅读目的，又是自己不熟悉的部分。<br>第二遍重点精读的时候，你需要做笔记！<br>最好的方式是在第二遍重点精读的时候，将这些内容记到笔记里，而且一定要体系化地组织这些内容（推荐使用 OneNote）<br>形成知识体系化的最好方法是多读同一领域的不同书籍，互相补充，想成自己独特的目录。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">参考链接: https://www.jianshu.com/p/05986e4afddc</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>哲学思考</category>
      </categories>
      <tags>
        <tag>阅读</tag>
        <tag>技巧</tag>
        <tag>快生活</tag>
      </tags>
  </entry>
  <entry>
    <title>软件设计师中级-个人笔记</title>
    <url>/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/sofare-designer-self.html</url>
    <content><![CDATA[<h3 id="考前须知"><a href="#考前须知" class="headerlink" title="考前须知"></a>考前须知</h3><ol>
<li>时间安排<table>
 <tr>
     <td>科目</td> 
     <td>时间段</td> 
     <td>流程</td> 
     <td>时间</td> 
</tr>
 <tr>
     <td rowspan="4">软件设计师</td>    
     <td rowspan="4">上半年</td>  
     <td >报名</td>  
     <td >2023年3月14日9：00至2023年4月10日18：00</td>  
 </tr>
 <tr>  
     <td >缴费</td>  
     <td >2023年3月14日9：00至2023年4月12日24：00</td>  
 </tr>
 <tr>   
     <td >准考证打印</td>  
     <td >2023年5月22日9：00至2023年5月26日17：00</td>  
 </tr>
 <tr>  
     <td >考试</td>  
     <td >2023-05-27 09:00:00（150分钟）至2023-05-27 14:00:00（150分钟）</td>  
 </tr>
</table></li>
<li>相关网站<ul>
<li>报名地址：<a href="https://bm.ruankao.org.cn/">https://bm.ruankao.org.cn/</a></li>
<li>网上办事服务大厅：<a href="https://rs.jshrss.jiangsu.gov.cn/web/center/main">https://rs.jshrss.jiangsu.gov.cn/web/center/main</a></li>
</ul>
</li>
</ol>
<h3 id="计划安排"><a href="#计划安排" class="headerlink" title="计划安排"></a>计划安排</h3><ul>
<li>目标程度：计算了解，概念熟悉，理论理解，顺利上岸。</li>
<li>阶段一：<ul>
<li>目标：基础知识学习，了解所有考试内容，构建粗略知识框架</li>
<li>具体方法：看视频讲解、参考他人汇总笔记、同步刷上午考题</li>
<li>注意：理论内容切不可一知半解</li>
</ul>
</li>
<li>阶段二：<ul>
<li>目标：专项练习下午试题（应用技术），保证下午内容一分不丢</li>
<li>具体方法：详细学习相关知识，练习试题，揣摩考试逻辑，扩展内容延申学习</li>
</ul>
</li>
<li>阶段三：<ul>
<li>目标：寻找考试状态，整体理解考试内容</li>
<li>具体方法：刷真题、刷真题、刷真题</li>
</ul>
</li>
</ul>
<h3 id="个人记录"><a href="#个人记录" class="headerlink" title="个人记录"></a>个人记录</h3><ul>
<li>软件设计师主要内容：<a href="https://app.gitbook.com/o/DXydf1xam3QnhX5TACL1/s/CoM1utHSQT3IQlbuzD7w/mu-lu">https://app.gitbook.com/o/DXydf1xam3QnhX5TACL1/s/CoM1utHSQT3IQlbuzD7w/mu-lu</a></li>
</ul>
]]></content>
      <categories>
        <category>软件设计师</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>软件设计师</tag>
      </tags>
  </entry>
  <entry>
    <title>supermapCesium-基础介绍（1）</title>
    <url>/SupermapCesium/cesium-detail-study/base-info.html</url>
    <content><![CDATA[<span id="more"></span>

<h3 id="概念定义"><a href="#概念定义" class="headerlink" title="概念定义"></a>概念定义</h3><p>SuperMap Cesium 是由 SuperMap 提供的一种用于集成和展示地理信息的 JavaScript 库，基于 Cesium 开发，提供了丰富的地图可视化和分析功能。</p>
<h3 id="学习流程"><a href="#学习流程" class="headerlink" title="学习流程"></a>学习流程</h3><ol>
<li>了解熟悉cesium的整体架构层级</li>
<li>根据架构模块分模块逐级学习练习</li>
</ol>
<h3 id="学习意义"><a href="#学习意义" class="headerlink" title="学习意义"></a>学习意义</h3><p>随着AI的发展普及，广度学习的优势比深度学习更高，一个优秀的AI使用者，可以通过AI弥补一定的专业深度缺陷，AI强大的算力和无止境的知识库，会是将来人类重要的工具;<br>但作为一个专业技术人员，专业内知识和强相关知识的深度，是很有必要的，在学习过程中，你可以更近更深刻的了解自己每天都在做的事情，看透自己所作的内容，我认为是一个专业技术人员所必须的能力，如果自己每日做的事情都是一个黑盒，那么会是一件可悲的事情。</p>
<h3 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h3><p><img src="https://img.nonnight.com/img/web-gis/cesium-api.png" alt="Cesium-API"></p>
]]></content>
      <categories>
        <category>SupermapCesium</category>
      </categories>
      <tags>
        <tag>学习思考</tag>
        <tag>学习记录</tag>
      </tags>
  </entry>
  <entry>
    <title>supermapCesium-视图与场景（2）</title>
    <url>/SupermapCesium/cesium-detail-study/viewer-scene.html</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="Globe介绍"><a href="#Globe介绍" class="headerlink" title="Globe介绍"></a>Globe介绍</h2><p>Scene 对象下的 globe 属性是用来配置和管理地球（或其他行星体）的属性的。</p>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul>
<li><p><strong>terrainProvider</strong> 地形提供器，用于提供地球表面的地形数据。</p>
</li>
<li><p><strong>imageryLayers</strong> 图像图层集合，用于管理和显示地球表面的图像图层。</p>
</li>
<li><p><strong>baseColor</strong> 设置地球的基础颜色。</p>
</li>
<li><p><strong>show</strong> 控制是否显示地球球体。</p>
</li>
<li><p><strong>shadows</strong> 设置地球球体的阴影效果。</p>
</li>
<li><p><strong>enableLighting</strong> 控制是否启用光照效果。</p>
</li>
<li><p><strong>showWaterEffect</strong> 控制是否显示水面效果。</p>
</li>
<li><p><strong>showGroundAtmosphere</strong> 控制是否显示大气层效果。</p>
</li>
<li><p><strong>showSkyAtmosphere</strong> 控制是否显示天空大气层。</p>
</li>
<li><p><strong>showSunBloom</strong> 控制是否显示太阳的辐射效果。</p>
</li>
</ul>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul>
<li><p><strong>globe.pick(ray, scene, result)</strong> 根据给定的射线和场景对象，获取地球表面上的交点。</p>
</li>
<li><p><strong>getHeight(cartographic)</strong> 获取给定位置的地表高程。</p>
</li>
<li><p><strong>getTerrainHeight(cartographic)</strong> 获取给定位置的地形高程。</p>
</li>
<li><p><strong>pickEllipsoid(ray, scene, result)</strong> 获取地球椭球体上的交点。</p>
</li>
</ul>
<h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 创建一个 Cesium 场景</span></span><br><span class="line"><span class="keyword">const</span> viewer = <span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">Viewer</span>(<span class="string">&#x27;cesiumContainer&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 globe 对象的引用</span></span><br><span class="line"><span class="keyword">const</span> globe = viewer.<span class="property">scene</span>.<span class="property">globe</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置地形提供器</span></span><br><span class="line">globe.<span class="property">terrainProvider</span> = <span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">CesiumTerrainProvider</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="title class_">Cesium</span>.<span class="property">IonResource</span>.<span class="title function_">fromAssetId</span>(<span class="number">1</span>), <span class="comment">// 使用 Cesium Ion 提供的地形数据</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加图像图层</span></span><br><span class="line">globe.<span class="property">imageryLayers</span>.<span class="title function_">addImageryProvider</span>(<span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">SingleTileImageryProvider</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;path/to/your/image.png&#x27;</span>, <span class="comment">// 图像路径</span></span><br><span class="line">    <span class="attr">rectangle</span>: <span class="title class_">Cesium</span>.<span class="property">Rectangle</span>.<span class="title function_">fromDegrees</span>(-<span class="number">120</span>, <span class="number">20</span>, -<span class="number">100</span>, <span class="number">30</span>) <span class="comment">// 图像显示的范围</span></span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置地球的基础颜色</span></span><br><span class="line">globe.<span class="property">baseColor</span> = <span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">Color</span>(<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">1.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制是否显示地球球体</span></span><br><span class="line">globe.<span class="property">show</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启用地球的阴影效果</span></span><br><span class="line">globe.<span class="property">shadows</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启用光照效果</span></span><br><span class="line">globe.<span class="property">enableLighting</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据射线获取地球表面上的交点</span></span><br><span class="line"><span class="keyword">const</span> ray = viewer.<span class="property">camera</span>.<span class="title function_">getPickRay</span>(<span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">Cartesian2</span>(<span class="number">0.5</span>, <span class="number">0.5</span>));</span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">Cartesian3</span>();</span><br><span class="line"><span class="keyword">const</span> pickedPosition = globe.<span class="title function_">pick</span>(ray, viewer.<span class="property">scene</span>, result);</span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">Cesium</span>.<span class="title function_">defined</span>(pickedPosition)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Picked position:&#x27;</span>, pickedPosition);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Camera-介绍"><a href="#Camera-介绍" class="headerlink" title="Camera 介绍"></a>Camera 介绍</h2><h3 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h3><ul>
<li><strong>position</strong> 获取或设置相机的位置。</li>
<li><strong>direction</strong> 获取或设置相机的方向。</li>
<li><strong>up</strong> 获取或设置相机的上方向。</li>
<li><strong>right</strong> 获取或设置相机的右方向。</li>
<li><strong>heading</strong> 获取或设置相机的方位角。</li>
<li><strong>pitch</strong> 获取或设置相机的俯仰角。</li>
<li><strong>roll</strong> 获取或设置相机的翻滚角。</li>
<li><strong>frustum</strong> 获取相机的视锥体。</li>
<li><strong>focalLength</strong> 获取或设置相机的焦距。</li>
<li><strong>frustumCulling</strong> 相机视锥体剔除。</li>
<li><strong>near</strong> 获取或设置相机的近裁剪面距离。</li>
<li><strong>far</strong> 获取或设置相机的远裁剪面距离。</li>
<li><strong>frustumPlanes</strong> 获取相机的视锥体平面。</li>
<li><strong>constrainedAxis</strong> 获取或设置相机的限制轴。</li>
</ul>
<h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><ul>
<li><strong>getPickRay(windowPosition, result)</strong> 根据窗口位置获取相机射线。</li>
<li><strong>lookAt(target, offset)</strong> 使相机观察指定的目标点，并可以设置相机的偏移量。</li>
<li><strong>flyTo(options)</strong> 使相机飞行到指定的目标点，并可以设置飞行的参数。</li>
<li><strong>setView(options)</strong> 设置相机的视图参数，包括位置、方向、上方向等。</li>
<li><strong>otateAroundAxis(axis, angle)</strong> 绕指定轴旋转相机。</li>
</ul>
<h3 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个 Cesium 场景</span></span><br><span class="line"><span class="keyword">const</span> viewer = <span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">Viewer</span>(<span class="string">&#x27;cesiumContainer&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 camera 对象的引用</span></span><br><span class="line"><span class="keyword">const</span> camera = viewer.<span class="property">camera</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置相机的位置</span></span><br><span class="line">camera.<span class="property">position</span> = <span class="keyword">new</span> <span class="title class_">Cesium</span>.<span class="title class_">Cartesian3</span>(<span class="number">1000000.0</span>, <span class="number">0.0</span>, <span class="number">1000000.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取相机的方向</span></span><br><span class="line"><span class="keyword">const</span> direction = camera.<span class="property">direction</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取相机的上方向</span></span><br><span class="line"><span class="keyword">const</span> up = camera.<span class="property">up</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取相机的视锥体</span></span><br><span class="line"><span class="keyword">const</span> frustum = camera.<span class="property">frustum</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置相机的方位角和俯仰角</span></span><br><span class="line">camera.<span class="title function_">setView</span>(&#123;</span><br><span class="line">    <span class="attr">destination</span>: <span class="title class_">Cesium</span>.<span class="property">Cartesian3</span>.<span class="title function_">fromDegrees</span>(-<span class="number">75.0</span>, <span class="number">45.0</span>, <span class="number">500000.0</span>),</span><br><span class="line">    <span class="attr">orientation</span>: &#123;</span><br><span class="line">        <span class="attr">heading</span>: <span class="title class_">Cesium</span>.<span class="property">Math</span>.<span class="title function_">toRadians</span>(<span class="number">90.0</span>),</span><br><span class="line">        <span class="attr">pitch</span>: <span class="title class_">Cesium</span>.<span class="property">Math</span>.<span class="title function_">toRadians</span>(-<span class="number">45.0</span>),</span><br><span class="line">        <span class="attr">roll</span>: <span class="number">0.0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 飞行到指定位置</span></span><br><span class="line">camera.<span class="title function_">flyTo</span>(&#123;</span><br><span class="line">    <span class="attr">destination</span>: <span class="title class_">Cesium</span>.<span class="property">Cartesian3</span>.<span class="title function_">fromDegrees</span>(-<span class="number">75.0</span>, <span class="number">45.0</span>, <span class="number">500000.0</span>),</span><br><span class="line">    <span class="attr">orientation</span>: &#123;</span><br><span class="line">        <span class="attr">heading</span>: <span class="title class_">Cesium</span>.<span class="property">Math</span>.<span class="title function_">toRadians</span>(<span class="number">90.0</span>),</span><br><span class="line">        <span class="attr">pitch</span>: <span class="title class_">Cesium</span>.<span class="property">Math</span>.<span class="title function_">toRadians</span>(-<span class="number">45.0</span>),</span><br><span class="line">        <span class="attr">roll</span>: <span class="number">0.0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">duration</span>: <span class="number">3.0</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制相机的缩放</span></span><br><span class="line">camera.<span class="title function_">zoomIn</span>(<span class="number">1000.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绕指定轴旋转相机</span></span><br><span class="line">camera.<span class="title function_">rotateAroundAxis</span>(<span class="title class_">Cesium</span>.<span class="property">Cartesian3</span>.<span class="property">UNIT_Z</span>, <span class="title class_">Cesium</span>.<span class="property">Math</span>.<span class="title function_">toRadians</span>(<span class="number">45.0</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SupermapCesium</category>
      </categories>
      <tags>
        <tag>学习思考</tag>
        <tag>学习记录</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务技术栈-Docker</title>
    <url>/uncategorized/microservices-technology-stack/microservices-technology-stack-docker.html</url>
    <content><![CDATA[<h1 id="初识Docker"><a href="#初识Docker" class="headerlink" title="初识Docker"></a>初识Docker</h1><h2 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h2><p>微服务虽然具备各种各样的优势，但服务的拆分通用给部署带来了很大的麻烦。</p>
<ul>
<li>分布式系统中，依赖的组件非常多，不同组件之间部署时往往会产生一些冲突。</li>
<li>在数百上千台服务中重复部署，环境不一定一致，会遇到各种问题</li>
</ul>
<h3 id="应用部署的环境问题"><a href="#应用部署的环境问题" class="headerlink" title="应用部署的环境问题"></a>应用部署的环境问题</h3><p>大型项目组件较多，运行环境也较为复杂，部署时会碰到一些问题：</p>
<ul>
<li>依赖关系复杂，容易出现兼容性问题</li>
<li>开发、测试、生产环境有差异</li>
</ul>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210731141907366.png" alt="传统应用部署"></p>
<p>例如一个项目中，部署时需要依赖于node.js、Redis、RabbitMQ、MySQL等，这些服务部署时所需要的函数库、依赖项各不相同，甚至会有冲突。给部署带来了极大的困难。</p>
<h3 id="Docker解决依赖兼容问题"><a href="#Docker解决依赖兼容问题" class="headerlink" title="Docker解决依赖兼容问题"></a>Docker解决依赖兼容问题</h3><p>而Docker确巧妙的解决了这些问题，Docker是如何实现的呢？</p>
<p>Docker为了解决依赖的兼容问题的，采用了两个手段：</p>
<ul>
<li><p>将应用的Libs（函数库）、Deps（依赖）、配置与应用一起打包</p>
</li>
<li><p>将每个应用放到一个隔离<strong>容器</strong>去运行，避免互相干扰</p>
</li>
</ul>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210731142219735.png" alt="Docker部署"></p>
<p>这样打包好的应用包中，既包含应用本身，也保护应用所需要的Libs、Deps，无需再操作系统上安装这些，自然就不存在不同应用之间的兼容问题了。</p>
<p>虽然解决了不同应用的兼容问题，但是开发、测试等环境会存在差异，操作系统版本也会有差异，怎么解决这些问题呢？</p>
<h3 id="Docker解决操作系统环境差异"><a href="#Docker解决操作系统环境差异" class="headerlink" title="Docker解决操作系统环境差异"></a>Docker解决操作系统环境差异</h3><p>要解决不同操作系统环境差异问题，必须先了解操作系统结构。以一个Ubuntu操作系统为例，结构如下：</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210731143401460.png" alt="Ubuntu 操作系统"></p>
<p>结构包括：</p>
<ul>
<li>计算机硬件：例如CPU、内存、磁盘等</li>
<li>系统内核：所有Linux发行版的内核都是Linux，例如CentOS、Ubuntu、Fedora等。内核可以与计算机硬件交互，对外提供<strong>内核指令</strong>，用于操作计算机硬件。</li>
<li>系统应用：操作系统本身提供的应用、函数库。这些函数库是对内核指令的封装，使用更加方便。</li>
</ul>
<p>应用于计算机交互的流程如下：</p>
<p>1）应用调用操作系统应用（函数库），实现各种功能</p>
<p>2）系统函数库是对内核指令集的封装，会调用内核指令</p>
<p>3）内核指令操作计算机硬件</p>
<p>Ubuntu和CentOSpringBoot都是基于Linux内核，无非是系统应用不同，提供的函数库有差异：</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210731144304990.png" alt="Linux系统应用差异"></p>
<p>此时，如果将一个Ubuntu版本的MySQL应用安装到CentOS系统，MySQL在调用Ubuntu函数库时，会发现找不到或者不匹配，就会报错了：</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210731144458680.png" alt="函数库差异报错"></p>
<p>Docker如何解决不同系统环境的问题？</p>
<ul>
<li>Docker将用户程序与所需要调用的系统(比如Ubuntu)函数库一起打包</li>
<li>Docker运行到不同操作系统时，直接基于打包的函数库，借助于操作系统的Linux内核来运行</li>
</ul>
<p>如图：</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210731144820638.png" alt="Docker解决环境差异问题"></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>Docker如何解决大型项目依赖关系复杂，不同组件依赖的兼容性问题？</p>
<ul>
<li>Docker允许开发中将应用、依赖、函数库、配置一起<strong>打包</strong>，形成可移植镜像</li>
<li>Docker应用运行在容器中，使用沙箱机制，相互<strong>隔离</strong></li>
</ul>
<p>Docker如何解决开发、测试、生产环境有差异的问题？</p>
<ul>
<li>Docker镜像中包含完整运行环境，包括系统函数库，仅依赖系统的Linux内核，因此可以在任意Linux操作系统上运行</li>
</ul>
<p>Docker是一个快速交付应用、运行应用的技术，具备下列优势：</p>
<ul>
<li>可以将程序及其依赖、运行环境一起打包为一个镜像，可以迁移到任意Linux操作系统</li>
<li>运行时利用沙箱机制形成隔离容器，各个应用互不干扰</li>
<li>启动、移除都可以通过一行命令完成，方便快捷</li>
</ul>
<h2 id="Docker和虚拟机的区别"><a href="#Docker和虚拟机的区别" class="headerlink" title="Docker和虚拟机的区别"></a>Docker和虚拟机的区别</h2><p>Docker可以让一个应用在任何操作系统中非常方便的运行。而以前我们接触的虚拟机，也能在一个操作系统中，运行另外一个操作系统，保护系统中的任何应用。</p>
<p>两者有什么差异呢？</p>
<p><strong>虚拟机</strong>（virtual machine）是在操作系统中<strong>模拟</strong>硬件设备，然后运行另一个操作系统，比如在 Windows 系统里面运行 Ubuntu 系统，这样就可以运行任意的Ubuntu应用了。</p>
<p><strong>Docker</strong>仅仅是封装函数库，并没有模拟完整的操作系统，如图：</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210731145914960.png" alt="结构差异"></p>
<p>对比来看：</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210731152243765.png" alt="差异描述"></p>
<p>小结：</p>
<p>Docker和虚拟机的差异：</p>
<ul>
<li><p>docker是一个系统进程；虚拟机是在操作系统中的操作系统</p>
</li>
<li><p>docker体积小、启动速度快、性能好；虚拟机体积大、启动速度慢、性能一般</p>
</li>
</ul>
<h2 id="Docker架构"><a href="#Docker架构" class="headerlink" title="Docker架构"></a>Docker架构</h2><h3 id="镜像和容器"><a href="#镜像和容器" class="headerlink" title="镜像和容器"></a>镜像和容器</h3><p>Docker中有几个重要的概念：</p>
<p><strong>镜像（Image）</strong>：Docker将应用程序及其所需的依赖、函数库、环境、配置等文件打包在一起，称为镜像。</p>
<p><strong>容器（Container）</strong>：镜像中的应用程序运行后形成的进程就是<strong>容器</strong>，只是Docker会给容器进程做隔离，对外不可见。</p>
<p>一切应用最终都是代码组成，都是硬盘中的一个个的字节形成的<strong>文件</strong>。只有运行时，才会加载到内存，形成进程。</p>
<p>而<strong>镜像</strong>，就是把一个应用在硬盘上的文件、及其运行环境、部分系统函数库文件一起打包形成的文件包。这个文件包是只读的。</p>
<p><strong>容器</strong>呢，就是将这些文件中编写的程序、函数加载到内存中允许，形成进程，只不过要隔离起来。因此一个镜像可以启动多次，形成多个容器进程。</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210731153059464.png" alt="镜像和容器关系"></p>
<p>例如你下载了一个QQ，如果我们将QQ在磁盘上的运行<strong>文件</strong>及其运行的操作系统依赖打包，形成QQ镜像。然后你可以启动多次，双开、甚至三开QQ，跟多个妹子聊天。</p>
<h3 id="DockerHub"><a href="#DockerHub" class="headerlink" title="DockerHub"></a>DockerHub</h3><p>开源应用程序非常多，打包这些应用往往是重复的劳动。为了避免这些重复劳动，人们就会将自己打包的应用镜像，例如Redis、MySQL镜像放到网络上，共享使用，就像GitHub的代码共享一样。</p>
<ul>
<li><p>DockerHub：DockerHub是一个官方的Docker镜像的托管平台。这样的平台称为Docker Registry。</p>
</li>
<li><p>国内也有类似于DockerHub 的公开服务，比如 <a href="https://c.163yun.com/hub">网易云镜像服务</a>、<a href="https://cr.console.aliyun.com/">阿里云镜像库</a>等。</p>
</li>
</ul>
<p>我们一方面可以将自己的镜像共享到DockerHub，另一方面也可以从DockerHub拉取镜像：</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210731153743354.png" alt="DockerHub示意图"></p>
<h3 id="Docker架构-1"><a href="#Docker架构-1" class="headerlink" title="Docker架构"></a>Docker架构</h3><p>我们要使用Docker来操作镜像、容器，就必须要安装Docker。</p>
<p>Docker是一个CS架构的程序，由两部分组成：</p>
<ul>
<li><p>服务端(server)：Docker守护进程，负责处理Docker指令，管理镜像、容器等</p>
</li>
<li><p>客户端(client)：通过命令或RestAPI向Docker服务端发送指令。可以在本地或远程向服务端发送指令。</p>
</li>
</ul>
<p>如图：</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210731154257653.png" alt="Docker架构"></p>
<h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>镜像：</p>
<ul>
<li>将应用程序及其依赖、环境、配置打包在一起</li>
</ul>
<p>容器：</p>
<ul>
<li>镜像运行起来就是容器，一个镜像可以运行多个容器</li>
</ul>
<p>Docker结构：</p>
<ul>
<li><p>服务端：接收命令或远程请求，操作镜像或容器</p>
</li>
<li><p>客户端：发送命令或者请求到Docker服务端</p>
</li>
</ul>
<p>DockerHub：</p>
<ul>
<li>一个镜像托管的服务器，类似的还有阿里云镜像服务，统称为DockerRegistry</li>
</ul>
<h2 id="CentOS-7安装Docker"><a href="#CentOS-7安装Docker" class="headerlink" title="CentOS 7安装Docker"></a>CentOS 7安装Docker</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>Docker 分为 CE 和 EE 两大版本。CE 即社区版（免费，支持周期 7 个月），EE 即企业版，强调安全，付费使用，支持周期 24 个月。</p>
<p>Docker CE 分为 <code>stable</code> <code>test</code> 和 <code>nightly</code> 三个更新频道。</p>
<p>官方网站上有各种环境下的 <a href="https://docs.docker.com/install/">安装指南</a>，Docker CE 支持 64 位版本 CentOS 7，并且要求内核版本不低于 3.10， CentOS 7 满足最低内核的要求，所以我们在CentOS 7安装Docker。</p>
<h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><p>如果之前安装过旧版本的Docker，可以使用下面命令卸载：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine \</span><br><span class="line">                  docker-ce</span><br></pre></td></tr></table></figure>

<h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><p>首先需要大家虚拟机联网，安装yum工具</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils \</span><br><span class="line">           device-mapper-persistent-data \</span><br><span class="line">           lvm2 --skip-broken</span><br></pre></td></tr></table></figure>

<p>然后更新本地镜像源：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置docker镜像源</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">    </span><br><span class="line">sed -i &#x27;s/download.docker.com/mirrors.aliyun.com\/docker-ce/g&#x27; /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"></span><br><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure>

<p>然后输入命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y docker-ce</span><br></pre></td></tr></table></figure>

<p>docker-ce为社区免费版本。稍等片刻，docker即可安装成功。</p>
<h3 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h3><p>Docker应用需要用到各种端口，逐一去修改防火墙设置。非常麻烦，因此建议大家直接关闭防火墙！</p>
<p>启动docker前，一定要关闭防火墙后！！</p>
<p>启动docker前，一定要关闭防火墙后！！</p>
<p>启动docker前，一定要关闭防火墙后！！</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="comment"># 禁止开机启动防火墙</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure>

<p>通过命令启动docker：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl start docker  <span class="comment"># 启动docker服务</span></span><br><span class="line"></span><br><span class="line">systemctl stop docker  <span class="comment"># 停止docker服务</span></span><br><span class="line"></span><br><span class="line">systemctl restart docker  <span class="comment"># 重启docker服务</span></span><br></pre></td></tr></table></figure>

<p>然后输入命令，可以查看docker版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure>

<p>如图：</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210418154704436.png" alt="docker 版本显示"></p>
<h3 id="配置镜像加速"><a href="#配置镜像加速" class="headerlink" title="配置镜像加速"></a>配置镜像加速</h3><p>docker官方镜像仓库网速较差，我们需要设置国内镜像服务：</p>
<p>参考阿里云的镜像加速文档：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p>
<h2 id="CentOS7安装DockerCompose"><a href="#CentOS7安装DockerCompose" class="headerlink" title="CentOS7安装DockerCompose"></a>CentOS7安装DockerCompose</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>Linux下需要通过命令下载：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">curl -L https://github.com/docker/compose/releases/download/1.23.1/docker-compose-`<span class="built_in">uname</span> -s`-`<span class="built_in">uname</span> -m` &gt; /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<h3 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h3><p>修改文件权限：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<h3 id="Base自动补全命令"><a href="#Base自动补全命令" class="headerlink" title="Base自动补全命令"></a>Base自动补全命令</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 补全命令</span></span><br><span class="line">curl -L https://raw.githubusercontent.com/docker/compose/1.29.1/contrib/completion/bash/docker-compose &gt; /etc/bash_completion.d/docker-compose</span><br></pre></td></tr></table></figure>

<p>如果这里出现错误，需要修改自己的hosts文件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;199.232.68.133 raw.githubusercontent.com&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>

<h2 id="Docker镜像仓库"><a href="#Docker镜像仓库" class="headerlink" title="Docker镜像仓库"></a>Docker镜像仓库</h2><p>搭建镜像仓库可以基于Docker官方提供的DockerRegistry来实现。</p>
<p>官网地址：<a href="https://hub.docker.com/_/registry">https://hub.docker.com/_/registry</a></p>
<h3 id="简化版镜像仓库"><a href="#简化版镜像仓库" class="headerlink" title="简化版镜像仓库"></a>简化版镜像仓库</h3><p>Docker官方的Docker Registry是一个基础版本的Docker镜像仓库，具备仓库管理的完整功能，但是没有图形化界面。</p>
<p>搭建方式比较简单，命令如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --restart=always \</span><br><span class="line">    --name registry \</span><br><span class="line">    -p 5000:5000 \</span><br><span class="line">    -v registry-data:/var/lib/registry \</span><br><span class="line">    registry</span><br></pre></td></tr></table></figure>

<p>命令中挂载了一个数据卷registry-data到容器内的&#x2F;var&#x2F;lib&#x2F;registry 目录，这是私有镜像库存放数据的目录。</p>
<p>访问<a href="http://yourip:5000/v2/_catalog">http://YourIp:5000/v2/_catalog</a> 可以查看当前私有镜像服务中包含的镜像</p>
<h3 id="带有图形化界面版本"><a href="#带有图形化界面版本" class="headerlink" title="带有图形化界面版本"></a>带有图形化界面版本</h3><p>使用DockerCompose部署带有图象界面的DockerRegistry，命令如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.0&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./registry-data:/var/lib/registry</span></span><br><span class="line">  <span class="attr">ui:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">joxit/docker-registry-ui:static</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REGISTRY_TITLE=传智教育私有仓库</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REGISTRY_URL=http://registry:5000</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">registry</span></span><br></pre></td></tr></table></figure>

<h3 id="配置Docker信任地址"><a href="#配置Docker信任地址" class="headerlink" title="配置Docker信任地址"></a>配置Docker信任地址</h3><p>我们的私服采用的是http协议，默认不被Docker信任，所以需要做一个配置：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开要修改的文件</span></span><br><span class="line">vi /etc/docker/daemon.json</span><br><span class="line"><span class="comment"># 添加内容：</span></span><br><span class="line"><span class="string">&quot;insecure-registries&quot;</span>:[<span class="string">&quot;http://192.168.150.101:8080&quot;</span>]</span><br><span class="line"><span class="comment"># 重加载</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="comment"># 重启docker</span></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

<h1 id="Docker的基本操作"><a href="#Docker的基本操作" class="headerlink" title="Docker的基本操作"></a>Docker的基本操作</h1><h2 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h2><h3 id="镜像名称"><a href="#镜像名称" class="headerlink" title="镜像名称"></a>镜像名称</h3><p>首先来看下镜像的名称组成：</p>
<ul>
<li>镜名称一般分两部分组成：[repository]:[tag]。</li>
<li>在没有指定tag时，默认是latest，代表最新版本的镜像</li>
</ul>
<p>如图：</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210731155141362.png" alt="镜像名称组成"></p>
<p>这里的mysql就是repository，5.7就是tag，合一起就是镜像名称，代表5.7版本的MySQL镜像。</p>
<h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><p>常见的镜像操作命令如图：</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210731155649535.png" alt="镜像操作命令"></p>
<h3 id="案例1-拉取、查看镜像"><a href="#案例1-拉取、查看镜像" class="headerlink" title="案例1-拉取、查看镜像"></a>案例1-拉取、查看镜像</h3><p>需求：从DockerHub中拉取一个nginx镜像并查看</p>
<p>1）首先去镜像仓库搜索nginx镜像，比如<a href="https://hub.docker.com/">DockerHub</a>:</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210731155844368.png" alt="搜索镜像"></p>
<p>2）根据查看到的镜像名称，拉取自己需要的镜像，通过命令：docker pull nginx</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210731155856199.png" alt="拉取镜像"></p>
<p>3）通过命令：docker images 查看拉取到的镜像</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210731155903037.png" alt="查看镜像"></p>
<h3 id="案例2-保存、导入镜像"><a href="#案例2-保存、导入镜像" class="headerlink" title="案例2-保存、导入镜像"></a>案例2-保存、导入镜像</h3><p>需求：利用docker save将nginx镜像导出磁盘，然后再通过load加载回来</p>
<p>1）利用docker xx –help命令查看docker save和docker load的语法</p>
<p>例如，查看save命令用法，可以输入命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker save --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210731161104732.png" alt="保存镜像描述"></p>
<p>命令格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker save -o [保存的目标文件名称] [镜像名称]</span><br></pre></td></tr></table></figure>

<p>2）使用docker save导出镜像到磁盘</p>
<p>运行命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker save -o nginx.tar nginx:latest</span><br></pre></td></tr></table></figure>

<p>结果如图：</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210731161354344.png" alt="保存镜像结果"></p>
<p>3）使用docker load加载镜像</p>
<p>先删除本地的nginx镜像：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker rmi nginx:latest</span><br></pre></td></tr></table></figure>

<p>然后运行命令，加载本地文件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker load -i nginx.tar</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210731161746245.png" alt="加载镜像"></p>
<h2 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h2><h3 id="容器相关命令"><a href="#容器相关命令" class="headerlink" title="容器相关命令"></a>容器相关命令</h3><p>容器操作的命令如图：</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210731161950495.png" alt="容器操作"></p>
<p>容器三个状态：</p>
<ul>
<li>运行：进程正常运行</li>
<li>暂停：进程暂停，CPU不再运行，并不释放内存</li>
<li>停止：进程终止，回收进程占用的内存、CPU等资源</li>
</ul>
<p>其中：</p>
<ul>
<li><p>docker run：创建并运行一个容器，处于运行状态</p>
</li>
<li><p>docker pause：让一个运行的容器暂停</p>
</li>
<li><p>docker unpause：让一个容器从暂停状态恢复运行</p>
</li>
<li><p>docker stop：停止一个运行的容器</p>
</li>
<li><p>docker start：让一个停止的容器再次运行</p>
</li>
<li><p>docker rm：删除一个容器</p>
</li>
</ul>
<h3 id="案例-创建并运行一个容器"><a href="#案例-创建并运行一个容器" class="headerlink" title="案例-创建并运行一个容器"></a>案例-创建并运行一个容器</h3><p>创建并运行nginx容器的命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run --name containerName -p 80:80 -d nginx</span><br></pre></td></tr></table></figure>

<p>命令解读：</p>
<ul>
<li>docker run ：创建并运行一个容器</li>
<li>–name : 给容器起一个名字，比如叫做mn</li>
<li>-p ：将宿主机端口与容器端口映射，冒号左侧是宿主机端口，右侧是容器端口</li>
<li>-d：后台运行容器</li>
<li>nginx：镜像名称，例如nginx</li>
</ul>
<p>这里的<code>-p</code>参数，是将容器端口映射到宿主机端口。</p>
<p>默认情况下，容器是隔离环境，我们直接访问宿主机的80端口，肯定访问不到容器中的nginx。</p>
<p>现在，将容器的80与宿主机的80关联起来，当我们访问宿主机的80端口时，就会被映射到容器的80，这样就能访问到nginx了：</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210731163255863.png" alt="容器端口映射"></p>
<h3 id="案例-进入容器，修改文件"><a href="#案例-进入容器，修改文件" class="headerlink" title="案例-进入容器，修改文件"></a>案例-进入容器，修改文件</h3><p><strong>需求</strong>：进入Nginx容器，修改HTML文件内容，添加“传智教育欢迎您”</p>
<p><strong>提示</strong>：进入容器要用到docker exec命令。</p>
<p><strong>步骤</strong>：</p>
<p>1）进入容器。进入我们刚刚创建的nginx容器的命令为：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mn bash</span><br></pre></td></tr></table></figure>

<p>命令解读：</p>
<ul>
<li><p>docker exec ：进入容器内部，执行一个命令</p>
</li>
<li><p>-it : 给当前进入的容器创建一个标准输入、输出终端，允许我们与容器交互</p>
</li>
<li><p>mn ：要进入的容器的名称</p>
</li>
<li><p>bash：进入容器后执行的命令，bash是一个linux终端交互命令</p>
</li>
</ul>
<p>2）进入nginx的HTML所在目录 &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html</p>
<p>容器内部会模拟一个独立的Linux文件系统，看起来如同一个linux服务器一样：</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210731164159811.png" alt="进入容器操作"></p>
<p>nginx的环境、配置、运行文件全部都在这个文件系统中，包括我们要修改的html文件。</p>
<p>查看DockerHub网站中的nginx页面，可以知道nginx的html目录位置在<code>/usr/share/nginx/html</code></p>
<p>我们执行命令，进入该目录：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/share/nginx/html</span><br></pre></td></tr></table></figure>

<p> 查看目录下文件：</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210731164455818.png" alt="目录文件查看"></p>
<p>3）修改index.html的内容</p>
<p>容器内没有vi命令，无法直接修改，我们用下面的命令来修改：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed -i -e <span class="string">&#x27;s#Welcome to nginx#传智教育欢迎您#g&#x27;</span> -e <span class="string">&#x27;s#&lt;head&gt;#&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;#g&#x27;</span> index.html</span><br></pre></td></tr></table></figure>

<p>在浏览器访问自己的虚拟机地址，例如我的是：<a href="http://192.168.150.101，即可看到结果：">http://192.168.150.101，即可看到结果：</a></p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210731164717604.png" alt="修改文本内容"></p>
<h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>docker run命令的常见参数有哪些？</p>
<ul>
<li>–name：指定容器名称</li>
<li>-p：指定端口映射</li>
<li>-d：让容器后台运行</li>
</ul>
<p>查看容器日志的命令：</p>
<ul>
<li>docker logs</li>
<li>添加 -f 参数可以持续查看日志</li>
</ul>
<p>查看容器状态：</p>
<ul>
<li>docker ps</li>
<li>docker ps -a 查看所有容器，包括已经停止的</li>
</ul>
<h2 id="数据卷（容器数据管理）"><a href="#数据卷（容器数据管理）" class="headerlink" title="数据卷（容器数据管理）"></a>数据卷（容器数据管理）</h2><p>在之前的nginx案例中，修改nginx的html页面时，需要进入nginx内部。并且因为没有编辑器，修改文件也很麻烦。</p>
<p>这就是因为容器与数据（容器内文件）耦合带来的后果。</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210731172440275.png" alt="容器与数据耦合"></p>
<p>要解决这个问题，必须将数据与容器解耦，这就要用到数据卷了。</p>
<h3 id="什么是数据卷"><a href="#什么是数据卷" class="headerlink" title="什么是数据卷"></a>什么是数据卷</h3><p><strong>数据卷（volume）</strong>是一个虚拟目录，指向宿主机文件系统中的某个目录。</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210731173541846.png" alt="数据卷示意图"></p>
<p>一旦完成数据卷挂载，对容器的一切操作都会作用在数据卷对应的宿主机目录了。</p>
<p>这样，我们操作宿主机的&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;html目录，就等于操作容器内的&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html目录了</p>
<h3 id="数据集操作命令"><a href="#数据集操作命令" class="headerlink" title="数据集操作命令"></a>数据集操作命令</h3><p>数据卷操作的基本语法如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker volume [COMMAND]</span><br></pre></td></tr></table></figure>

<p>docker volume命令是数据卷操作，根据命令后跟随的command来确定下一步的操作：</p>
<ul>
<li>create 创建一个volume</li>
<li>inspect 显示一个或多个volume的信息</li>
<li>ls 列出所有的volume</li>
<li>prune 删除未使用的volume</li>
<li>rm 删除一个或多个指定的volume</li>
</ul>
<h3 id="创建和查看数据卷"><a href="#创建和查看数据卷" class="headerlink" title="创建和查看数据卷"></a>创建和查看数据卷</h3><p><strong>需求</strong>：创建一个数据卷，并查看数据卷在宿主机的目录位置</p>
<p>① 创建数据卷</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker volume create html</span><br></pre></td></tr></table></figure>

<p>② 查看所有数据</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker volume <span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210731173746910.png" alt="查看所有数据"></p>
<p>③ 查看数据卷详细信息卷</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker volume inspect html</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210731173809877.png" alt="查看数据卷详细信息卷"></p>
<p>可以看到，我们创建的html这个数据卷关联的宿主机目录为<code>/var/lib/docker/volumes/html/_data</code>目录。</p>
<p><strong>小结</strong>：</p>
<p>数据卷的作用：</p>
<ul>
<li>将容器与数据分离，解耦合，方便操作容器内数据，保证数据安全</li>
</ul>
<p>数据卷操作：</p>
<ul>
<li>docker volume create：创建数据卷</li>
<li>docker volume ls：查看所有数据卷</li>
<li>docker volume inspect：查看数据卷详细信息，包括关联的宿主机目录位置</li>
<li>docker volume rm：删除指定数据卷</li>
<li>docker volume prune：删除所有未使用的数据卷</li>
</ul>
<h3 id="挂载数据卷"><a href="#挂载数据卷" class="headerlink" title="挂载数据卷"></a>挂载数据卷</h3><p>我们在创建容器时，可以通过 -v 参数来挂载一个数据卷到某个容器内目录，命令格式如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  --name mn \</span><br><span class="line">  -v html:/root/html \</span><br><span class="line">  -p 8080:80</span><br><span class="line">  nginx \</span><br></pre></td></tr></table></figure>

<p>这里的-v就是挂载数据卷的命令：</p>
<ul>
<li><code>-v html:/root/htm</code> ：把html数据卷挂载到容器内的&#x2F;root&#x2F;html这个目录中</li>
</ul>
<h3 id="案例-给nginx挂载数据卷"><a href="#案例-给nginx挂载数据卷" class="headerlink" title="案例-给nginx挂载数据卷"></a>案例-给nginx挂载数据卷</h3><p><strong>需求</strong>：创建一个nginx容器，修改容器内的html目录内的index.html内容</p>
<p><strong>分析</strong>：上个案例中，我们进入nginx容器内部，已经知道nginx的html目录所在位置&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html ，我们需要把这个目录挂载到html这个数据卷上，方便操作其中的内容。</p>
<p><strong>提示</strong>：运行容器时使用 -v 参数挂载数据卷</p>
<p>步骤：</p>
<p>① 创建容器并挂载数据卷到容器内的HTML目录</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run --name mn -v html:/usr/share/nginx/html -p 80:80 -d nginx</span><br></pre></td></tr></table></figure>

<p>② 进入html数据卷所在位置，并修改HTML内容</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看html数据卷的位置</span></span><br><span class="line">docker volume inspect html</span><br><span class="line"><span class="comment"># 进入该目录</span></span><br><span class="line"><span class="built_in">cd</span> /var/lib/docker/volumes/html/_data</span><br><span class="line"><span class="comment"># 修改文件</span></span><br><span class="line">vi index.html</span><br></pre></td></tr></table></figure>

<h3 id="案例-给MySQL挂载本地目录"><a href="#案例-给MySQL挂载本地目录" class="headerlink" title="案例-给MySQL挂载本地目录"></a>案例-给MySQL挂载本地目录</h3><p>容器不仅仅可以挂载数据卷，也可以直接挂载到宿主机目录上。关联关系如下：</p>
<ul>
<li>带数据卷模式：宿主机目录 –&gt; 数据卷 —&gt; 容器内目录</li>
<li>直接挂载模式：宿主机目录 —&gt; 容器内目录</li>
</ul>
<p>如图：</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210731175155453.png" alt="关联关系示意图"></p>
<p><strong>语法</strong>：</p>
<p>目录挂载与数据卷挂载的语法是类似的：</p>
<ul>
<li>-v [宿主机目录]:[容器内目录]</li>
<li>-v [宿主机文件]:[容器内文件]</li>
</ul>
<p><strong>需求</strong>：创建并运行一个MySQL容器，将宿主机目录直接挂载到容器</p>
<p>实现思路如下：</p>
<p>1）在将课前资料中的mysql.tar文件上传到虚拟机，通过load命令加载为镜像</p>
<p>2）创建目录&#x2F;tmp&#x2F;mysql&#x2F;data</p>
<p>3）创建目录&#x2F;tmp&#x2F;mysql&#x2F;conf，将课前资料提供的hmy.cnf文件上传到&#x2F;tmp&#x2F;mysql&#x2F;conf</p>
<p>4）去DockerHub查阅资料，创建并运行MySQL容器，要求：</p>
<p>① 挂载&#x2F;tmp&#x2F;mysql&#x2F;data到mysql容器内数据存储目录</p>
<p>② 挂载&#x2F;tmp&#x2F;mysql&#x2F;conf&#x2F;hmy.cnf到mysql容器的配置文件</p>
<p>③ 设置MySQL密码</p>
<h3 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h3><p>docker run的命令中通过 -v 参数挂载文件或目录到容器中：</p>
<ul>
<li>-v volume名称:容器内目录</li>
<li>-v 宿主机文件:容器内文</li>
<li>-v 宿主机目录:容器内目录</li>
</ul>
<p>数据卷挂载与目录直接挂载的</p>
<ul>
<li>数据卷挂载耦合度低，由docker来管理目录，但是目录较深，不好找</li>
<li>目录挂载耦合度高，需要我们自己管理目录，不过目录容易寻找查看</li>
</ul>
<h1 id="Dockerfile自定义镜像"><a href="#Dockerfile自定义镜像" class="headerlink" title="Dockerfile自定义镜像"></a>Dockerfile自定义镜像</h1><p>常见的镜像在DockerHub就能找到，但是我们自己写的项目就必须自己构建镜像了。</p>
<p>而要自定义镜像，就必须先了解镜像的结构才行。</p>
<h2 id="镜像结构"><a href="#镜像结构" class="headerlink" title="镜像结构"></a>镜像结构</h2><p>镜像是将应用程序及其需要的系统函数库、环境、配置、依赖打包而成。</p>
<p>我们以MySQL为例，来看看镜像的组成结构：</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210731175806273.png" alt="镜像的组成结构"></p>
<p>简单来说，镜像就是在系统函数库、运行环境基础上，添加应用程序文件、配置文件、依赖文件等组合，然后编写好启动脚本打包在一起形成的文件。</p>
<p>我们要构建镜像，其实就是实现上述打包的过程。</p>
<h2 id="Dockerfile语法"><a href="#Dockerfile语法" class="headerlink" title="Dockerfile语法"></a>Dockerfile语法</h2><p>构建自定义的镜像时，并不需要一个个文件去拷贝，打包。</p>
<p>我们只需要告诉Docker，我们的镜像的组成，需要哪些BaseImage、需要拷贝什么文件、需要安装什么依赖、启动脚本是什么，将来Docker会帮助我们构建镜像。</p>
<p>而描述上述信息的文件就是Dockerfile文件。</p>
<p><strong>Dockerfile</strong>就是一个文本文件，其中包含一个个的**指令(Instruction)**，用指令来说明要执行什么操作来构建镜像。每一个指令都会形成一层Layer。</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210731180321133.png" alt="Dockerfile 语法说明"></p>
<p>更新详细语法说明，请参考官网文档： <a href="https://docs.docker.com/engine/reference/builder">https://docs.docker.com/engine/reference/builder</a></p>
<h2 id="构建Java项目"><a href="#构建Java项目" class="headerlink" title="构建Java项目"></a>构建Java项目</h2><h3 id="基于Ubuntu构建Java项目"><a href="#基于Ubuntu构建Java项目" class="headerlink" title="基于Ubuntu构建Java项目"></a>基于Ubuntu构建Java项目</h3><p>需求：基于Ubuntu镜像构建一个新镜像，运行一个java项目</p>
<ul>
<li><p>步骤1：新建一个空文件夹docker-demo</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210801101207444.png" alt="新建空文件夹"></p>
</li>
<li><p>步骤2：拷贝课前资料中的docker-demo.jar文件到docker-demo这个目录</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210801101314816.png" alt="拷贝资料1"></p>
</li>
<li><p>步骤3：拷贝课前资料中的jdk8.tar.gz文件到docker-demo这个目录</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210801101410200.png" alt="拷贝资料2"></p>
</li>
<li><p>步骤4：拷贝课前资料提供的Dockerfile到docker-demo这个目录</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210801101455590.png" alt="拷贝资料3"></p>
<p>其中的内容如下：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">16.04</span></span><br><span class="line"><span class="comment"># 配置环境变量，JDK的安装目录</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_DIR=/usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝jdk和java项目的包</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./jdk8.tar.gz <span class="variable">$JAVA_DIR</span>/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./docker-demo.jar /tmp/app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装JDK</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> <span class="variable">$JAVA_DIR</span> \</span></span><br><span class="line"><span class="language-bash"> &amp;&amp; tar -xf ./jdk8.tar.gz \</span></span><br><span class="line"><span class="language-bash"> &amp;&amp; <span class="built_in">mv</span> ./jdk1.8.0_144 ./java8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME=$JAVA_DIR/java8</span><br><span class="line"><span class="keyword">ENV</span> PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8090</span></span><br><span class="line"><span class="comment"># 入口，java项目的启动命令</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> java -jar /tmp/app.jar</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>步骤5：进入docker-demo</p>
<p>将准备好的docker-demo上传到虚拟机任意目录，然后进入docker-demo目录下</p>
</li>
<li><p>步骤6：运行命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker build -t javaweb:1.0 .</span><br></pre></td></tr></table></figure></li>
</ul>
<p>最后访问 <a href="http://192.168.150.101:8090/hello/count%EF%BC%8C%E5%85%B6%E4%B8%AD%E7%9A%84ip%E6%94%B9%E6%88%90%E4%BD%A0%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BAip">http://192.168.150.101:8090/hello/count，其中的ip改成你的虚拟机ip</a></p>
<h3 id="基于java8构建Java项目"><a href="#基于java8构建Java项目" class="headerlink" title="基于java8构建Java项目"></a>基于java8构建Java项目</h3><p>虽然我们可以基于Ubuntu基础镜像，添加任意自己需要的安装包，构建镜像，但是却比较麻烦。所以大多数情况下，我们都可以在一些安装了部分软件的基础镜像上做改造。</p>
<p>例如，构建java项目的镜像，可以在已经准备了JDK的基础镜像基础上构建。</p>
<p>需求：基于java:8-alpine镜像，将一个Java项目构建为镜像</p>
<p>实现思路如下：</p>
<ul>
<li><p>① 新建一个空的目录，然后在目录中新建一个文件，命名为Dockerfile</p>
</li>
<li><p>② 拷贝课前资料提供的docker-demo.jar到这个目录中</p>
</li>
<li><p>③ 编写Dockerfile文件：</p>
<ul>
<li><p>a ）基于java:8-alpine作为基础镜像</p>
</li>
<li><p>b ）将app.jar拷贝到镜像中</p>
</li>
<li><p>c ）暴露端口</p>
</li>
<li><p>d ）编写入口ENTRYPOINT</p>
<p>内容如下：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span>-alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./app.jar /tmp/app.jar</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8090</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> java -jar /tmp/app.jar</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>④ 使用docker build命令构建镜像</p>
</li>
<li><p>⑤ 使用docker run创建容器并运行</p>
</li>
</ul>
<h2 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h2><p>小结：</p>
<ol>
<li><p>Dockerfile的本质是一个文件，通过指令描述镜像的构建过程</p>
</li>
<li><p>Dockerfile的第一行必须是FROM，从一个基础镜像来构建</p>
</li>
<li><p>基础镜像可以是基本操作系统，如Ubuntu。也可以是其他人制作好的镜像，例如：java:8-alpine</p>
</li>
</ol>
<h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker-Compose"></a>Docker-Compose</h1><p>Docker Compose可以基于Compose文件帮我们快速的部署分布式应用，而无需手动一个个创建和运行容器！</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210731180921742.png" alt="Docker Compose"></p>
<h2 id="初识DockerCompose"><a href="#初识DockerCompose" class="headerlink" title="初识DockerCompose"></a>初识DockerCompose</h2><p>Compose文件是一个文本文件，通过指令定义集群中的每个容器如何运行。格式如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">version<span class="punctuation">:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"> services<span class="punctuation">:</span></span><br><span class="line">  mysql<span class="punctuation">:</span></span><br><span class="line">    image<span class="punctuation">:</span> mysql<span class="punctuation">:</span><span class="number">5.7</span><span class="number">.25</span></span><br><span class="line">    environment<span class="punctuation">:</span></span><br><span class="line">     MYSQL_ROOT_PASSWORD<span class="punctuation">:</span> <span class="number">123</span> </span><br><span class="line">    volumes<span class="punctuation">:</span></span><br><span class="line">     - <span class="string">&quot;/tmp/mysql/data:/var/lib/mysql&quot;</span></span><br><span class="line">     - <span class="string">&quot;/tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf&quot;</span></span><br><span class="line">  web<span class="punctuation">:</span></span><br><span class="line">    build<span class="punctuation">:</span> .</span><br><span class="line">    ports<span class="punctuation">:</span></span><br><span class="line">     - <span class="string">&quot;8090:8090&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面的Compose文件就描述一个项目，其中包含两个容器：</p>
<ul>
<li>mysql：一个基于<code>mysql:5.7.25</code>镜像构建的容器，并且挂载了两个目录</li>
<li>web：一个基于<code>docker build</code>临时构建的镜像容器，映射端口时8090</li>
</ul>
<p>DockerCompose的详细语法参考官网：<a href="https://docs.docker.com/compose/compose-file/">https://docs.docker.com/compose/compose-file/</a></p>
<p>其实DockerCompose文件可以看做是将多个docker run命令写到一个文件，只是语法稍有差异。</p>
<h2 id="安装DockerCompose"><a href="#安装DockerCompose" class="headerlink" title="安装DockerCompose"></a>安装DockerCompose</h2><p>参考课前资料</p>
<h2 id="部署微服务集群"><a href="#部署微服务集群" class="headerlink" title="部署微服务集群"></a>部署微服务集群</h2><p><strong>需求</strong>：将之前学习的cloud-demo微服务集群利用DockerCompose部署</p>
<p><strong>实现思路</strong>：</p>
<p>① 查看课前资料提供的cloud-demo文件夹，里面已经编写好了docker-compose文件</p>
<p>② 修改自己的cloud-demo项目，将数据库、nacos地址都命名为docker-compose中的服务名</p>
<p>③ 使用maven打包工具，将项目中的每个微服务都打包为app.jar</p>
<p>④ 将打包好的app.jar拷贝到cloud-demo中的每一个对应的子目录中</p>
<p>⑤ 将cloud-demo上传至虚拟机，利用 docker-compose up -d 来部署</p>
<h3 id="compose文件"><a href="#compose文件" class="headerlink" title="compose文件"></a>compose文件</h3><p>查看课前资料提供的cloud-demo文件夹，里面已经编写好了docker-compose文件，而且每个微服务都准备了一个独立的目录：</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210731181341330.png" alt="文件结构"></p>
<p>内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nacos/nacos-server</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MODE:</span> <span class="string">standalone</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8848:8848&quot;</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7.25</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;$PWD/mysql/data:/var/lib/mysql&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;$PWD/mysql/conf:/etc/mysql/conf.d/&quot;</span></span><br><span class="line">  <span class="attr">userservice:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./user-service</span></span><br><span class="line">  <span class="attr">orderservice:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./order-service</span></span><br><span class="line">  <span class="attr">gateway:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./gateway</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;10010:10010&quot;</span></span><br></pre></td></tr></table></figure>

<p>可以看到，其中包含5个service服务：</p>
<ul>
<li><code>nacos</code>：作为注册中心和配置中心<ul>
<li><code>image: nacos/nacos-server</code>： 基于nacos&#x2F;nacos-server镜像构建</li>
<li><code>environment</code>：环境变量<ul>
<li><code>MODE: standalone</code>：单点模式启动</li>
</ul>
</li>
<li><code>ports</code>：端口映射，这里暴露了8848端口</li>
</ul>
</li>
<li><code>mysql</code>：数据库<ul>
<li><code>image: mysql:5.7.25</code>：镜像版本是mysql:5.7.25</li>
<li><code>environment</code>：环境变量<ul>
<li><code>MYSQL_ROOT_PASSWORD: 123</code>：设置数据库root账户的密码为123</li>
</ul>
</li>
<li><code>volumes</code>：数据卷挂载，这里挂载了mysql的data、conf目录，其中有我提前准备好的数据</li>
</ul>
</li>
<li><code>userservice</code>、<code>orderservice</code>、<code>gateway</code>：都是基于Dockerfile临时构建的</li>
</ul>
<p>查看mysql目录，可以看到其中已经准备好了cloud_order、cloud_user表：</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210801095205034.png" alt="文件展示"></p>
<p>查看微服务目录，可以看到都包含Dockerfile文件：</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210801095320586.png" alt="文件展示"></p>
<p>内容如下：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span>-alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./app.jar /tmp/app.jar</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> java -jar /tmp/app.jar</span></span><br></pre></td></tr></table></figure>

<h3 id="修改微服务配置"><a href="#修改微服务配置" class="headerlink" title="修改微服务配置"></a>修改微服务配置</h3><p>因为微服务将来要部署为docker容器，而容器之间互联不是通过IP地址，而是通过容器名。这里我们将order-service、user-service、gateway服务的mysql、nacos地址都修改为基于容器名的访问。</p>
<p>如下所示：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://mysql:3306/cloud_order?useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">orderservice</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">nacos:8848</span> <span class="comment"># nacos服务地址</span></span><br></pre></td></tr></table></figure>

<h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>接下来需要将我们的每个微服务都打包。因为之前查看到Dockerfile中的jar包名称都是app.jar，因此我们的每个微服务都需要用这个名称。</p>
<p>可以通过修改pom.xml中的打包名称来实现，每个微服务都需要修改：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 服务打包的最终名称 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>app<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>打包后：</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210801095951030.png" alt="打包后"></p>
<h3 id="拷贝jar包到部署目录"><a href="#拷贝jar包到部署目录" class="headerlink" title="拷贝jar包到部署目录"></a>拷贝jar包到部署目录</h3><p>编译打包好的app.jar文件，需要放到Dockerfile的同级目录中。注意：每个微服务的app.jar放到与服务名称对应的目录，别搞错了。</p>
<p>user-service：</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210801100201253.png" alt="user-service"></p>
<p>order-service：</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210801100231495.png" alt="order-service"></p>
<p>gateway：</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210801100308102.png" alt="gateway"></p>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>最后，我们需要将文件整个cloud-demo文件夹上传到虚拟机中，理由DockerCompose部署。</p>
<p>上传到任意目录：</p>
<p><img src="/.https:/img.nonnight.com/img/mts-docker/image-20210801100955653.png" alt="上传目录"></p>
<p>部署：</p>
<p>进入cloud-demo目录，然后运行下面的命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<h1 id="Docker镜像仓库-1"><a href="#Docker镜像仓库-1" class="headerlink" title="Docker镜像仓库"></a>Docker镜像仓库</h1><h2 id="搭建私有镜像仓库"><a href="#搭建私有镜像仓库" class="headerlink" title="搭建私有镜像仓库"></a>搭建私有镜像仓库</h2><p>参考课前资料《CentOS7安装Docker.md》</p>
<h2 id="推送、拉取镜像"><a href="#推送、拉取镜像" class="headerlink" title="推送、拉取镜像"></a>推送、拉取镜像</h2><p>推送镜像到私有镜像服务必须先tag，步骤如下：</p>
<p>① 重新tag本地镜像，名称前缀为私有仓库的地址：192.168.150.101:8080&#x2F;</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker tag nginx:latest 192.168.150.101:8080/nginx:1.0 </span><br></pre></td></tr></table></figure>

<p>② 推送镜像</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker push 192.168.150.101:8080/nginx:1.0 </span><br></pre></td></tr></table></figure>

<p>③ 拉取镜像</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull 192.168.150.101:8080/nginx:1.0 </span><br></pre></td></tr></table></figure>

<h1 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h1><blockquote>
<p>文件数据:<br>链接：<a href="https://pan.baidu.com/s/1jrFwpKD3RCPAEPNPnszYnw">https://pan.baidu.com/s/1jrFwpKD3RCPAEPNPnszYnw</a><br>提取码：tnn8</p>
<p><a href="https://www.bilibili.com/read/cv9965357/">https://www.bilibili.com/read/cv9965357/</a> 黑马程序员</p>
</blockquote>
]]></content>
      <tags>
        <tag>学习记录</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>天地劫-幽城再临-角色培养</title>
    <url>/%E6%B8%B8%E6%88%8F/tdd-phantom-city-revisited/heaven-and-earth-robbery.html</url>
    <content><![CDATA[<span id="more"></span>

<pre><code>天地劫-幽城再临属于SRPG(Strategy Role-Playing Game),除去剧情外，角色养成和战旗策略是该类游戏的两大游玩内容。
</code></pre>
<h3 id="角色养成"><a href="#角色养成" class="headerlink" title="角色养成"></a>角色养成</h3><h4 id="角色能力组成与对应资源来源"><a href="#角色能力组成与对应资源来源" class="headerlink" title="角色能力组成与对应资源来源"></a>角色能力组成与对应资源来源</h4><pre><code>- 兵刃
    - 淬火（蚀之隙）
    - 魂石（创命之间、幻海魂渊）
    - 神兵（九如塔）
- 及身
    - 饰品（三途川）
    - 精化（灵脉光渊）
- 五内
    - 化蕴（蚀之隙）
    - 内力精进（江湖）
    - 绝学化神（江湖）
- 天魂之力
    - 回响（蚀之隙）
</code></pre>
<p>由此可见，培养角色的本质在于资源材料获取（副本攻克），根据副本敌人属性组成本人将副本分为单属性副本和多属性副本：</p>
<ul>
<li>单属性副本<ul>
<li>创命之间、幻海魂渊、九如塔、灵脉光渊</li>
</ul>
</li>
<li>多属性副本<ul>
<li>蚀之隙、三途川、江湖</li>
</ul>
</li>
</ul>
<h4 id="养成探讨"><a href="#养成探讨" class="headerlink" title="养成探讨"></a>养成探讨</h4><blockquote>
<p>根据副本类型，对应出属性队和混色队，属性队由单属性为主体组成，混色队由多色队组成。<br>两种队伍形成原因在于属性克制和副本对属性的加成（九如塔）。<br>游戏推荐角色养成路线和有限的资源导致混色队培养优先级高于混色队。<br>角色功能可以分为：输出、辅助、坦克三类，且功能存在交集，即一个角色既可以是输出也可以是辅助。<br>角色职业培养优先级：侠客、巫咒&gt;祝由&gt;铁卫&gt;御风&gt;羽士；<br>侠客为游戏中最为平衡的职业，数值平均，功能多样，适配能力强，常作为物理主输出。<br>祝由常作为恢复辅助，大幅提高队伍生存能力。<br>铁卫有很高的生存能力，护卫能力可保护队友，为队友攻击提供环境。</p>
</blockquote>
<h4 id="培养方案"><a href="#培养方案" class="headerlink" title="培养方案"></a>培养方案</h4><ul>
<li>第一阶段：混色队培养 - 标准：六星五属性有阵混色队 - 例子：真胤[雷]（阵眼-坦克+辅助）、殷剑平[炎]（物理输出）、于小雪[冰]（辅助）、武英仲[光]（辅助+输出）、黎幽<a href="%E8%BE%85%E5%8A%A9+%E8%BE%93%E5%87%BA">暗</a> - 说明：混色队培养需要考虑两个问题，第一是角色强度，第二是向属性队的衍生；以上角色中，每个角色都很强力，都有阵，并且该阵可组成本身属性的属性队，可顺利的衍生出属性队，五个人配合强度和功能性也很高。</li>
<li>第二阶段：五属性纯色队培养 - 标准：两个六星+三个五星有阵属性队 - 例子：冰属性-&gt;于小雪（阵眼）+冰璃+隋酒+封寒月+银玛 - 说明：当达到该标准时，九如塔可较为轻松通过，江湖也有一战之力，得到资源后反哺本属性人物；由于资源有限，个人建议一个属性队一个属性队的培养，切不可零碎培养，导致培养周期延长</li>
<li>第三阶段：五属性全职业培养</li>
</ul>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>天地劫</tag>
        <tag>SRPG</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务技术栈-rabbitMQ</title>
    <url>/uncategorized/microservices-technology-stack/microservices-technology-stack-rabbitMQ.html</url>
    <content><![CDATA[<h1 id="初识MQ"><a href="#初识MQ" class="headerlink" title="初识MQ"></a>初识MQ</h1><h2 id="同步和异步通讯"><a href="#同步和异步通讯" class="headerlink" title="同步和异步通讯"></a>同步和异步通讯</h2><p>微服务间通讯有同步和异步两种方式：</p>
<p>同步通讯：就像打电话，需要实时响应。</p>
<p>异步通讯：就像发邮件，不需要马上回复。</p>
<p><img src="/.https:/img.nonnight.com/img/mts-rabbitMQ/image-20210717161939695.png" alt="同步通讯与异步通讯"></p>
<p>两种方式各有优劣，打电话可以立即得到响应，但是你却不能跟多个人同时通话。发送邮件可以同时与多个人收发邮件，但是往往响应会有延迟。</p>
<h3 id="同步通讯"><a href="#同步通讯" class="headerlink" title="同步通讯"></a>同步通讯</h3><p>我们之前学习的Feign调用就属于同步方式，虽然调用可以实时得到结果，但存在下面的问题：</p>
<p><img src="/.https:/img.nonnight.com/img/mts-rabbitMQ/image-20210717162004285.png" alt="同步通讯问题"></p>
<p>总结：</p>
<p>同步调用的优点：</p>
<ul>
<li>时效性较强，可以立即得到结果</li>
</ul>
<p>同步调用的问题：</p>
<ul>
<li>耦合度高</li>
<li>性能和吞吐能力下降</li>
<li>有额外的资源消耗</li>
<li>有级联失败问题</li>
</ul>
<h3 id="异步通讯"><a href="#异步通讯" class="headerlink" title="异步通讯"></a>异步通讯</h3><p>异步调用则可以避免上述问题：</p>
<p>我们以购买商品为例，用户支付后需要调用订单服务完成订单状态修改，调用物流服务，从仓库分配响应的库存并准备发货。</p>
<p>在事件模式中，支付服务是事件发布者（publisher），在支付完成后只需要发布一个支付成功的事件（event），事件中带上订单id。</p>
<p>订单服务和物流服务是事件订阅者（Consumer），订阅支付成功的事件，监听到事件后完成自己业务即可。</p>
<p>为了解除事件发布者与订阅者之间的耦合，两者并不是直接通信，而是有一个中间人（Broker）。发布者发布事件到Broker，不关心谁来订阅事件。订阅者从Broker订阅事件，不关心谁发来的消息。</p>
<p><img src="/.https:/img.nonnight.com/img/mts-rabbitMQ/image-20210422095356088.png" alt="Broker的作用"></p>
<p>Broker 是一个像数据总线一样的东西，所有的服务要接收数据和发送数据都发到这个总线上，这个总线就像协议一样，让服务间的通讯变得标准和可控。</p>
<p>好处：</p>
<ul>
<li><p>吞吐量提升：无需等待订阅者处理完成，响应更快速</p>
</li>
<li><p>故障隔离：服务没有直接调用，不存在级联失败问题</p>
</li>
<li><p>调用间没有阻塞，不会造成无效的资源占用</p>
</li>
<li><p>耦合度极低，每个服务都可以灵活插拔，可替换</p>
</li>
<li><p>流量削峰：不管发布事件的流量波动多大，都由Broker接收，订阅者可以按照自己的速度去处理事件</p>
</li>
</ul>
<p>缺点：</p>
<ul>
<li>架构复杂了，业务没有明显的流程线，不好管理</li>
<li>需要依赖于Broker的可靠、安全、性能</li>
</ul>
<p>好在现在开源软件或云平台上 Broker 的软件是非常成熟的，比较常见的一种就是我们今天要学习的MQ技术。</p>
<h2 id="技术对比"><a href="#技术对比" class="headerlink" title="技术对比"></a>技术对比</h2><p>MQ，中文是消息队列（MessageQueue），字面来看就是存放消息的队列。也就是事件驱动架构中的Broker。</p>
<p>比较常见的MQ实现：</p>
<ul>
<li>ActiveMQ</li>
<li>RabbitMQ</li>
<li>RocketMQ</li>
<li>Kafka</li>
</ul>
<p>几种常见MQ的对比：</p>
<table>
<thead>
<tr>
<th></th>
<th><strong>RabbitMQ</strong></th>
<th><strong>ActiveMQ</strong></th>
<th><strong>RocketMQ</strong></th>
<th><strong>Kafka</strong></th>
</tr>
</thead>
<tbody><tr>
<td>公司&#x2F;社区</td>
<td>Rabbit</td>
<td>Apache</td>
<td>阿里</td>
<td>Apache</td>
</tr>
<tr>
<td>开发语言</td>
<td>Erlang</td>
<td>Java</td>
<td>Java</td>
<td>Scala&amp;Java</td>
</tr>
<tr>
<td>协议支持</td>
<td>AMQP，XMPP，SMTP，STOMP</td>
<td>OpenWire,STOMP，REST,XMPP,AMQP</td>
<td>自定义协议</td>
<td>自定义协议</td>
</tr>
<tr>
<td>可用性</td>
<td>高</td>
<td>一般</td>
<td>高</td>
<td>高</td>
</tr>
<tr>
<td>单机吞吐量</td>
<td>一般</td>
<td>差</td>
<td>高</td>
<td>非常高</td>
</tr>
<tr>
<td>消息延迟</td>
<td>微秒级</td>
<td>毫秒级</td>
<td>毫秒级</td>
<td>毫秒以内</td>
</tr>
<tr>
<td>消息可靠性</td>
<td>高</td>
<td>一般</td>
<td>高</td>
<td>一般</td>
</tr>
</tbody></table>
<p>追求可用性：Kafka、 RocketMQ 、RabbitMQ</p>
<p>追求可靠性：RabbitMQ、RocketMQ</p>
<p>追求吞吐能力：RocketMQ、Kafka</p>
<p>追求消息低延迟：RabbitMQ、Kafka</p>
<h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><h2 id="安装RabbitMQ"><a href="#安装RabbitMQ" class="headerlink" title="安装RabbitMQ"></a>安装RabbitMQ</h2><p>安装RabbitMQ，参考课前资料：</p>
<p><img src="/.https:/img.nonnight.com/img/mts-rabbitMQ/image-20210717162628635.png" alt="文件地址"></p>
<p>MQ的基本结构：</p>
<p><img src="/.https:/img.nonnight.com/img/mts-rabbitMQ/image-20210717162752376.png" alt="MQ的基本结构"></p>
<p>RabbitMQ中的一些角色：</p>
<ul>
<li>publisher：生产者</li>
<li>consumer：消费者</li>
<li>exchange个：交换机，负责消息路由</li>
<li>queue：队列，存储消息</li>
<li>virtualHost：虚拟主机，隔离不同租户的exchange、queue、消息的隔离</li>
</ul>
<h2 id="RabbitMQ消息模型"><a href="#RabbitMQ消息模型" class="headerlink" title="RabbitMQ消息模型"></a>RabbitMQ消息模型</h2><p>RabbitMQ官方提供了5个不同的Demo示例，对应了不同的消息模型：</p>
<p><img src="/.https:/img.nonnight.com/img/mts-rabbitMQ/image-20210717163332646.png" alt="五种消息模型"></p>
<h2 id="导入Demo工程"><a href="#导入Demo工程" class="headerlink" title="导入Demo工程"></a>导入Demo工程</h2><p>课前资料提供了一个Demo工程，mq-demo:</p>
<p><img src="/.https:/img.nonnight.com/img/mts-rabbitMQ/image-20210717163253264.png" alt="文件地址"></p>
<p>导入后可以看到结构如下：</p>
<p><img src="/.https:/img.nonnight.com/img/mts-rabbitMQ/image-20210717163604330.png" alt="代码结构"></p>
<p>包括三部分：</p>
<ul>
<li>mq-demo：父工程，管理项目依赖</li>
<li>publisher：消息的发送者</li>
<li>consumer：消息的消费者</li>
</ul>
<h2 id="2-4-入门案例"><a href="#2-4-入门案例" class="headerlink" title="2.4.入门案例"></a>2.4.入门案例</h2><p>简单队列模式的模型图：</p>
<p> <img src="/.https:/img.nonnight.com/img/mts-rabbitMQ/image-20210717163434647.png" alt="简单队列模型图"></p>
<p>官方的HelloWorld是基于最基础的消息队列模型来实现的，只包括三个角色：</p>
<ul>
<li>publisher：消息发布者，将消息发送到队列queue</li>
<li>queue：消息队列，负责接受并缓存消息</li>
<li>consumer：订阅队列，处理队列中的消息</li>
</ul>
<h3 id="publisher实现"><a href="#publisher实现" class="headerlink" title="publisher实现"></a>publisher实现</h3><p>思路：</p>
<ul>
<li>建立连接</li>
<li>创建Channel</li>
<li>声明队列</li>
<li>发送消息</li>
<li>关闭连接和channel</li>
</ul>
<p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mq.helloworld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PublisherTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMessage</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">// 1.建立连接</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">// 1.1.设置连接参数，分别是：主机名、端口号、vhost、用户名、密码</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.150.101&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;itcast&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;123321&quot;</span>);</span><br><span class="line">        <span class="comment">// 1.2.建立连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.创建通道Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.创建队列</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queueName, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.发送消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, rabbitmq!&quot;</span>;</span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>, queueName, <span class="literal">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot;发送消息成功：【&quot;</span> + message + <span class="string">&quot;】&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.关闭通道和连接</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="consumer实现"><a href="#consumer实现" class="headerlink" title="consumer实现"></a>consumer实现</h3><p>代码思路：</p>
<ul>
<li>建立连接</li>
<li>创建Channel</li>
<li>声明队列</li>
<li>订阅消息</li>
</ul>
<p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mq.helloworld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">// 1.建立连接</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">// 1.1.设置连接参数，分别是：主机名、端口号、vhost、用户名、密码</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.150.101&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;itcast&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;123321&quot;</span>);</span><br><span class="line">        <span class="comment">// 1.2.建立连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.创建通道Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.创建队列</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queueName, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.订阅消息</span></span><br><span class="line">        channel.basicConsume(queueName, <span class="literal">true</span>, <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope,</span></span><br><span class="line"><span class="params">                                       AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="comment">// 5.处理消息</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(body);</span><br><span class="line">                System.out.println(<span class="string">&quot;接收到消息：【&quot;</span> + message + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;等待接收消息。。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>基本消息队列的消息发送流程：</p>
<ol>
<li><p>建立connection</p>
</li>
<li><p>创建channel</p>
</li>
<li><p>利用channel声明队列</p>
</li>
<li><p>利用channel向队列发送消息</p>
</li>
</ol>
<p>基本消息队列的消息接收流程：</p>
<ol>
<li><p>建立connection</p>
</li>
<li><p>创建channel</p>
</li>
<li><p>利用channel声明队列</p>
</li>
<li><p>定义consumer的消费行为handleDelivery()</p>
</li>
<li><p>利用channel将消费者与队列绑定</p>
</li>
</ol>
<h1 id="SpringAMQP"><a href="#SpringAMQP" class="headerlink" title="SpringAMQP"></a>SpringAMQP</h1><p>SpringAMQP是基于RabbitMQ封装的一套模板，并且还利用SpringBoot对其实现了自动装配，使用起来非常方便。</p>
<p>SpringAmqp的官方地址：<a href="https://spring.io/projects/spring-amqp">https://spring.io/projects/spring-amqp</a></p>
<p><img src="/.https:/img.nonnight.com/img/mts-rabbitMQ/image-20210717164024967.png" alt="AMQP"></p>
<p><img src="/.https:/img.nonnight.com/img/mts-rabbitMQ/image-20210717164038678.png" alt="SpringAMQP"></p>
<p>SpringAMQP提供了三个功能：</p>
<ul>
<li>自动声明队列、交换机及其绑定关系</li>
<li>基于注解的监听器模式，异步接收消息</li>
<li>封装了RabbitTemplate工具，用于发送消息</li>
</ul>
<h2 id="Basic-Queue-简单队列模型"><a href="#Basic-Queue-简单队列模型" class="headerlink" title="Basic Queue 简单队列模型"></a>Basic Queue 简单队列模型</h2><p>在父工程mq-demo中引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--AMQP依赖，包含RabbitMQ--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="消息发送"><a href="#消息发送" class="headerlink" title="消息发送"></a>消息发送</h3><p>首先配置MQ地址，在publisher服务的application.yml中添加配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.150</span><span class="number">.101</span> <span class="comment"># 主机名</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span> <span class="comment"># 虚拟主机</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">itcast</span> <span class="comment"># 用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span> <span class="comment"># 密码</span></span><br></pre></td></tr></table></figure>

<p>然后在publisher服务中编写测试类SpringAmqpTest，并利用RabbitTemplate实现消息发送：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mq.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAmqpTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSimpleQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 队列名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        <span class="comment">// 消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, spring amqp!&quot;</span>;</span><br><span class="line">        <span class="comment">// 发送消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(queueName, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="消息接收"><a href="#消息接收" class="headerlink" title="消息接收"></a>消息接收</h3><p>首先配置MQ地址，在consumer服务的application.yml中添加配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.150</span><span class="number">.101</span> <span class="comment"># 主机名</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span> <span class="comment"># 虚拟主机</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">itcast</span> <span class="comment"># 用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span> <span class="comment"># 密码</span></span><br></pre></td></tr></table></figure>

<p>然后在consumer服务的<code>cn.itcast.mq.listener</code>包中新建一个类SpringRabbitListener，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mq.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueueMessage</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;spring 消费者接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>启动consumer服务，然后在publisher服务中运行测试代码，发送MQ消息</p>
<h2 id="WorkQueue"><a href="#WorkQueue" class="headerlink" title="WorkQueue"></a>WorkQueue</h2><p>Work queues，也被称为（Task queues），任务模型。简单来说就是<strong>让多个消费者绑定到一个队列，共同消费队列中的消息</strong>。</p>
<p><img src="/.https:/img.nonnight.com/img/mts-rabbitMQ/image-20210717164238910.png" alt="任务模型"></p>
<p>当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度。长此以往，消息就会堆积越来越多，无法及时处理。</p>
<p>此时就可以使用work 模型，多个消费者共同处理消息处理，速度就能大大提高了。</p>
<h3 id="消息发送-1"><a href="#消息发送-1" class="headerlink" title="消息发送"></a>消息发送</h3><p>这次我们循环发送，模拟大量消息堆积现象。</p>
<p>在publisher服务中的SpringAmqpTest类中添加一个测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * workQueue</span></span><br><span class="line"><span class="comment">     * 向队列中不停发送消息，模拟消息堆积。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWorkQueue</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 队列名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, message_&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 发送消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(queueName, message + i);</span><br><span class="line">        Thread.sleep(<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="消息接收-1"><a href="#消息接收-1" class="headerlink" title="消息接收"></a>消息接收</h3><p>要模拟多个消费者绑定同一个队列，我们在consumer服务的SpringRabbitListener中添加2个新的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueue1</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalTime.now());</span><br><span class="line">    Thread.sleep(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueue2</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.err.println(<span class="string">&quot;消费者2........接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalTime.now());</span><br><span class="line">    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意到这个消费者sleep了1000秒，模拟任务耗时。</p>
<h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>启动ConsumerApplication后，在执行publisher服务中刚刚编写的发送测试方法testWorkQueue。</p>
<p>可以看到消费者1很快完成了自己的25条消息。消费者2却在缓慢的处理自己的25条消息。</p>
<p>也就是说消息是平均分配给每个消费者，并没有考虑到消费者的处理能力。这样显然是有问题的。</p>
<h3 id="能者多劳"><a href="#能者多劳" class="headerlink" title="能者多劳"></a>能者多劳</h3><p>在spring中有一个简单的配置，可以解决这个问题。我们修改consumer服务的application.yml文件，添加配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span> <span class="comment"># 每次只能获取一条消息，处理完成才能获取下一个消息</span></span><br></pre></td></tr></table></figure>

<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>Work模型的使用：</p>
<ul>
<li>多个消费者绑定到一个队列，同一条消息只会被一个消费者处理</li>
<li>通过设置prefetch来控制消费者预取的消息数量</li>
</ul>
<h2 id="发布-x2F-订阅"><a href="#发布-x2F-订阅" class="headerlink" title="发布&#x2F;订阅"></a>发布&#x2F;订阅</h2><p>发布订阅的模型如图：</p>
<p><img src="/.https:/img.nonnight.com/img/mts-rabbitMQ/image-20210717165309625.png" alt="发布订阅"></p>
<p>可以看到，在订阅模型中，多了一个exchange角色，而且过程略有变化：</p>
<ul>
<li>Publisher：生产者，也就是要发送消息的程序，但是不再发送到队列中，而是发给X（交换机）</li>
<li>Exchange：交换机，图中的X。一方面，接收生产者发送的消息。另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange的类型。Exchange有以下3种类型：<ul>
<li>Fanout：广播，将消息交给所有绑定到交换机的队列</li>
<li>Direct：定向，把消息交给符合指定routing key 的队列</li>
<li>Topic：通配符，把消息交给符合routing pattern（路由模式） 的队列</li>
</ul>
</li>
<li>Consumer：消费者，与以前一样，订阅队列，没有变化</li>
<li>Queue：消息队列也与以前一样，接收消息、缓存消息。</li>
</ul>
<p><strong>Exchange（交换机）只负责转发消息，不具备存储消息的能力</strong>，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！</p>
<h2 id="Fanout"><a href="#Fanout" class="headerlink" title="Fanout"></a>Fanout</h2><p>Fanout，英文翻译是扇出，我觉得在MQ中叫广播更合适。</p>
<p><img src="/.https:/img.nonnight.com/img/mts-rabbitMQ/image-20210717165438225.png" alt="广播模式"></p>
<p>在广播模式下，消息发送流程是这样的：</p>
<ul>
<li>1）  可以有多个队列</li>
<li>2）  每个队列都要绑定到Exchange（交换机）</li>
<li>3）  生产者发送的消息，只能发送到交换机，交换机来决定要发给哪个队列，生产者无法决定</li>
<li>4）  交换机把消息发送给绑定过的所有队列</li>
<li>5）  订阅队列的消费者都能拿到消息</li>
</ul>
<p>我们的计划是这样的：</p>
<ul>
<li>创建一个交换机 itcast.fanout，类型是Fanout</li>
<li>创建两个队列fanout.queue1和fanout.queue2，绑定到交换机itcast.fanout</li>
</ul>
<p><img src="/.https:/img.nonnight.com/img/mts-rabbitMQ/image-20210717165509466.png" alt="示例模型"></p>
<h3 id="声明队列和交换机"><a href="#声明队列和交换机" class="headerlink" title="声明队列和交换机"></a>声明队列和交换机</h3><p>Spring提供了一个接口Exchange，来表示所有不同类型的交换机：</p>
<p><img src="/.https:/img.nonnight.com/img/mts-rabbitMQ/image-20210717165552676.png" alt="Exchange关联类图"></p>
<p>在consumer中创建一个类，声明队列和交换机：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mq.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.FanoutExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明交换机</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Fanout类型交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;itcast.fanout&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第1个队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue1</span><span class="params">(Queue fanoutQueue1, FanoutExchange fanoutExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue1).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第2个队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue2</span><span class="params">(Queue fanoutQueue2, FanoutExchange fanoutExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue2).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="消息发送-2"><a href="#消息发送-2" class="headerlink" title="消息发送"></a>消息发送</h3><p>在publisher服务的SpringAmqpTest类中添加测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFanoutExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 队列名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;itcast.fanout&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, everyone!&quot;</span>;</span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="消息接收-2"><a href="#消息接收-2" class="headerlink" title="消息接收"></a>消息接收</h3><p>在consumer服务的SpringRabbitListener中添加两个方法，作为消费者：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanout.queue1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenFanoutQueue1</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到Fanout消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanout.queue2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenFanoutQueue2</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2接收到Fanout消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>交换机的作用是什么？</p>
<ul>
<li>接收publisher发送的消息</li>
<li>将消息按照规则路由到与之绑定的队列</li>
<li>不能缓存消息，路由失败，消息丢失</li>
<li>FanoutExchange的会将消息路由到每个绑定的队列</li>
</ul>
<p>声明队列、交换机、绑定关系的Bean是什么？</p>
<ul>
<li>Queue</li>
<li>FanoutExchange</li>
<li>Binding</li>
</ul>
<h2 id="Direct"><a href="#Direct" class="headerlink" title="Direct"></a>Direct</h2><p>在Fanout模式中，一条消息，会被所有订阅的队列都消费。但是，在某些场景下，我们希望不同的消息被不同的队列消费。这时就要用到Direct类型的Exchange。</p>
<p><img src="/.https:/img.nonnight.com/img/mts-rabbitMQ/image-20210717170041447.png" alt="Direct模型图"></p>
<p> 在Direct模型下：</p>
<ul>
<li>队列与交换机的绑定，不能是任意绑定了，而是要指定一个<code>RoutingKey</code>（路由key）</li>
<li>消息的发送方在 向 Exchange发送消息时，也必须指定消息的 <code>RoutingKey</code>。</li>
<li>Exchange不再把消息交给每一个绑定的队列，而是根据消息的<code>Routing Key</code>进行判断，只有队列的<code>Routingkey</code>与消息的 <code>Routing key</code>完全一致，才会接收到消息</li>
</ul>
<p><strong>案例需求如下</strong>：</p>
<ol>
<li><p>利用@RabbitListener声明Exchange、Queue、RoutingKey</p>
</li>
<li><p>在consumer服务中，编写两个消费者方法，分别监听direct.queue1和direct.queue2</p>
</li>
<li><p>在publisher中编写测试方法，向itcast. direct发送消息</p>
</li>
</ol>
<p><img src="/.https:/img.nonnight.com/img/mts-rabbitMQ/image-20210717170223317.png" alt="示例模型"></p>
<h3 id="基于注解声明队列和交换机"><a href="#基于注解声明队列和交换机" class="headerlink" title="基于注解声明队列和交换机"></a>基于注解声明队列和交换机</h3><p>基于@Bean的方式声明队列和交换机比较麻烦，Spring还提供了基于注解方式来声明。</p>
<p>在consumer的SpringRabbitListener中添加两个消费者，同时基于注解来声明队列和交换机：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;direct.queue1&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;itcast.direct&quot;, type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">    key = &#123;&quot;red&quot;, &quot;blue&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue1</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到direct.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;direct.queue2&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;itcast.direct&quot;, type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">    key = &#123;&quot;red&quot;, &quot;yellow&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue2</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到direct.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="消息发送-3"><a href="#消息发送-3" class="headerlink" title="消息发送"></a>消息发送</h3><p>在publisher服务的SpringAmqpTest类中添加测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendDirectExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;itcast.direct&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;红色警报！日本乱排核废水，导致海洋生物变异，惊现哥斯拉！&quot;</span>;</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;red&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><p>描述下Direct交换机与Fanout交换机的差异？</p>
<ul>
<li>Fanout交换机将消息路由给每一个与之绑定的队列</li>
<li>Direct交换机根据RoutingKey判断路由给哪个队列</li>
<li>如果多个队列具有相同的RoutingKey，则与Fanout功能类似</li>
</ul>
<p>基于@RabbitListener注解声明队列和交换机有哪些常见注解？</p>
<ul>
<li>@Queue</li>
<li>@Exchange</li>
</ul>
<h2 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p><code>Topic</code>类型的<code>Exchange</code>与<code>Direct</code>相比，都是可以根据<code>RoutingKey</code>把消息路由到不同的队列。只不过<code>Topic</code>类型<code>Exchange</code>可以让队列在绑定<code>Routing key</code> 的时候使用通配符！</p>
<p><code>Routingkey</code> 一般都是有一个或多个单词组成，多个单词之间以”.”分割，例如： <code>item.insert</code></p>
<p> 通配符规则：</p>
<p><code>#</code>：匹配一个或多个词</p>
<p><code>*</code>：匹配不多不少恰好1个词</p>
<p>举例：</p>
<p><code>item.#</code>：能够匹配<code>item.spu.insert</code> 或者 <code>item.spu</code></p>
<p><code>item.*</code>：只能匹配<code>item.spu</code></p>
<p>图示：</p>
<p> <img src="/.https:/img.nonnight.com/img/mts-rabbitMQ/image-20210717170705380.png" alt="Topic模型"></p>
<p>解释：</p>
<ul>
<li>Queue1：绑定的是<code>china.#</code> ，因此凡是以 <code>china.</code>开头的<code>routing key</code> 都会被匹配到。包括china.news和china.weather</li>
<li>Queue2：绑定的是<code>#.news</code> ，因此凡是以 <code>.news</code>结尾的 <code>routing key</code> 都会被匹配。包括china.news和japan.news</li>
</ul>
<p>案例需求：</p>
<p>实现思路如下：</p>
<ol>
<li><p>并利用@RabbitListener声明Exchange、Queue、RoutingKey</p>
</li>
<li><p>在consumer服务中，编写两个消费者方法，分别监听topic.queue1和topic.queue2</p>
</li>
<li><p>在publisher中编写测试方法，向itcast. topic发送消息</p>
</li>
</ol>
<p><img src="/.https:/img.nonnight.com/img/mts-rabbitMQ/image-20210717170829229.png" alt="示例模型"></p>
<h3 id="消息发送-4"><a href="#消息发送-4" class="headerlink" title="消息发送"></a>消息发送</h3><p>在publisher服务的SpringAmqpTest类中添加测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * topicExchange</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendTopicExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;itcast.topic&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;喜报！孙悟空大战哥斯拉，胜!&quot;</span>;</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;china.news&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="消息接收-3"><a href="#消息接收-3" class="headerlink" title="消息接收"></a>消息接收</h3><p>在consumer服务的SpringRabbitListener中添加方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;topic.queue1&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;itcast.topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">    key = &quot;china.#&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue1</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到topic.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;topic.queue2&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;itcast.topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">    key = &quot;#.news&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue2</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到topic.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h3><p>描述下Direct交换机与Topic交换机的差异？</p>
<ul>
<li>Topic交换机接收的消息RoutingKey必须是多个单词，以 <code>**.**</code> 分割</li>
<li>Topic交换机与队列绑定时的bindingKey可以指定通配符</li>
<li><code>#</code>：代表0个或多个词</li>
<li><code>*</code>：代表1个词</li>
</ul>
<h2 id="消息转换器"><a href="#消息转换器" class="headerlink" title="消息转换器"></a>消息转换器</h2><p>之前说过，Spring会把你发送的消息序列化为字节发送给MQ，接收消息的时候，还会把字节反序列化为Java对象。</p>
<p><img src="/.https:/img.nonnight.com/img/mts-rabbitMQ/image-20200525170410401.png" alt="示例代码"></p>
<p>只不过，默认情况下Spring采用的序列化方式是JDK序列化。众所周知，JDK序列化存在下列问题：</p>
<ul>
<li>数据体积过大</li>
<li>有安全漏洞</li>
<li>可读性差</li>
</ul>
<p>我们来测试一下。</p>
<h3 id="3-7-1-测试默认转换器"><a href="#3-7-1-测试默认转换器" class="headerlink" title="3.7.1.测试默认转换器"></a>3.7.1.测试默认转换器</h3><p>我们修改消息发送的代码，发送一个Map对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMap</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 准备消息</span></span><br><span class="line">    Map&lt;String,Object&gt; msg = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    msg.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">    msg.put(<span class="string">&quot;age&quot;</span>, <span class="number">21</span>);</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;simple.queue&quot;</span>,<span class="string">&quot;&quot;</span>, msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>停止consumer服务</p>
<p>发送消息后查看控制台：</p>
<p><img src="/.https:/img.nonnight.com/img/mts-rabbitMQ/image-20210422232835363.png" alt="控制台内容"></p>
<h3 id="配置JSON转换器"><a href="#配置JSON转换器" class="headerlink" title="配置JSON转换器"></a>配置JSON转换器</h3><p>显然，JDK序列化方式并不合适。我们希望消息体的体积更小、可读性更高，因此可以使用JSON方式来做序列化和反序列化。</p>
<p>在publisher和consumer两个服务中都引入依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置消息转换器。</p>
<p>在启动类中添加一个Bean即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MessageConverter <span class="title function_">jsonMessageConverter</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h1><blockquote>
<p>文件数据:<br>链接：<a href="https://pan.baidu.com/s/1jrFwpKD3RCPAEPNPnszYnw">https://pan.baidu.com/s/1jrFwpKD3RCPAEPNPnszYnw</a><br>提取码：tnn8</p>
<p><a href="https://www.bilibili.com/read/cv9965357/">https://www.bilibili.com/read/cv9965357/</a> 黑马程序员</p>
</blockquote>
]]></content>
      <tags>
        <tag>学习记录</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>想起你的声音-分析角色（3-3）</title>
    <url>/%E7%9F%A5%E5%A3%B0%E9%85%8D%E9%9F%B3/think-of-voice/think-of-voice-analyzing-roles-3-3.html</url>
    <content><![CDATA[<h3 id="一：弄清楚角色行动发展线索"><a href="#一：弄清楚角色行动发展线索" class="headerlink" title="一：弄清楚角色行动发展线索"></a>一：弄清楚角色行动发展线索</h3><blockquote>
<p>先找出在剧本中一个单位，有的有可能是情节发展上的一个重要<br>环节，有的则是一个事件发展的整个过程。<br>而且在每个单位中都存在着角色相互之间的行动，因此在找出一<br>个又一个相互连接的单位之后，再从每一个单位中找到角色的主<br>要行动。</p>
</blockquote>
<h3 id="二：把握角色的贯穿行动与最高行动"><a href="#二：把握角色的贯穿行动与最高行动" class="headerlink" title="二：把握角色的贯穿行动与最高行动"></a>二：把握角色的贯穿行动与最高行动</h3><h3 id="三：探求角色的内外部性格特征"><a href="#三：探求角色的内外部性格特征" class="headerlink" title="三：探求角色的内外部性格特征"></a>三：探求角色的内外部性格特征</h3><ol>
<li>找出与角色过去的经历有关的<br>事实，从这些事实中去发现角色<br>性格形成的原因。（人物小传）</li>
</ol>
<blockquote>
<p>家庭情况<br>教育情况<br>职业或者生活方式<br>个性特点<br>主要兴趣</p>
</blockquote>
<ol start="2">
<li>在剧本中找出角色是怎么评价<br>自己的，其他角色又是怎么评价<br>自己的</li>
</ol>
<h3 id="四：搞清楚人物之间的关系"><a href="#四：搞清楚人物之间的关系" class="headerlink" title="四：搞清楚人物之间的关系"></a>四：搞清楚人物之间的关系</h3><ol>
<li>先从剧本中找到自己所有扮演角色的与其他角色之间是什么样的最基本的事实关系</li>
<li>角色之间心理上的态度构成的相互关系</li>
<li>角色之间的关系是在变化发展的</li>
</ol>
<h3 id="五：认清角色在剧本中的地位与作用"><a href="#五：认清角色在剧本中的地位与作用" class="headerlink" title="五：认清角色在剧本中的地位与作用"></a>五：认清角色在剧本中的地位与作用</h3><ol>
<li>角色本身在表现总的主题上所起的作用，或者说在剧本中的思想意义与地位。</li>
<li>角色在剧本创作与结构上的作用。（是推动剧本行动发展？还是为了说明环境与补充说明人物与人物关系的情节的任务）</li>
<li>根据剧本的矛盾冲突以及人物是否体现着贯穿剧情发展的 ，确定角色在一个剧本的形象系统中是属于哪一个阵营。</li>
<li>角色在剧本的戏剧情节发展中是基本人物？还是辅助人物？是贯穿人物？还是段落性人物？或者是穿插性人物？</li>
</ol>
]]></content>
      <categories>
        <category>知声配音</category>
      </categories>
      <tags>
        <tag>苔花小米</tag>
        <tag>声音优化</tag>
      </tags>
  </entry>
  <entry>
    <title>想起你的声音-有声书旁白</title>
    <url>/%E7%9F%A5%E5%A3%B0%E9%85%8D%E9%9F%B3/think-of-voice/think-of-voice-audiobook-prepare-draft.html</url>
    <content><![CDATA[<h3 id="分析人称"><a href="#分析人称" class="headerlink" title="分析人称"></a>分析人称</h3><ul>
<li>学习目标：<ol>
<li>了解什么是人称</li>
<li>分清不同人物</li>
<li>找到不同人称录制特点</li>
</ol>
</li>
<li>录制特点：<ol>
<li>第一人称：<ol>
<li>主角是<strong>我</strong></li>
<li>旁白是主角内心话（主观大于客观）</li>
<li>旁白要带入主角性格</li>
</ol>
</li>
<li>第三人称：<ol>
<li>主角不是<strong>我</strong></li>
<li>旁白是上帝视角（客观大于主观）</li>
<li>旁白要随人物视角转换情感</li>
</ol>
</li>
</ol>
</li>
</ul>
<h3 id="名确目的"><a href="#名确目的" class="headerlink" title="名确目的"></a>名确目的</h3><ul>
<li>学习目标<ol>
<li>明白塑造人物、渲染气氛、推动情节的意思</li>
<li>能够分辨并利用所学知识将其表达清楚</li>
</ol>
</li>
<li>如何分辨<ul>
<li>人物：对人物的概括，描述人物心理、行为</li>
<li>气氛：描写声音、画面、景物</li>
<li>剧情：事情出现变化，人-情绪-事务突发变化</li>
</ul>
</li>
</ul>
<h3 id="联系背景"><a href="#联系背景" class="headerlink" title="联系背景"></a>联系背景</h3><ul>
<li>学习目的<ol>
<li>学会辨别人物及故事的发生背景</li>
<li>明确故事的发生背景（时代&#x2F;世界观）</li>
<li>明确人物的人生经历（心理&#x2F;行为）</li>
</ol>
</li>
<li>学习要点<ul>
<li>故事：时间线–时代， 专有名词-世界观</li>
<li>人物：言行举止 -&gt; 什么样的人 -&gt; 做事风格</li>
</ul>
</li>
</ul>
<h3 id="分析文本"><a href="#分析文本" class="headerlink" title="分析文本"></a>分析文本</h3><ul>
<li>突出重点<ol>
<li>明确段落目的</li>
<li>挑出段落重点<ul>
<li>人物：身份？性格？形象？（核心）</li>
<li>氛围：推动剧情？埋下伏笔？</li>
<li>剧情：一件什么事儿 → 反推回人物</li>
</ul>
</li>
<li>用所学知识表达</li>
</ol>
</li>
<li>确定基调<ol>
<li>确定文章整体是什么题材</li>
<li>找出该段文字中的所要表达的情绪</li>
</ol>
</li>
</ul>
<h3 id="话出有因"><a href="#话出有因" class="headerlink" title="话出有因"></a>话出有因</h3><ul>
<li><p>强调有因</p>
<blockquote>
<p>他快步上前<strong>猛的一踹</strong>！只见，本来<strong>鼓鼓的</strong>肚皮一下子被他踹的<strong>凹了进去</strong>。他一转头，一把大刀迎面朝他<strong>劈了过来</strong>，他<strong>一闪腰身</strong>，<strong>脚步一撤</strong>，<br>躲过劈砍的同时<strong>抡起铁锅</strong>朝着对方后 脑<strong>猛的一砸</strong>！这<strong>十成十</strong>的力气顿时将对方<strong>砸了个晕头转向</strong>，倒地不起了</p>
</blockquote>
</li>
<li><p>停连有因</p>
<blockquote>
<p>小婕刚要敲门，就听见 <strong>|</strong> 屋 子里传来了一阵 <strong>|</strong> 不可描述的娇喊声，她心中一紧。他和男友是异地，本想趁着他过生日， <strong>|</strong> 给他一个惊喜，谁知却遇到这样一件事。<br>“张扬你给我出来！”她已经到了崩溃的边缘，她不敢相信， <strong>|</strong> 自己的男朋友， <strong>|</strong> 居然会做出这样的事。突然，楼道对面的一扇门打开了，“小婕？你怎么来？你站那干什么？那是按摩店。”</p>
</blockquote>
</li>
<li><p>语调有因 ​</p>
<blockquote>
<p>我一开门，顿时一股<strong>阴风</strong>铺面而来，明明 是 夏天，却让我感觉<strong>阵阵发抖</strong>。我<strong>探出身子</strong> 往里 一看，只见，一只<strong>发亮的眼睛</strong>正在<strong>死死地 盯着 我</strong>，<br>我心里””一惊””，心想这里果然<strong>不干净</strong>， 转身 就要出去，却听到一阵“爸爸的爸爸叫爷 爷，爸爸的妈妈叫奶奶”我再定睛<strong>细看</strong>，不知 道哪个缺德的在屋子里放了一个<strong>儿童摇摇乐</strong>！</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>知声配音</category>
      </categories>
      <tags>
        <tag>苔花小米</tag>
        <tag>声音优化</tag>
      </tags>
  </entry>
  <entry>
    <title>想起你的声音-角色音</title>
    <url>/%E7%9F%A5%E5%A3%B0%E9%85%8D%E9%9F%B3/think-of-voice/think-of-voice-character-voice.html</url>
    <content><![CDATA[<h3 id="有声书的角色音"><a href="#有声书的角色音" class="headerlink" title="有声书的角色音"></a>有声书的角色音</h3><ul>
<li>角色音：就是有声小说中，除旁白以外所有需要演播的内容。</li>
<li>角色配音的构成：口齿清晰+戏感+声线</li>
</ul>
<h3 id="如何提高戏感"><a href="#如何提高戏感" class="headerlink" title="如何提高戏感"></a>如何提高戏感</h3><blockquote>
<p>每句台词读之前问问自己：​<br>1.我是谁？​<br>2.我对谁说话？​<br>3.我在什么情况下对他说话？</p>
</blockquote>
<ol>
<li>明确对话对象<ul>
<li>人数<ul>
<li>多人：声音放出去</li>
<li>单人：声音收回来​</li>
</ul>
</li>
<li>身份<ul>
<li>上级：说话有忌讳​</li>
<li>下级：说话有底气</li>
</ul>
</li>
</ul>
</li>
<li>明确对话环境<ul>
<li>空间<ul>
<li>空间距离远：放出去</li>
<li>空间距离近：收回来</li>
</ul>
</li>
<li>气氛 <ul>
<li>氛围轻松：语气自然</li>
<li>氛围紧张：语气谨慎</li>
</ul>
</li>
</ul>
</li>
<li>明确对话状态​<ul>
<li>生理​<ul>
<li>身体舒服：语气自然</li>
<li>身体不舒服：语气虚弱​</li>
</ul>
</li>
<li>心理​<ul>
<li>开心：语气自然</li>
<li>不开心：语气随情绪</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="在生活中练戏感"><a href="#在生活中练戏感" class="headerlink" title="在生活中练戏感"></a>在生活中练戏感</h3><p>观察+模仿+类比</p>
]]></content>
      <categories>
        <category>知声配音</category>
      </categories>
      <tags>
        <tag>苔花小米</tag>
        <tag>声音优化</tag>
      </tags>
  </entry>
  <entry>
    <title>想起你的声音-语气的色彩和语言的节奏（2-3）</title>
    <url>/%E7%9F%A5%E5%A3%B0%E9%85%8D%E9%9F%B3/think-of-voice/think-of-voice-color-of-tone-and-rhythm-of-speech-2-3.html</url>
    <content><![CDATA[<h3 id="语气的色彩"><a href="#语气的色彩" class="headerlink" title="语气的色彩"></a>语气的色彩</h3><ul>
<li>喜庆欢乐的色彩（红色）<blockquote>
<p>昨日清晨，在嘹亮的国歌声中，拉萨&#x2F;隆重举行升国旗仪式。<br>一面鲜艳的五行红旗&#x2F;在布达拉宫广场上&#x2F;冉冉升起，<br>成为新年里&#x2F;雪域高原上&#x2F;最为激动人心的景观</p>
</blockquote>
</li>
<li>亲切柔和的色彩（粉色）<blockquote>
<p>朋友，你到过天山吗？天山是我们祖国西北边疆的一条大山脉，<br>连绵几千里，横亘准噶尔盆地和塔里木盆地之间，把广阔的新疆分成南北两半。</p>
</blockquote>
</li>
<li>怒的色彩（火红、黑）<blockquote>
<p>”你这泼猴，一天之内打死三条人命，<br>还说是妖精！真是一错再错，不知悔改！“</p>
</blockquote>
</li>
<li>坚定、昂扬的色彩（深蓝色）<blockquote>
<p>”来吧，让我们同心协力，一起前进。“</p>
</blockquote>
</li>
<li>深情怀念的色彩（灰色）（表情+气息弱控制）<blockquote>
<p>人们臂上都缠着黑纱，胸前都佩着白花，<br>眼睛都望着周总理的灵车将要开来的方向。</p>
</blockquote>
</li>
</ul>
<h3 id="语言的节奏"><a href="#语言的节奏" class="headerlink" title="语言的节奏"></a>语言的节奏</h3><ul>
<li>节奏的类型：<ol>
<li>高亢型-海燕，没有你，我可怎么活呀！</li>
<li>低沉型-忧愁又寂寥的雨巷</li>
<li>紧张型-司机紧急刹车</li>
<li>舒缓型-朋友，你到过天山吗？</li>
<li>轻快型-小草偷偷地从土里钻出来</li>
<li>凝重型-周总理</li>
</ol>
</li>
<li>练习<blockquote>
<pre><code>               《麻雀》
</code></pre>
<p>我打猎回来，走在林荫路上。猎狗跑在我的前面。<br>突然，我的猎狗放慢脚步，悄悄地向前走，好像嗅到了前面有什么野物。</p>
<p>风猛烈地摇撼着路旁的白桦树。我顺着林荫路望去，看见一只小麻雀呆呆地站在地上，无可奈何地拍打着小翅膀。<br>它嘴角嫩黄，头上长着绒毛，分明是刚出生不久，从巢里掉下来的。</p>
<p>猎狗慢慢地走近小麻雀，嗅了嗅，张开大嘴，露出锋利的牙齿。突然，一只老麻雀从一棵树上飞下来，像一块石头似的落在猎狗面前。<br>它扎煞起全身的羽毛，绝望地尖叫着。老麻雀用自己的身躯掩护着小麻雀，想拯救自己的幼儿。</p>
<p>可是因为紧张，它浑身发抖了，发出嘶哑的声音。它呆立着不动，准备着一场搏斗。在它看来，猎狗是个多么庞大的怪物啊！<br>可是它不能安然地站在高高的没有危险的树枝上，一种强大的力量使它飞了下来。</p>
<p>猎狗愣住了，它可能没料到老麻雀会有这么大的勇气，慢慢地，慢慢地向后退。<br>我急忙唤回我的猎狗，带着它走开了。</p>
</blockquote>
<img src="/.https:/img.nonnight.com/img/post-img/think-of-voice-4.jpg" alt="发音器官示意图" title="麻雀朗诵参考"></li>
</ul>
]]></content>
      <categories>
        <category>知声配音</category>
      </categories>
      <tags>
        <tag>苔花小米</tag>
        <tag>声音优化</tag>
      </tags>
  </entry>
  <entry>
    <title>表演的创作素质(3-1)</title>
    <url>/%E7%9F%A5%E5%A3%B0%E9%85%8D%E9%9F%B3/think-of-voice/think-of-voice-creative-qualities-of-performance-3-1.html</url>
    <content><![CDATA[<h3 id="七力四感"><a href="#七力四感" class="headerlink" title="七力四感"></a>七力四感</h3><ul>
<li>说明：心理上，生理上能够适应表演艺术提出的创作任务，和表演艺术所具备的特点。</li>
<li>内容：<ul>
<li><p>七力</p>
<ol>
<li>敏锐又细致的观察力<blockquote>
<p>细致入微的捕捉人物形象的外部特征和了解感受所观察的人物心理特征的能力。</p>
</blockquote>
</li>
<li>积极又稳定的注意力<blockquote>
<p>演员在进行创作的时候必须要积极稳定的合不断持续发展的注意力</p>
</blockquote>
</li>
<li>敏锐又真挚的感受力<blockquote>
<p>感受力是一种能够在艺术的虚构的情景中感受客观事物刺激的能力，<br>非常敏锐的真挚的感受剧情所提供的事件，<br>事实所产生的影响从而引发相应的情绪体验。</p>
</blockquote>
</li>
<li>准确合理的判断与思考力<blockquote>
<p>在虚构的情景中也能像生活中一样，真实的，即兴的去进行思考与判</p>
</blockquote>
</li>
<li>丰富又活跃的想象力</li>
<li>灵敏又细腻的适应力<blockquote>
<p>演员时刻要适应规定情境所给与的刺激，适应表演中对手所给与的而刺激，<br>并通过灵敏细腻的适应去展现人物的思想感情</p>
</blockquote>
</li>
<li>鲜明的形体与语言的表现力<blockquote>
<p>形体：手势，步态，动势<br>台词：音色，语调，语气</p>
</blockquote>
</li>
</ol>
</li>
<li><p>四感</p>
<ol>
<li>真挚的信念与适度的真实感<blockquote>
<p>不能笑场，不能出戏，真听真看真感受</p>
</blockquote>
</li>
<li>善于捕捉人物特征的形象感<blockquote>
<p>性格，外表，生活状态</p>
</blockquote>
</li>
<li>幽默感<blockquote>
<p>喜剧塑造能力</p>
<p>1.巧合与误会<br>2.夸张<br>3.重复<br>4.装傻<br>5.转折</p>
</blockquote>
</li>
<li>节奏感<blockquote>
<p>反铺垫</p>
</blockquote>
</li>
</ol>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>知声配音</category>
      </categories>
      <tags>
        <tag>苔花小米</tag>
        <tag>声音优化</tag>
      </tags>
  </entry>
  <entry>
    <title>想起你的声音-配音行情（3-8）</title>
    <url>/%E7%9F%A5%E5%A3%B0%E9%85%8D%E9%9F%B3/think-of-voice/think-of-voice-dubbing-quote-3-8.html</url>
    <content><![CDATA[<h3 id="影视配音"><a href="#影视配音" class="headerlink" title="影视配音"></a>影视配音</h3><h4 id="表演基础"><a href="#表演基础" class="headerlink" title="表演基础"></a>表演基础</h4><ul>
<li>弄清角色行动发展</li>
<li>把我角色的贯穿行动与最高行动</li>
<li>探寻角色的内外部性格特征</li>
<li>搞清人物之间的关系</li>
<li>认清角色在剧本中的地位与作用</li>
</ul>
<h4 id="译制片"><a href="#译制片" class="headerlink" title="译制片"></a>译制片</h4><ul>
<li>早期译制片特点：东北味、嗓门亮、台词倒背如流</li>
<li>后期译制片特点：夸张、优雅、美声发音</li>
</ul>
<h4 id="TVB配音特点"><a href="#TVB配音特点" class="headerlink" title="TVB配音特点"></a>TVB配音特点</h4><ul>
<li>语气词多（呢、啊、啦、呐）</li>
<li>中英夹杂</li>
<li>语速快</li>
<li>语序不同</li>
</ul>
<h4 id="台式配音特点"><a href="#台式配音特点" class="headerlink" title="台式配音特点"></a>台式配音特点</h4><ul>
<li>再创造空间很大</li>
<li>情绪饱满</li>
<li>没有后鼻音</li>
<li>口型随意</li>
</ul>
<h4 id="大陆配音特点"><a href="#大陆配音特点" class="headerlink" title="大陆配音特点"></a>大陆配音特点</h4><ul>
<li>自然</li>
<li>贴脸</li>
<li>细腻</li>
</ul>
<h4 id="古风配音特点"><a href="#古风配音特点" class="headerlink" title="古风配音特点"></a>古风配音特点</h4><ul>
<li>端正</li>
<li>韵白多</li>
<li>典雅</li>
</ul>
<h3 id="动漫配音"><a href="#动漫配音" class="headerlink" title="动漫配音"></a>动漫配音</h3><ul>
<li><p>准备</p>
<ul>
<li>先了解剧情以及台词</li>
</ul>
<ol>
<li>我们可以先看看剧情主要情节，</li>
<li>观察了解这段“戏”的主要冲突点，</li>
<li>以及这段戏的基础情绪基调</li>
</ol>
<ul>
<li>聚焦人物</li>
</ul>
<ol>
<li>我们需要分析人物性格，情绪，态度等等细节。</li>
<li>给我们所配音的人物赋予“灵魂”</li>
</ol>
<ul>
<li>观察人物动作</li>
</ul>
<ol>
<li>我们可以先看看人物在剧情中有哪些动作，</li>
<li>然后，根据动作幅度给出相应的力度的台词，情绪，或者气声。</li>
</ol>
<ul>
<li>根据口型写<strong>配音稿</strong></li>
</ul>
<ol>
<li>口型开合次数要与台词字数一致，</li>
<li>加上气声，并且备注气声的要求（例如情绪、力度、长度等等），</li>
<li>情绪明显转折的地方也要备注，</li>
<li>笑声、哭声等没有台词的全部算作气声</li>
</ol>
</li>
</ul>
<h3 id="游戏配音"><a href="#游戏配音" class="headerlink" title="游戏配音"></a>游戏配音</h3><ul>
<li></li>
</ul>
<p>未完待续。。。</p>
]]></content>
      <categories>
        <category>知声配音</category>
      </categories>
      <tags>
        <tag>苔花小米</tag>
        <tag>声音优化</tag>
      </tags>
  </entry>
  <entry>
    <title>想起你的声音-情绪三关与表演训练（3-6）</title>
    <url>/%E7%9F%A5%E5%A3%B0%E9%85%8D%E9%9F%B3/think-of-voice/think-of-voice-emotion-and-acting-training-3-6.html</url>
    <content><![CDATA[<h2 id="情绪三关"><a href="#情绪三关" class="headerlink" title="情绪三关"></a>情绪三关</h2><h3 id="情绪和情感的区别"><a href="#情绪和情感的区别" class="headerlink" title="情绪和情感的区别"></a>情绪和情感的区别</h3><ul>
<li>情感：人们对事物的一种态度，比较稳定（爱国，爱子女，憎恨敌人，厌恶变态等）</li>
<li>情绪：人们由于接受外部客观世界的影响和刺激而产生的具体态度（愤怒，恐惧，高兴，悲伤等）</li>
</ul>
<h3 id="情绪与情感在表演中的关系"><a href="#情绪与情感在表演中的关系" class="headerlink" title="情绪与情感在表演中的关系"></a>情绪与情感在表演中的关系</h3><ol>
<li>演员对角色创造是情感与情绪体验的并存状态</li>
<li>演员在体现角色时，并不是直接的去表演角色的情感，角色的情感只能通过角色具体的情景的情绪体验才能够最终被展示出来</li>
</ol>
<h3 id="情绪的精准表达"><a href="#情绪的精准表达" class="headerlink" title="情绪的精准表达"></a>情绪的精准表达</h3><ol>
<li>情绪的极致爆发</li>
</ol>
<ul>
<li>极喜</li>
<li>极怒</li>
<li>极悲</li>
</ul>
<ol start="2">
<li>情绪的保持和释放</li>
</ol>
<ul>
<li>爱（不要局限爱情）</li>
<li>惧（自身保护系统）</li>
<li>惊（瞬间连接能力很强）</li>
<li>力（自信，身体力量）</li>
<li>厌（讨厌，厌恶）</li>
<li>喜（最难想起）</li>
<li>悲（人类最容易唤起）</li>
<li>怒（生气）</li>
</ul>
<ol start="3">
<li>情绪信念感对抗（不同情绪状态）</li>
</ol>
<blockquote>
<p>除夕到，放鞭炮，家家户户好热闹；舞龙灯，踩高跷，合家欢乐步步高！眼看大家初一快来到，<br>人人开心齐欢笑，提前祝你春节好！</p>
</blockquote>
<h2 id="表演训练"><a href="#表演训练" class="headerlink" title="表演训练"></a>表演训练</h2><h3 id="基本功练习"><a href="#基本功练习" class="headerlink" title="基本功练习"></a>基本功练习</h3><ul>
<li>气息（要求1分钟稳定嘶音）</li>
<li>嘿哈（声音清晰不散，具有穿透力）</li>
<li>打嘟（持久且稳定）</li>
<li>普通话（音调与发音准确）</li>
</ul>
<h3 id="解放天性-注重七力四感"><a href="#解放天性-注重七力四感" class="headerlink" title="解放天性(注重七力四感)"></a>解放天性(注重七力四感)</h3><ul>
<li>七力四感</li>
</ul>
<blockquote>
<p>看图片中的不同的门，想象自己是门里或者门外的人，开始对话，尽量塑造人物情绪，性格，身份等（注重彼此关系）</p>
</blockquote>
<ul>
<li>气声</li>
</ul>
<blockquote>
<p>看图片中场景开始展开想象<br><img src="/.https:/img.nonnight.com/img/post-img/think-of-voice-5.png" alt="吃烫的场景"><br><img src="/.https:/img.nonnight.com/img/post-img/think-of-voice-6.png" alt="吃酸的场景"></p>
</blockquote>
<h3 id="性格化练习"><a href="#性格化练习" class="headerlink" title="性格化练习"></a>性格化练习</h3><ul>
<li>长时间的大笑</li>
<li>不敢和不能出声的笑</li>
<li>痛苦的笑（有规定情境）</li>
<li>大哭</li>
<li>无声的痛苦</li>
<li>大声的抽泣</li>
<li>高兴的哭（有规定情境）</li>
</ul>
]]></content>
      <categories>
        <category>知声配音</category>
      </categories>
      <tags>
        <tag>苔花小米</tag>
        <tag>声音优化</tag>
      </tags>
  </entry>
  <entry>
    <title>想起你的声音-附录一</title>
    <url>/%E7%9F%A5%E5%A3%B0%E9%85%8D%E9%9F%B3/think-of-voice/think-of-voice-extra1.html</url>
    <content><![CDATA[<h4 id="为什么会挤桑"><a href="#为什么会挤桑" class="headerlink" title="为什么会挤桑"></a>为什么会挤桑</h4><ol>
<li>高音喉咙用力太多</li>
<li>气不顺畅、声音抖</li>
<li>声音位置没找对</li>
</ol>
<h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><ol>
<li>气息、丹田、腹式</li>
</ol>
<ul>
<li>气息本质就是气流（吸气与呼气）<ul>
<li>吸气-&gt;换气</li>
<li><strong>呼气</strong>-&gt;发声</li>
</ul>
</li>
<li><strong>防止漏气</strong>（出气均匀）<ul>
<li>声音实了之后可以体会到真正的声音</li>
<li>气息支撑（呼气和发声不协调）<ul>
<li>屏气时肺部向下倾向</li>
<li>发“鞥”，尽量拖长（哼鸣练习）</li>
</ul>
</li>
</ul>
</li>
</ul>
<ol start="2">
<li>音色</li>
</ol>
<ul>
<li>鼻音重<ul>
<li>口腔打开（高音）<ul>
<li>普通话练习</li>
</ul>
</li>
</ul>
</li>
</ul>
<ol start="3">
<li>高音</li>
</ol>
<ul>
<li>找好<strong>支撑</strong>（声带闭合）<ul>
<li><strong>声带拉长</strong>（声音变薄、变细）<ul>
<li>轻轻的说话（哼~哎呀）</li>
</ul>
</li>
</ul>
</li>
</ul>
<ol start="4">
<li>系统学习 + 扎实基础</li>
</ol>
<ul>
<li>怎么学？产生效果?</li>
<li>方法：减少理解时间</li>
<li>体系&#x2F;模式：</li>
<li>1v1：</li>
</ul>
]]></content>
      <categories>
        <category>知声配音</category>
      </categories>
      <tags>
        <tag>唱歌试听课</tag>
      </tags>
  </entry>
  <entry>
    <title>想起你的声音-附录二</title>
    <url>/%E7%9F%A5%E5%A3%B0%E9%85%8D%E9%9F%B3/think-of-voice/think-of-voice-extra2.html</url>
    <content><![CDATA[<h4 id="声音练习"><a href="#声音练习" class="headerlink" title="声音练习"></a>声音练习</h4><ol>
<li>口部操（唇舌力度）</li>
<li>气息（对气息的控制能力）</li>
</ol>
<h4 id="胸腹式联合呼吸法"><a href="#胸腹式联合呼吸法" class="headerlink" title="胸腹式联合呼吸法"></a>胸腹式联合呼吸法</h4><ol>
<li>丹田-肚脐下三寸</li>
</ol>
<ul>
<li>嘿哈（声音结实）</li>
</ul>
<h4 id="配音的戏感来源"><a href="#配音的戏感来源" class="headerlink" title="配音的戏感来源"></a>配音的戏感来源</h4><ol>
<li>人物个性气质（语音气质）</li>
<li>人物气息状态（）</li>
<li>环境场景</li>
</ol>
<h4 id="百变声线秘籍"><a href="#百变声线秘籍" class="headerlink" title="百变声线秘籍"></a>百变声线秘籍</h4><ol>
<li>三腔共鸣</li>
</ol>
<h4 id="配音实战"><a href="#配音实战" class="headerlink" title="配音实战"></a>配音实战</h4><ol>
<li>有声说特点</li>
</ol>
<ul>
<li>声音自然，贴合生活实际</li>
<li>突出角色特点，紧扣情节</li>
<li>营造画面场景，活灵活现</li>
</ul>
<ol start="2">
<li>创造角色场景</li>
</ol>
<ul>
<li>声音干瘪平凡</li>
<li>声音难听</li>
<li>不连贯</li>
<li>不贴人物</li>
<li>一配音就尴尬</li>
</ul>
]]></content>
      <categories>
        <category>知声配音</category>
      </categories>
      <tags>
        <tag>配音试听课</tag>
      </tags>
  </entry>
  <entry>
    <title>想起你的声音-童话、寓言演播</title>
    <url>/%E7%9F%A5%E5%A3%B0%E9%85%8D%E9%9F%B3/think-of-voice/think-of-voice-fairy-and-fable.html</url>
    <content><![CDATA[<h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><ul>
<li>寓言：一种文学体裁，手法多用劝诫或讽刺。以小见大，将深刻道理溶于简单的故事当中。</li>
<li>童话：一种儿童类文学体裁，通过丰富的想象、幻想和夸张的手法来描绘生活现状。通常故事中情节曲折多变，道理浅显易懂，较多的拟人化手法使儿童易于接受</li>
</ul>
<h3 id="配音技巧"><a href="#配音技巧" class="headerlink" title="配音技巧"></a>配音技巧</h3><ul>
<li>形象风格把握<ul>
<li>对于作品里的角色的形象要理解准确。</li>
<li>不同角色的音色、气息、语速快慢、咬字松紧</li>
<li>气质的把握（神似而非声似）</li>
</ul>
</li>
<li>丰富的想象<ul>
<li>善于运用丰富的想象并且充分感受</li>
<li>方位性的描写：<ul>
<li>大海的旁边有座高山，山顶上住着狮子、山腰里住着大象、山脚下住着小兔子</li>
</ul>
</li>
<li>狭义的环境描写：<ul>
<li>黑暗的森林里有一只凶猛的老虎（如何在危险和恐怖上读出区别）</li>
</ul>
</li>
</ul>
</li>
<li>童话配音注意事项：<ul>
<li>语速不能太快，给小朋友反应的时间</li>
<li>用声活泼生动、亲切自然、灵活多变</li>
</ul>
</li>
</ul>
<h3 id="练习内容"><a href="#练习内容" class="headerlink" title="练习内容"></a>练习内容</h3><blockquote>
<p><strong>说葡萄酸的狐狸</strong><br>狐狸发现了一棵葡萄树，树上长满了一串串香甜、<br>美味的葡萄。狐理看看葡萄，忍不住用舌头舔着嘴唇，<br>心想：<br>“哇啊！是好食物哩！” 狐理向上跳了几次，<br>总是够不到，试了好几次还是吃不到。松鼠、兔子及<br>小熊在旁边嗤嗤地窃笑着。<br>〞哼！这些葡萄还很酸，不能吃啊！〞狐狸不认输<br>地说着，然后垂头丧气的回家了。大家都忍不住地捧<br>腹大笑。  </p>
</blockquote>
]]></content>
      <categories>
        <category>知声配音</category>
      </categories>
      <tags>
        <tag>苔花小米</tag>
        <tag>声音优化</tag>
      </tags>
  </entry>
  <entry>
    <title>想起你的声音-初闻</title>
    <url>/%E7%9F%A5%E5%A3%B0%E9%85%8D%E9%9F%B3/think-of-voice/think-of-voice-first-listen.html</url>
    <content><![CDATA[<span id="more"></span>

<h3 id="声音基础知识"><a href="#声音基础知识" class="headerlink" title="声音基础知识"></a>声音基础知识</h3><h4 id="发声器官"><a href="#发声器官" class="headerlink" title="发声器官"></a>发声器官</h4><ul>
<li>动力区<ul>
<li>肺部：通过肺部收缩产生气流</li>
<li>腹部：通过横膈膜下移产生气流</li>
</ul>
</li>
<li>声源区<ul>
<li>声带：通过声带的收缩和放松控制生门的开放程度</li>
</ul>
</li>
<li>调音区<ul>
<li>胸腔:</li>
<li>喉腔：</li>
<li>咽腔：</li>
<li>口腔：</li>
<li>鼻腔：<br><img src="/.https:/img.nonnight.com/img/post-img/think-of-your-voice-1.png" alt="发音器官示意图" title="发音器官示意图"></li>
</ul>
</li>
</ul>
<h4 id="咬字器官"><a href="#咬字器官" class="headerlink" title="咬字器官"></a>咬字器官</h4><ul>
<li>舌头</li>
<li>唇齿</li>
</ul>
<h4 id="声音属性"><a href="#声音属性" class="headerlink" title="声音属性"></a>声音属性</h4><ul>
<li>响度</li>
<li>音调</li>
<li>音色</li>
</ul>
<h4 id="三腔共鸣"><a href="#三腔共鸣" class="headerlink" title="三腔共鸣"></a>三腔共鸣</h4><ul>
<li>胸腔共鸣</li>
<li>口腔共鸣</li>
<li>鼻腔共鸣</li>
</ul>
<h3 id="声音优化练习"><a href="#声音优化练习" class="headerlink" title="声音优化练习"></a>声音优化练习</h3><h4 id="器官练习"><a href="#器官练习" class="headerlink" title="器官练习"></a>器官练习</h4><ul>
<li>目标：提高器官强度，加强器官控制</li>
</ul>
<h4 id="咬字练习"><a href="#咬字练习" class="headerlink" title="咬字练习"></a>咬字练习</h4><ul>
<li>目标：保证发音标准，确保咬字清晰</li>
</ul>
<h4 id="发声练习"><a href="#发声练习" class="headerlink" title="发声练习"></a>发声练习</h4><ul>
<li>目标：掌握情感把控，掌控声音产生，灵活声音变化</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">参考链接：</span><br><span class="line">1. https://mp.weixin.qq.com/s?__biz=MzI1NTYxNDYxMw==&amp;mid=2247488443&amp;idx=1&amp;sn=a85be9c5b9dd222bd140d5341f988902&amp;chksm=ea321841dd45915779b298c0d5379e5f3e38eccd7cec7256f03bfd1ab15c46a074cd9ee5178e&amp;scene=27</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>知声配音</category>
      </categories>
      <tags>
        <tag>苔花小米</tag>
        <tag>声音优化</tag>
      </tags>
  </entry>
  <entry>
    <title>想起你的声音-初见</title>
    <url>/%E7%9F%A5%E5%A3%B0%E9%85%8D%E9%9F%B3/think-of-voice/think-of-voice-first-see.html</url>
    <content><![CDATA[<h3 id="解放天性"><a href="#解放天性" class="headerlink" title="解放天性"></a>解放天性</h3><h4 id="情景感和生活感"><a href="#情景感和生活感" class="headerlink" title="情景感和生活感"></a>情景感和生活感</h4><ul>
<li>情景感：所处环境、所处时间、音乐音效和天气时间<br><img src="/.https:/img.nonnight.com/img/post-img/think-of-voice-2.jpg" alt="情景感" title="情景感"></li>
<li>生活感：所处时代、人物关系、人物状态和文化特征<br><img src="/.https:/img.nonnight.com/img/post-img/think-of-voice-3.png" alt="生活感" title="生活感"></li>
<li>感受方式：观察分析和倾听感受</li>
</ul>
<h4 id="坚定的信念"><a href="#坚定的信念" class="headerlink" title="坚定的信念"></a>坚定的信念</h4><ul>
<li>核心表达：只管台词，不管内容</li>
<li>具体表现：通过对情景和生活进行理解感受后，确定自己以怎样的状态和情绪读词时，不管内容含义多么不应景，都需要以确定的状态和情绪进行配音读词。</li>
</ul>
<h3 id="感受与情绪"><a href="#感受与情绪" class="headerlink" title="感受与情绪"></a>感受与情绪</h3><p>未完待续。。。</p>
]]></content>
      <categories>
        <category>知声配音</category>
      </categories>
      <tags>
        <tag>苔花小米</tag>
        <tag>声音优化</tag>
      </tags>
  </entry>
  <entry>
    <title>想起你的声音-语流音变与变调</title>
    <url>/%E7%9F%A5%E5%A3%B0%E9%85%8D%E9%9F%B3/think-of-voice/think-of-voice-language-flow-and-sound-change.html</url>
    <content><![CDATA[<h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><ul>
<li>语流音变：语流音变是语言流动的结果。人们平时在说话、朗诵、播音等言语活动时，语音并不是一个个孤立地发出，而是连续地发出的。在这连续的语流中，一连串音紧密连接，发音部位和发音方法不断改变，有时难免相互影响，产生明显的变化。这种变化，语音学上叫“语流音变。</li>
<li>语流音变四种形式：<ul>
<li>同化：语流中两个相邻的不同的音，其中一个受到另一个的影响，在某一个或几个特征上变得跟它相同或相近，语音的这种语流中变化就叫同化。根据同化的方向，可以将同化分为顺同化与逆同化，两个相邻的音，后一个受前一个的影响，变得与前一个音相同或相近，称顺同化；两个相邻的音，前一个受后一个的影响，变得与后一个音相同或相近，称逆同化。</li>
<li>异化：两个本来相同或相近的音，其中一个由于某种原因变得跟自己原来的发音不同了，这就是异化。</li>
<li>弱化：两个本来相同或相近的音，其中一个由于某种原因变得跟自己原来的发音不同了，这就是异化。</li>
<li>脱落：语流中有些音在连读时因缩并等原因而不再发音或消失了，这就是脱落，也称减音。</li>
</ul>
</li>
</ul>
<h3 id="上声变调"><a href="#上声变调" class="headerlink" title="上声变调"></a>上声变调</h3><ol>
<li>单念或者在字尾时读 214</li>
<li>上上连读，第一个字变成阳平 35（美好，理想，堡垒）</li>
<li>上声加非上声，前面变成 211（老师，美丽）</li>
<li>在轻声前调值的实值为 211（奶奶、姐姐、椅子、每个、耳朵、马虎）</li>
</ol>
<h3 id="啊的变调"><a href="#啊的变调" class="headerlink" title="啊的变调"></a>啊的变调</h3><ul>
<li>“啊”是一个用来表示语气、增加感情色彩的叹词。它一般用在句头或句尾。</li>
<li>用在句头的时候往往是单独念，不受任何音素的影响，读音是 a。声调可以根据感情的需要发生变化。<ul>
<li>“啊！（ā）真伟大”</li>
<li>“啊？（á）你没听清楚”</li>
<li>“啊（à），怪不得”</li>
</ul>
</li>
<li>如果“啊”用在句尾常跟前面音节末尾的音素连读产生音变<ol>
<li>当前一个音节末尾的音素（有的是韵腹，有的是韵尾）是 a、o、e、ê、i、ǖ 时，“啊”变成“ya”，汉字写成“呀”<ul>
<li>要注意呀！ 真相爱呀！</li>
</ul>
</li>
<li>前一个音节的末尾音素是 u（没有韵尾）或 ao、iao 中的 o 时，“啊”变成“wa”，汉字写成“哇”。<ul>
<li>笑一笑哇！ 真好哇！</li>
</ul>
</li>
<li>前一个音节的末尾音素是 n 时，“啊”变成“na”，汉字写成“啊”<ul>
<li>你看哪！ 大家加油干哪！ 有没有我的信哪！</li>
</ul>
</li>
<li>前一个音节的末尾音素是 ng 时，“啊”变成“nga”，汉字写成“啊”<ul>
<li>大家一起唱啊！ 你怎么不讲啊！</li>
</ul>
</li>
<li>前一个音节的末尾音素是-i 前时，“啊”变成“za”，汉字写成“啊”<ul>
<li>我去过一次啊！ 真自私啊！</li>
</ul>
</li>
<li>前一个音节末尾的音素是-i 后时，“啊”变成“ra”。汉字写成“啊”<ul>
<li>老同志啊！ 真及时啊！</li>
</ul>
</li>
</ol>
</li>
<li>练习：<blockquote>
<p>鸡啊、鸭啊、猫啊、狗啊，一块儿在水里游啊！<br>牛啊、羊啊、马啊、骡啊，一块进鸡窝啊！<br>狼啊、虎啊、熊啊、豹啊，一块儿在街上跑啊！<br>兔啊、鼠啊、虫啊、鸟啊，一块儿上窗台儿啊！</p>
</blockquote>
</li>
</ul>
<h3 id="轻声"><a href="#轻声" class="headerlink" title="轻声"></a>轻声</h3><ul>
<li>轻声：汉语普通话的每个音节都有一定的声调，可是在词或句子里有些音节常常失去原来的声调，变成一种既短又轻的调子，就叫轻声</li>
<li>轻声音节的意义：<ul>
<li>区别意义： 如：老子、老子。厉害、利害。舌头、蛇头。本事（本领）、本事（这件事）东西（方向）、东西（物件儿）。这几组词虽然词性相同，但由于轻声的作用，意义完全不同。</li>
<li>区分词性： 如：“这篇文章的段落<strong>大意</strong>很清楚”“办事情不能太<strong>大意</strong>了”，这两句话中，“大意”这个词，词义不同，词性也不同。“段落大意”的“大意”是名词，“不能太大意”的“大意”是形容词，两句意义完全不同。</li>
</ul>
</li>
<li>新词、科学术语一般没有轻声音节，口语中的常用词才有读轻声音节的。下面几种情况在普通话中读轻声：<ol>
<li>助词“的、地、得、了、过”和语气词“吧、嘛、呢、啊”等等。<ul>
<li>愉快地、站着、算了、好吗?你吃饭了吧、他到哪儿去了呢?看啊 去嘛</li>
</ul>
</li>
<li>叠音词和动词的重叠形式后面的字。<ul>
<li>妈妈、弟弟和叔叔都来了、看看星星、读读小说</li>
</ul>
</li>
<li>名词后缀“子”“头”“们”等等。<ul>
<li>他们 石头 桌子 里头 <strong>有些词不能念轻声：如：原子、电子、中子</strong></li>
</ul>
</li>
<li>用在名词、代词后面表示方位词一般读轻声。<ul>
<li>墙上、屋里、外边、树下、地底下</li>
</ul>
</li>
<li>用在动词、形容词后面表示趋向的来、去、下去等词。<ul>
<li>你走过去把桌上的东西拿下来、进来、脱下来</li>
</ul>
</li>
<li>词和词之间的“一”和“不”<ul>
<li>说一说 听一听 行不行</li>
</ul>
</li>
<li>有一大批常用的双音节词，第二个音节习惯上要读轻声。<ul>
<li>玻璃、先生、歇息、窗户、明白、商量、打听、眼睛、马虎</li>
</ul>
</li>
</ol>
</li>
</ul>
<h3 id="儿化"><a href="#儿化" class="headerlink" title="儿化"></a>儿化</h3><ul>
<li><p>儿化：指一个音节带上卷舌动作，韵母发生音变，成为卷舌韵母（儿化韵）</p>
</li>
<li><p>要点：</p>
<ol>
<li>“儿”指卷舌动作</li>
<li>“化”是说卷舌动作应柔软地融化在前一个音节上</li>
<li>儿化韵听觉上是一个音节</li>
</ol>
</li>
<li><p>儿化的作用：</p>
<ol>
<li><p>区分词性：</p>
<blockquote>
<p>盖（动词）— 盖儿（名词） 截（动词）— 截儿（量词）<br>干（形容词）— 干儿（名词）亮（形容词）— 亮儿（名词）</p>
</blockquote>
</li>
<li><p>区分词义及同音词:</p>
<blockquote>
<p>头（头部）— 头儿（领导） 白面（面粉）— 白面儿（毒品）<br>信（信件）— 信儿（消息） 拉练（部队训练）— 拉链儿（拉锁）</p>
</blockquote>
</li>
<li><p>表示喜爱、亲切或轻蔑、鄙视等感情色彩</p>
<blockquote>
<p>宝贝儿、机灵鬼儿、小偷儿、小丑儿</p>
</blockquote>
</li>
<li><p>表示少或小的意思</p>
<blockquote>
<p>头发丝儿、米粒儿、针尖儿、雨点儿</p>
</blockquote>
</li>
</ol>
</li>
<li><p>儿化韵的音变：</p>
<ol>
<li>头发丝儿、米粒儿、针尖儿、雨点儿<ul>
<li>刀把儿(bar) 人家儿(jiar) 山坡儿(por)</li>
</ul>
</li>
<li>韵尾是 i、n 的，丢掉韵尾，主要元音卷舌<ul>
<li>锅盖儿（gar） 一块儿（kuar） 花篮儿（lar） 笔尖儿（jiar）</li>
</ul>
</li>
<li>韵尾是单元音 i、ǖ 的，主要元音仍由 i、ǖ 充当，在韵母后加 er<ul>
<li>小鸡儿（jier） 玩意儿（yier） 有趣儿（quer）</li>
</ul>
</li>
<li>韵母是-i（前）、-i(后)的，儿化后韵母 -i（前）、-i(后)完全失去，声母直接与 er 相拼<ul>
<li>瓜子儿（zer） 没词儿（cer） 树枝儿（zher）</li>
</ul>
</li>
<li>鼻韵母 in、un、ǖn 儿化后失去 n，加上 er<ul>
<li>听信儿（xier） 没劲儿（jier） 打盹儿（due）</li>
</ul>
</li>
<li>韵尾是 ng 的，韵腹即主要元音带鼻音，发音时口腔鼻腔要同时共鸣，称做“鼻化音”并加上卷舌动作“r”<ul>
<li>体形儿（xir） 小名儿（mir） 帮忙儿（mar） 没声儿（sher）</li>
</ul>
</li>
</ol>
</li>
<li><p>练习：</p>
<blockquote>
<p>进了门儿，倒杯水儿，<br>喝了两口儿运运气儿，顺手拿起小唱本儿，<br>唱了一曲儿又一曲儿，练完嗓子我练嘴皮儿，<br>绕口令儿，练字音儿，<br>还有单弦儿牌子曲儿，小快板儿大鼓词儿，<br>越说越唱我越带劲儿</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>知声配音</category>
      </categories>
      <tags>
        <tag>苔花小米</tag>
        <tag>声音优化</tag>
      </tags>
  </entry>
  <entry>
    <title>想起你的声音-台词(3-4)</title>
    <url>/%E7%9F%A5%E5%A3%B0%E9%85%8D%E9%9F%B3/think-of-voice/think-of-voice-line-3-4.html</url>
    <content><![CDATA[<h3 id="对角色台词的分析与理解"><a href="#对角色台词的分析与理解" class="headerlink" title="对角色台词的分析与理解"></a>对角色台词的分析与理解</h3><ol>
<li><p>独白：内心独白是角色的思维活动过程</p>
<ul>
<li><p>分析语言行动：人物为了达到一定的目的所采取的手段，反映在形体上的叫做形体行动。反映在语言上的就叫做语言行动。</p>
<ul>
<li>方法参考：<blockquote>
<p>A 主题与主题思想<br>B 时代背景、矛盾冲突<br>C 时间与事实<br>D 目的与行动<br><strong>一般是使用行动性动词来表示，不用情绪性动词入手</strong></p>
</blockquote>
</li>
</ul>
</li>
<li><p>潜台词的挖掘：作者没有写出来，但是又最能表达人物的真实含义的叫做潜台词。</p>
<ul>
<li>方法参考：<blockquote>
<p>A 从人物的语言行动上挖掘潜台词<br>B 从人物的最终目的去找潜台词</p>
</blockquote>
</li>
<li>怎么表达：<ul>
<li>节奏</li>
<li>重音</li>
<li>语调</li>
</ul>
</li>
</ul>
</li>
<li><p>内心独白</p>
<blockquote>
<p>人的思维生活里，人的思维活动是不间断进行的，说出的话仅仅是思维活动的<br>一部分。完整的内心独白应该是内心语言和丰富的内心视象构成的。（例如听<br>到车祸脑子里会出现“以后开车要小心点”带有结论似的内心语言。</p>
</blockquote>
<blockquote>
<p>我们绝不要把内心独白理解为仅仅是以独白形式写出来的语言文字，并<br>拿到舞台上去默诵，他应该是角色的行为逻辑，感受，联想有机交织形<br>成的。</p>
</blockquote>
</li>
</ul>
</li>
</ol>
<h3 id="对角色台词的表达与体现"><a href="#对角色台词的表达与体现" class="headerlink" title="对角色台词的表达与体现"></a>对角色台词的表达与体现</h3><ol>
<li><p>台词的衔接（节奏韵律）</p>
<ul>
<li>快接：争辩，高潮，激烈斗争</li>
<li>慢接：故意冷淡，心怀鬼胎，难言之隐</li>
<li>虚接：不做正面回答，换顾左右而言他</li>
<li>实接：交代，对答</li>
<li>高接：一声比一声高，争夺，或者距离较远</li>
<li>低接：耳语，密告</li>
<li>强接：命令要求</li>
<li>弱接：心虚或者体虚，犹豫</li>
</ul>
</li>
<li><p>台词基调（台词性格化）</p>
<ul>
<li>音色塑造</li>
<li>语言色彩</li>
</ul>
</li>
<li><p>气息与情感（表情达意的外部手段）</p>
<ul>
<li>高兴：气吸较浅，快呼快吸，气运动较快</li>
<li>欢乐：气吸较深，横膈膜颤动，快速腹动</li>
<li>愤怒：刹那屏住呼吸，然后大口换气</li>
<li>忧虑: 气慢慢吸，稍停，慢慢呼出</li>
<li>悲哀: 慢慢吸入，快呼</li>
<li>恐惧: 快速吸气，较浅，并屏住呼吸</li>
</ul>
</li>
</ol>
<h3 id="不同体裁风格台词流派的台词处理-以悲剧，戏剧，正剧这三种体裁的剧本台词训练为主"><a href="#不同体裁风格台词流派的台词处理-以悲剧，戏剧，正剧这三种体裁的剧本台词训练为主" class="headerlink" title="不同体裁风格台词流派的台词处理(以悲剧，戏剧，正剧这三种体裁的剧本台词训练为主)"></a>不同体裁风格台词流派的台词处理(以悲剧，戏剧，正剧这三种体裁的剧本台词训练为主)</h3><ol>
<li>风格介绍<br>- 风格：风格是指剧作家的创作个性在其戏剧作品中所表现出来的艺术特色<br>- 正剧：<blockquote>
<p>老舍《茶馆》《龙须沟》对劳动人民同情，浓厚的背景乡土气息<br>曹禺《雷雨》《日出》结构严谨，扣人心弦。</p>
</blockquote>
</li>
</ol>
<pre><code>- 喜剧：
  &gt; 宁财神《武林外传》《龙门镖局》天马行空，古说今话
  &gt; 韦正《爱情公寓》轻松浪漫，时尚气息
</code></pre>
<ol start="2">
<li><p>流派介绍<br>- 流派：流派是“戏剧风格的群体现象。” 是根据一些有共同创作倾向，有共同艺术特色的作家，在一定的历史时期，受一定的社会风尚和艺术风尚的影响（古典主义，现实主义，浪漫主<br>义。。。。。）</p>
</li>
<li><p>悲剧台词处理<br>- 浓烈饱满的激情<br>- 高亢雄浑的声音<br>- 沉稳抒缓的气息<br>- 铿锵有力的吐字<br>- 如诗如画的意境<br>- 节奏起伏的韵律</p>
</li>
<li><p>喜剧台词的处理<br>- 真挚热情的语态<br>- 幽默风趣的语调<br>- 辛辣锋利的语势<br>- 轻松明快的语言节奏<br>- 灵活敏捷的语言交流<br>- 冷热、快慢的语言突变</p>
</li>
<li><p>正剧台词处理<br>- 生活口语<br>- 自然亲切<br>- 真实可信</p>
</li>
</ol>
]]></content>
      <categories>
        <category>知声配音</category>
      </categories>
      <tags>
        <tag>苔花小米</tag>
        <tag>声音优化</tag>
      </tags>
  </entry>
  <entry>
    <title>想起你的声音-普通话测试</title>
    <url>/%E7%9F%A5%E5%A3%B0%E9%85%8D%E9%9F%B3/think-of-voice/think-of-voice-mandarin-test.html</url>
    <content><![CDATA[<h3 id="单音节字"><a href="#单音节字" class="headerlink" title="单音节字"></a>单音节字</h3><pre><code>&gt; 昼（zhou-去）  鸣（ming-阳） 风（feng-阴） 刘（liu-阳） 年（nian-阳） 
&gt; 嫩（nen-去） 晒（shai-去） 晌（shang-上） 剜（wan-阴） 癣（xuan-上）
&gt;
</code></pre>
<h3 id="多音节词"><a href="#多音节词" class="headerlink" title="多音节词"></a>多音节词</h3><pre><code>&gt; 我们（wǒ men） 窗户（chuāng hu） 塑料（sù liào） 炽热（chì rè） 漂亮（piào liang） 
&gt; 港口（gǎng kǒu）  群众（qún zhòng） 应当（yīng dāng） 船舷（chuán xián） 快板儿（kuài bǎnr）
&gt;
</code></pre>
<h3 id="语流音变"><a href="#语流音变" class="headerlink" title="语流音变"></a>语流音变</h3><pre><code>&gt; 谁啊?（ya-呀） /张果老啊!（wa-哇） /怎么不进来啊?（ya-呀） /怕狗咬啊!（wa-哇） /衣兜里兜着什么啊?（ya-呀）/大酸枣啊!（wa-哇）/怎么不吃啊?（ra）/怕牙倒啊!（wa-哇）

&gt; 你别看屋子不大点儿（diǎnr），你别看摆设不起眼儿（yǎnr），这是我家开的百货食杂店儿（diànr）。
&gt;
</code></pre>
<h3 id="绕口令"><a href="#绕口令" class="headerlink" title="绕口令"></a>绕口令</h3><pre><code>&gt; 四十四棵死涩柿子树（sì shí sì kē sǐ sè shì zi shù）

&gt; 刘奶奶爱喝牛奶奶自制的榴莲牛奶（liú nǎi nǎi ài hē niú nǎi nǎi zì zhì de liú lián niú nǎi）
</code></pre>
]]></content>
      <categories>
        <category>知声配音</category>
      </categories>
      <tags>
        <tag>苔花小米</tag>
        <tag>声音优化</tag>
      </tags>
  </entry>
  <entry>
    <title>想起你的声音-普通话</title>
    <url>/%E7%9F%A5%E5%A3%B0%E9%85%8D%E9%9F%B3/think-of-voice/think-of-voice-mandarin.html</url>
    <content><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul>
<li>普通话：普通话（Standard Mandarin&#x2F;Putonghua），是现代标准汉语的另一个称呼，是以北京语音为标准音，以北方官话为基础方言，以典范的现代白话文著作为语法规范的通用语。</li>
<li>声母<table>
  <tr>
    <th ></th>
    <th colspan="4">唇音</th>
    <th colspan="4">舌尖音</th>
    <th colspan="3">舌根音</th>
    <th colspan="3">舌面音</th>
    <th colspan="4">翘舌音</th>
    <th colspan="3">舌齿音</th>
  </tr>
  <tr>
    <td>汉语拼音</td>
    <td>b</td>
    <td>p</td>
    <td>m</td>
    <td>f</td>
    <td>d</td>
    <td>t</td>
    <td>n</td>
    <td>l</td>
    <td>g</td>
    <td>k</td>
    <td>h</td>
    <td>j</td>
    <td>q</td>
    <td>x</td>
    <td>zh</td>
    <td>ch</td>
    <td>sh</td>
    <td>r</td>
    <td>z</td>
    <td>c</td>
    <td>s</td>
  </tr>
</table>

<ul>
<li><p><strong>塞音</strong>：先在口腔中造成阻碍，让气流在阻碍后面积蓄起来，然后除去阻碍，让气流冲出，爆发成声，以这种方式发音的辅音就叫做塞音</p>
</li>
<li><p><strong>清辅音</strong>：发音时声带不震动，气流不受器官阻碍的称为清辅音</p>
</li>
<li><p><strong>送气清辅音</strong>：发音时，声带不振动，同时口腔中有一股气流喷出，形成送气现象。（p）</p>
</li>
<li><p><strong>不送气清辅音</strong>：发音时，声带不振动，气流从口中缓缓流出，而不是喷出。用手放在嘴前方几乎感觉不到气流的流泻。但是这并不意味着发不送气清辅音时真的没有气流流出，只是较缓，不易察觉。(b)</p>
</li>
<li><p><strong>浊辅音</strong>：发音时声带震动气流，受器官阻碍的称为浊辅音。</p>
</li>
<li><p><strong>双唇音</strong>：b、p、m</p>
<ul>
<li>发声方法：<ul>
<li>在发 b 时，双唇闭合，软腭上升，气流因通路被完全封闭而积蓄起来，然后双唇打开，气流脱口而出，爆发成声。声带不振动。</li>
<li>在发 p 的阻碍部位和发音方式与发 b 同，只是在发 p 时，冲出的气流比发 b 时要强许多。</li>
<li>在发 m 时，双唇闭合，封闭气流的口腔通路，软腭下垂，气流从鼻腔泄出，同时振动声带成声。</li>
</ul>
</li>
<li>发音要领：发音时，发音部位的着力点应集中在双唇中央 1&#x2F;3 处，使字音清晰有力度。注意力量应集中在双唇中央,一定不要抿唇、裹唇，以免字音闷暗不清楚。</li>
<li>b：双唇成阻塞音、不送气、清辅音。（百发百中、包罗万象、暴跳如雷、跋山涉水）</li>
<li>p：双唇成阻塞音、送气、清辅音。（旁观者清、跑马观花、披星戴月、平心静气）</li>
<li>m：双唇成阻鼻音、浊辅音。（满面春风、莫名其妙、默默无闻、埋头苦干）</li>
<li>绕口令：<blockquote>
<p>八百标兵奔北坡<br>炮兵并排北边跑<br>炮兵怕把标兵碰<br>标兵怕碰炮兵炮</p>
</blockquote>
</li>
</ul>
</li>
<li><p><strong>唇齿音</strong>：f</p>
<ul>
<li>发声方法：在发 f 时，上齿与下唇相接，软腭上升，让气流从唇齿间的窄缝中泄出，摩擦成声。声带不振动。像这样，在口腔中造成阻碍，但在阻碍中留一窄缝，让气流从这条窄缝中泄出，摩擦成声，以这种方式发音的辅音就叫做擦音。</li>
<li>发音要领：发音时上下唇接触面越小越好，要自然放松地靠在一起。发音时不要使拙劲，只需点到为止，否则杂音很大，字音也就不清楚了。</li>
<li>f:唇齿成阻擦音、清辅音。(发扬光大、翻来覆去、反复无常、飞沙走石)</li>
<li>绕口令：<blockquote>
<p>方辉，黄飞学画凤凰，<br>方辉画了红凤凰、黄凤凰、灰凤凰，<br>黄飞画了粉红凤凰、花凤凰。</p>
</blockquote>
</li>
</ul>
</li>
<li><p><strong>舌尖中音</strong>：d、t、n、l</p>
<ul>
<li>发声方法：<ul>
<li>d:在发 d 时，舌尖抵住上齿龈，软腭上升，气流因通路被完全封闭而积蓄起来，然后舌尖离开上齿龈，气流迸发而出，爆发成声；声带振动。</li>
<li>t:在发 t 的阻碍部位和发音方式与发 d 同，只是在发 t 时，冲出的气流比发 d 时要强许多。</li>
<li>n:在发 n 时，舌尖抵住上齿龈，封闭气流的口腔通路，软腭下垂，气流从鼻腔泄出，同时振动声带成声。</li>
<li>l:在发 L 时，舌尖抵住上齿龈，轻腭上升，然后让气从舌头与两颊内侧的空隙间流出，同时振动声带成声。以这样的方法发音的 l 叫做边音。</li>
</ul>
</li>
<li>发声要领：舌尖可以上翘，抵在上腭的不同部位，着力点要放在舌尖上,造成不同的阻碍。其中，利用舌尖抵在上齿龈这样的阻碍发出的辅音，叫做舌尖中音</li>
<li>d:舌尖中不送气清塞音（大刀阔斧、大功告成、大公无私、大开眼界）</li>
<li>t:舌尖中送气清塞音（谈虎色变、铁证如山、偷天换日、土崩瓦解）</li>
<li>n:舌尖中浊鼻音（南腔北调、南征北战、难分难解、年年有余）</li>
<li>l:舌尖中浊边音（来者不拒、里应外合、两全其美、流言蜚语）</li>
<li>绕口令：<blockquote>
<p>调到敌岛打特盗，<br>特盗太叼投短刀。<br>挡推顶打短刀掉， 　　<br>踏盗得刀盗打倒。</p>
<p>蓝教练是女教练，吕教练是男教练。<br>蓝教练不是男教练，吕教练不是女教练、<br>蓝南是男篮主力，吕楠是女篮主力，<br>吕教练在男篮训练蓝南，蓝教练在女蓝训练吕楠。</p>
</blockquote>
</li>
</ul>
</li>
<li><p><strong>舌根音</strong>：g、k、h</p>
<ul>
<li>发声方法：<ul>
<li>在发 g 时，软腭上升，舌根隆起抵住软腭，气流因通路被完全封闭而积蓄起来，然后舌根下降，脱离软腭，气流迸发而出，爆发成声。声带不振动。</li>
<li>在发 k 的阻碍部位和发音方式与发 g 同，只是在发 k 时，冲出的气流比发 g 时要强许多。</li>
<li>在发 h 时，软腭上升，挡住气流的鼻腔通路，舌根隆起，与软腭之间形成一个窄缝，气流从窄缝中泄出，摩擦成声。声带不振动。</li>
</ul>
</li>
<li>发声要领：利用舌根隆起抵住软腭这样的阻碍发出的辅音。</li>
<li>g:舌根不送气清塞音（甘心情愿、甘拜下风、感人肺腑、高歌猛进）</li>
<li>k:舌根不送气清塞音（开卷有益、开门见山、康庄大道、宽大为怀）</li>
<li>h:舌根清擦音（海枯石烂、海阔天空、海誓山盟、骇人听闻）</li>
<li>绕口令：<blockquote>
<p>哥挎瓜筐过宽沟，<br>赶快过沟看怪狗。<br>光看怪狗瓜筐扣，<br>瓜滚筐空哥怪狗。</p>
</blockquote>
</li>
</ul>
</li>
<li><p><strong>舌面音</strong>：j、q、x</p>
<ul>
<li>发声要领：舌面前部抵住或接近硬腭前部，避免出现尖音，舌面往回收。</li>
<li>发声方法：<ul>
<li>发j音的动作准备，双唇微微打开，让我们的舌尖抵住下齿背，然后舌面前部轻轻向上隆起，贴近硬腭。在发音的同时，记住让气流从舌面和硬腭的窄缝中流出。</li>
<li>发q音动作也是一样的，舌尖也是抵住下齿龈，舌面抬起接近硬腭，让气流从中间挤出成音。但是q音的气流要比j音强一点，成阻摩擦时间也是比较长的，气流用量比较急促。    </li>
<li>发x音动作和口型，与j和q是类似，双唇微微地张开，舌面与上颚进行摩擦，发音的时候，舌尖抵住牙齿，跟舌头轻轻的抬起，让气流从中间挤出成音，气流摩擦是比较轻缓绵长的。</li>
</ul>
</li>
<li>j:(饥寒交迫、积少成多、集思广益、假公济私)</li>
<li>q:(七上八下、其貌不扬、奇耻大辱、取之不尽)</li>
<li>x:(熙熙攘攘、喜出望外、习以为常、先声夺人)</li>
<li>绕口令：<blockquote>
<p>天空飘着一片霞，<br>水上游来一群鸭。<br>霞是五彩霞，<br>鸭是麻花鸭，<br>麻花鸭游进五彩霞，<br>五彩霞网住麻花鸭。<br>分不清是鸭还是霞。</p>
</blockquote>
</li>
</ul>
</li>
<li><p><strong>翘舌音</strong>:zh、ch、sh、r</p>
<ul>
<li>发声要领：利用舌尖与硬腭前部相接，使气流受阻所发出的辅音。</li>
<li>发声方法：<ul>
<li>发zh时，舌尖上翘，抵住硬腭前部，软腭上升，堵塞鼻腔通路，声带不颤动，较弱的气流把舌尖的阻碍冲开一道窄缝，并从中挤出，摩擦成声。</li>
<li>发ch的情况和zh相比，只是气流较强，其余都相同。</li>
<li>发sh时，舌尖上翘，接近硬腭前部，形成窄缝，软腭上升，堵塞鼻腔通路，声带不颤动，气流从舌尖和硬腭前部形成的窄缝中挤出,摩擦成声。</li>
<li>发r的情况和sh相近，只是摩擦比sh弱，同时声带颤动，气流带音</li>
</ul>
</li>
<li>zh: 舌尖后、不送气、清塞擦音（掌上明珠、争先恐后、真知灼见、众所周知）</li>
<li>ch: 舌尖后、送气、清塞擦音（畅所欲言、沉默寡言、长枪短炮、插翅难飞）</li>
<li>sh: 舌尖后、清擦音（深入人心、神采奕奕、双管齐下、神清气爽）</li>
<li>r: 舌尖后、浊擦音（若无其事、若有所思、如愿以偿、忍辱负重）</li>
<li>绕口令：<blockquote>
<p> 知道就是知道，<br> 不知道就是不知道。<br> 不要把知道说成不知道，<br> 也不要把不知道说成知道。</p>
</blockquote>
</li>
</ul>
</li>
<li><p><strong>平舌音（舌尖前音）</strong>：z、c、s</p>
<ul>
<li>发声要领：舌尖平伸抵住或接近上齿背，气流在这一部位受到阻碍后发出的音，成阻面要小，力量要集中，避免舌尖伸到两齿中间变成齿间音。</li>
<li>发声方法：<ul>
<li>在发z时，舌尖抵住上门齿背，软腭上升，气流因通路被完全封闭而积蓄起来。然后舌尖微离上齿背，形成一个窄缝，气流从窄缝中泄出，摩擦成声。声带不振动。</li>
<li>发c的阻碍部位和发音方式与发z同，只是在发c是，冲出的气流比发z时要强许多。</li>
<li>在发s时，舌尖接近上门齿背，形成一个窄缝，软腭上升，气流从窄缝中泄出，摩擦成声。声带不振动。</li>
</ul>
</li>
<li>z:舌尖前、不送气、清塞擦音（责无旁贷、醉生梦死、坐吃山空、再接再厉）</li>
<li>c:舌尖前、送气、清塞擦音（沧海桑田、草木皆兵、惨不忍睹、蹉跎岁月）</li>
<li>s:舌尖前、清擦音（司空见惯、丧心病狂、扫地出门、似是而非）</li>
<li>绕口令：<blockquote>
<p>四十四个字和词，<br>组成一首子词丝的绕口词，<br>桃子，李子，梨子，栗子，<br>橘子，柿子，槟子，榛子，<br>栽满院子，村子和寨子。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li>韵母<ul>
<li>四呼（根据介音分类）：即现代标准汉语的韵母可由上表中七个元音（&#x2F;a&#x2F;、&#x2F;o&#x2F;、&#x2F;ə&#x2F;、&#x2F;e&#x2F;、&#x2F;i&#x2F;、&#x2F;u&#x2F;、&#x2F;y&#x2F;）与两个鼻音韵尾（&#x2F;n&#x2F;、&#x2F;ŋ&#x2F;）组合而成。其中，只有一个元音或者一个元音带一个鼻辅音的情况，该元音称之为韵腹，所带的鼻辅音称为韵尾。两个元音构成的韵母，则是开口度较大的为韵腹，韵腹前的元音称为韵头或者介音，韵腹后的元音称为韵尾。三个元音或者两个元音带一个鼻辅音，则中间的元音是韵腹，第一个元音是韵头，韵腹后的元音或鼻辅音为韵尾。</li>
<li>开口呼：无介音，开头为&#x2F;a&#x2F;、&#x2F;o&#x2F;、&#x2F;ə&#x2F;、&#x2F;e&#x2F;等元音（注音符号：ㄚ、ㄛ、ㄜ、ㄝ，汉语拼音：a、o、e、ê）</li>
<li>齐齿呼：以&#x2F;i&#x2F;作为开头介音（注音符号：ㄧ，汉语拼音：i）</li>
<li>合口呼：以&#x2F;u&#x2F;作为开头介音（注音符号：ㄨ，汉语拼音：u）</li>
<li>撮口呼：以&#x2F;y&#x2F;作为开头介音（注音符号：ㄩ，汉语拼音：ü）</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>知声配音</category>
      </categories>
      <tags>
        <tag>苔花小米</tag>
        <tag>声音优化</tag>
      </tags>
  </entry>
  <entry>
    <title>想起你的声音-备稿（2-1）</title>
    <url>/%E7%9F%A5%E5%A3%B0%E9%85%8D%E9%9F%B3/think-of-voice/think-of-voice-prepare-manuscript-2-1.html</url>
    <content><![CDATA[<h3 id="备稿六步"><a href="#备稿六步" class="headerlink" title="备稿六步"></a>备稿六步</h3><ol>
<li>划分层次<ol>
<li>划分小层次是从“便于听”入手，把自然段化整为零，区分<br> 出语言推进的小层次。</li>
<li>划分小层次既反映着内容发展变化的细致层次，也反映着感<br> 情变化的层次。</li>
<li>划分小层次能够帮助我们把体验到的逻辑感受、形象感受，<br> 通过恰当的停顿和贴切的语气表达出来。</li>
<li>驾驭有声语言的基本单位应在自然段内的小层次上面。</li>
<li>划分小层次，应当划分到不能划分为止。</li>
</ol>
</li>
<li>概括主题</li>
<li>联系背景<ul>
<li>历史背景、写作背景、朗诵背景</li>
</ul>
</li>
<li>明确目的</li>
<li>突出重点</li>
<li>确定基调</li>
</ol>
<h3 id="语气和重音"><a href="#语气和重音" class="headerlink" title="语气和重音"></a>语气和重音</h3><ul>
<li>语气：说话时流露出来的感情色彩情绪—表情！共情能力<ul>
<li>稳一些和高低起伏到底有啥区别<ol>
<li><strong>音量大小</strong>—今天天气真好~</li>
<li>表情&#x3D;情绪（放大情绪、夸张）</li>
<li>语言情绪要与文字情绪相符</li>
<li>表情要先于语言出来</li>
</ol>
</li>
</ul>
</li>
<li>重音<ul>
<li>**重音(关键词)**：形容词，频率副词（经常，从不，常常……），程度副词（特别，及其，很……），动词（力度比较大，比较小的），表达情绪的词（骄傲，自豪，伤感……）  </li>
<li><strong>重音表达方式</strong>：强、弱、快、慢、虚、实</li>
</ul>
</li>
<li>感觉映射法<ul>
<li>味觉：酸 甜 苦 辣</li>
<li>嗅觉：香 臭</li>
<li>视觉：桃树、杏树、梨树</li>
<li>听觉：花下成千成百的蜜蜂嗡嗡地闹着</li>
</ul>
</li>
</ul>
<h3 id="停连-词语处理"><a href="#停连-词语处理" class="headerlink" title="停连-词语处理"></a>停连-词语处理</h3><ul>
<li>原则：<ul>
<li>标点符号是参考</li>
<li>语法关系是基础</li>
<li>情感表达是根本</li>
</ul>
</li>
<li>并列性停连<blockquote>
<p>山\朗润起来了，水\涨起来了，太阳的脸\红起来了。主语</p>
</blockquote>
</li>
<li>强调性停连<blockquote>
<p>胜利——不惜一切代价\也要赢得胜利！“ ” 《 》 </p>
</blockquote>
</li>
<li>判断性停连<blockquote>
<p>他看到远处的河面上\好像\有个人影，“有人落水了”，他边脱衣服边急速奔向岸边。似乎、也许、大概、应该、可能……判断性词语</p>
</blockquote>
</li>
<li>生理性停连<blockquote>
<p>“我从小就爱吃西瓜……我想我之所以老而不死……就是因为吃了这西瓜皮的缘故……”  咳嗽声、叹气声、说话时的迟疑等等（台词里）</p>
</blockquote>
</li>
<li>灵活性停连<blockquote>
<p>你、是翠兰吧？</p>
</blockquote>
</li>
<li>停顿的方法<ol>
<li>主语……（每一句的主语） </li>
<li>方位词（……中、……上、……下,前面，后面，左边，右边……）</li>
<li>疑问点（1、好像？、似乎？、大概？、也许？……2、疑问句）</li>
<li>标点符号（、 ， ……（结巴、咳嗽、哽咽、抽泣、清嗓子等等） —— ：“” 《》 。）</li>
<li>……\和、与…… 这是我们的理想\和信念</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>知声配音</category>
      </categories>
      <tags>
        <tag>苔花小米</tag>
        <tag>声音优化</tag>
      </tags>
  </entry>
  <entry>
    <title>剧本分析(3-2)</title>
    <url>/%E7%9F%A5%E5%A3%B0%E9%85%8D%E9%9F%B3/think-of-voice/think-of-voice-screenplay-analysis-3-2.html</url>
    <content><![CDATA[<h3 id="了解时代背景"><a href="#了解时代背景" class="headerlink" title="了解时代背景"></a>了解时代背景</h3><ul>
<li>说明<blockquote>
<p>时代背景是人物生存的总的环境，他包括人物所生活的<br>时代中，历史，政治，经济，社会，哲学，道德，心理，<br>风俗等方面因素在内。</p>
<p>研究时代背景就是研究剧本中人物生活的时代的社会存<br>在状况</p>
</blockquote>
</li>
<li>作用<blockquote>
<p>了解时代背景可以真正的理解人物的思想和行为，<br>为角色创作打下一个坚实的基础。让观众感受到<br>时代的风貌，增加角色的可信度。</p>
</blockquote>
</li>
</ul>
<h3 id="弄清规定情境"><a href="#弄清规定情境" class="headerlink" title="弄清规定情境"></a>弄清规定情境</h3><ul>
<li>说明<blockquote>
<p>弄清楚剧情发生的时间、地点和生活环境，以及<br>全剧的情节、时间和事实。<br>其次，演员还必须要弄清楚和感觉到规定情境的<br>发展和变化，这样才有可能了解与感觉角色的行<br>动的发展与变化</p>
</blockquote>
</li>
</ul>
<h3 id="抓住中心事件"><a href="#抓住中心事件" class="headerlink" title="抓住中心事件"></a>抓住中心事件</h3><ul>
<li>说明<blockquote>
<p>所谓中心事件，指的是全剧的核心内容，是支撑<br>一个戏的骨架，剧中人物行动都是围绕全剧的中<br>心事件展开的，剧本的矛盾冲突与全剧的主题思<br>想都是通过全剧的中心事件展示出来的。</p>
</blockquote>
</li>
</ul>
<h3 id="把握矛盾冲突"><a href="#把握矛盾冲突" class="headerlink" title="把握矛盾冲突"></a>把握矛盾冲突</h3><ul>
<li>说明<blockquote>
<p>在戏剧中，戏剧情节的发展变化，实际上 就是矛<br>盾冲突的发展变化，就是矛盾冲突的发生，发展，<br>引向高潮知道最终解决的过程。一个好的剧本重<br>视充满激动人心的尖锐的矛盾冲突的。</p>
</blockquote>
</li>
</ul>
<h3 id="开挖主题思想"><a href="#开挖主题思想" class="headerlink" title="开挖主题思想"></a>开挖主题思想</h3><ul>
<li>说明<blockquote>
<p>主题是作者对现实生活中某一个方面的现象产生<br>的企望能够得到解决的问题。<br>但是在一个剧本中往往所表现出的不只是一种思<br>想，有时在一个事件中会反映出一定的思想倾向。</p>
</blockquote>
</li>
<li>作用<blockquote>
<p>在分析剧本时，不仅要了解剧作者的思想，更主<br>要的是用自己的眼光去认识和评价剧作者的剧本<br>中所反映出来的生活现实，有可能会产生出许多<br>原来作者没有思索过，或者并没有认真思索过的<br>问题。</p>
</blockquote>
</li>
</ul>
<h3 id="寻找贯穿行动与最高任务"><a href="#寻找贯穿行动与最高任务" class="headerlink" title="寻找贯穿行动与最高任务"></a>寻找贯穿行动与最高任务</h3><ul>
<li><p>贯穿行动：在一个剧本中，主题与主题思想并不是具体的存在。具体存在的只有行动。而表现主题的行动，往往就是全剧的贯穿行动。</p>
<ul>
<li>四个标志：<ol>
<li>贯穿行动必须有一定的目标</li>
<li>贯穿行动是贯穿全剧的</li>
<li>贯穿行动应该是囊括剧本中所有人物的行动线</li>
<li>贯穿行动是表现主题的行动</li>
</ol>
</li>
</ul>
</li>
<li><p>最高任务：把剧作家或者导演在某段戏中想要达到的目的和所提出来的任务表现出来，演出戏剧作品的思想目的。（斯坦尼斯拉夫认为，如果剧本或者导演没有给到，演员应该亲自设计）</p>
</li>
<li><p>主题思想与最高任务的区别</p>
<blockquote>
<p>主题思想是属于逻辑的理性范畴，最高任务却主<br>要带有情绪和意志的色彩。主题思想说明真理，<br>最高任务是表演者实现他目的进行动作的热情意<br>志。</p>
</blockquote>
</li>
</ul>
<h3 id="掌握风格与体裁"><a href="#掌握风格与体裁" class="headerlink" title="掌握风格与体裁"></a>掌握风格与体裁</h3><ul>
<li>风格：<blockquote>
<p>某位艺术家的艺术作品特色（张艺谋，冯小刚，姜文）<br>某个社会环境下创造出来的艺术作品所共有的思<br>想艺术的特点。（古典主义，浪漫主义，现实主<br>义，荒诞派等等。</p>
</blockquote>
</li>
<li>体裁：<blockquote>
<p>艺术品的样式<br>艺术家在反映现实生活时，总是从现实生活中选<br>取他所感兴趣的素材，并以一种相应的方式或者<br>态度来处理这些素材，而这种态度会形成自身的<br>特定性质或者是特定的构造，也就是所谓的体裁。<br>（悲剧，喜剧，正剧，悲喜剧，传奇剧。。。。）</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>知声配音</category>
      </categories>
      <tags>
        <tag>苔花小米</tag>
        <tag>声音优化</tag>
      </tags>
  </entry>
  <entry>
    <title>想起你的声音-情景再现和对象感</title>
    <url>/%E7%9F%A5%E5%A3%B0%E9%85%8D%E9%9F%B3/think-of-voice/think-of-voice-situational-reenactment-and-object-sense.html</url>
    <content><![CDATA[<h3 id="情景再现"><a href="#情景再现" class="headerlink" title="情景再现"></a>情景再现</h3><ul>
<li>概念：在播音主持创作过程中，文本中的人物、事件、情节、场面、景物、情绪等，在创作主体的脑海里应该像放电影那样，形成连续的活动的画面；这画面不可能不带有创作主体的感受、态度、感情，不可能不带有文本本身所蕴含着的作者的感受、态度、感情以及创作主体因而产生的评价体验的“映象”。也就是说，创作主体理解和感受文本的过程中，不但感受到了其中的形象————“景”，而且也感受到了其中的神采————“情”。从而达到情景交融的境界。这个过程（注意，这里说的是过程，不是结果；是运动的，不是静止的；是融合的，不是孤立的），我们就叫它“情景再现”</li>
</ul>
<p>未完待续。。。</p>
]]></content>
      <categories>
        <category>知声配音</category>
      </categories>
      <tags>
        <tag>苔花小米</tag>
        <tag>声音优化</tag>
      </tags>
  </entry>
  <entry>
    <title>想起你的声音-调值</title>
    <url>/%E7%9F%A5%E5%A3%B0%E9%85%8D%E9%9F%B3/think-of-voice/think-of-voice-transfer-value.html</url>
    <content><![CDATA[<h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><ul>
<li>调值：指依附在音节里高低长短的变化的固定格式，也就是声调的实际音值或读法。调值主要由音高构成，音的高低在物理上决定于机械波的频率和波长。</li>
<li>五度标记法：赵元任1920年代发明的一种记录语言声调调值的方法<blockquote>
<p>阴平一55 特点:高平调，又高又平、有终<br>阳平—35 特点:中平调，高起高走、平稳上升、结尾收住<br>上声—214 特点:前低后高、前短后长、前轻后重<br>去声—51 特点:又高又短</p>
</blockquote>
</li>
<li>注意：声音连贯避免顿声、上声&gt;阳平&gt;阴平&gt;去声（声音长短）<br><img src="/.https:/img.nonnight.com/img/post-img/five-degree-scale.png" alt="五度标记法" title="五度标记法"></li>
</ul>
<h3 id="双音节练习"><a href="#双音节练习" class="headerlink" title="双音节练习"></a>双音节练习</h3><ul>
<li><p>阴平</p>
<ul>
<li>阴平（55 55）：芬芳 咖啡</li>
<li>阳平（55 35）：夕阳 猫粮</li>
<li>上声（55 214）：猫眼 歌舞</li>
<li>去声（55 51）：充沛 桑葚</li>
</ul>
</li>
<li><p>阳平</p>
<ul>
<li>阴平（35 55）：麻花 繁星</li>
<li>阳平（35 35）：萌芽 旁白</li>
<li>上声（35 214）：梅雨 桃李</li>
<li>去声（35 51）：芒种 沉默</li>
</ul>
</li>
<li><p>上声</p>
<ul>
<li>阴平（211 55）：保安 体温</li>
<li>阳平（211 35）：百合 彩霞</li>
<li>上声（35 214）：榜眼 脑海</li>
<li>去声（211 51）：把脉 采购</li>
</ul>
</li>
<li><p>去声</p>
<ul>
<li>阴平（51 55）：报刊 耐心</li>
<li>阳平（51 35）：贝壳 社团</li>
<li>上声（51 214）：罢免 泡影</li>
<li>去声（51 51）：测绘 透彻</li>
</ul>
</li>
</ul>
<h3 id="三音节练习"><a href="#三音节练习" class="headerlink" title="三音节练习"></a>三音节练习</h3><ul>
<li>阴平 + 阴平 + 阴平（55 55 55）：包青天 吹风机</li>
<li>阳平 + 阳平 + 阳平（35 35 35）：颐和园 形容词</li>
<li>（上声 + 上声）+ 上声（35 + 35 + 214）【单双格】：洗脸水 展览馆</li>
<li>上声 + （上声 + 上声）（211 + 35 + 214）【双单格】：小拇指 冷处理</li>
<li>去声 + 去声 + 去声（51 51 51）：备忘录 介绍信</li>
</ul>
<h3 id="综合练习"><a href="#综合练习" class="headerlink" title="综合练习"></a>综合练习</h3><ul>
<li>夸张四声：</li>
</ul>
<blockquote>
<p>高原广阔 花红柳绿 光明磊落 中国伟大<br>山河美丽 资源满地 千锤百炼 山明水秀<br>精神百倍 心明眼亮 巍峨耸立 高阳转降<br>区别起落 天然宝藏 非常好记 阶级友爱</p>
</blockquote>
<ul>
<li>绕口令：</li>
</ul>
<blockquote>
<p>天上看，满天星，地下看，有个坑，坑里看，有盘冰。坑外长着一<br>棵松，松上落着一只鹰，鹰下坐着一老僧，僧前点着一盏灯，灯前<br>搁着一部经。墙上钉着一根钉，钉上挂着一张弓。说刮风，就刮风，<br>刮得那男女老少难把眼睛睁，刮散了天上的星，刮平了地下的坑，<br>刮化了坑里的冰，刮断了坑外的松，刮飞了松上的鹰，刮走了鹰下<br>的僧，刮灭了僧前的灯，刮乱了灯前的经，刮掉了墙上的钉，刮翻<br>了钉上的弓。这是星散，坑平，冰化，松倒，鹰飞，僧走，灯灭，<br>经乱，钉掉，弓翻的一段绕口令</p>
</blockquote>
<ul>
<li>诗歌：<blockquote>
<p><strong>《长江之歌》节选</strong><br>你从雪山走来，春潮是你的风采；<br>你向东海奔去，惊涛是你的气概。<br>你用甘甜的乳汁，哺育各族儿女；<br>你用健美的臂膀，挽起高山大海。<br>我们赞美长江，你是无穷的源泉；<br>我们依恋长江，你有母亲的情怀。</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>知声配音</category>
      </categories>
      <tags>
        <tag>苔花小米</tag>
        <tag>声音优化</tag>
      </tags>
  </entry>
  <entry>
    <title>想起你的声音-了解有声书</title>
    <url>/%E7%9F%A5%E5%A3%B0%E9%85%8D%E9%9F%B3/think-of-voice/think-of-voice-understanding-audiobooks.html</url>
    <content><![CDATA[<h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><ul>
<li>有声书：有声书是一种个人或多人依据文稿并借着不同的声音表情和录音格式所录制的作品（把文字变成音频供听众欣赏）</li>
<li>受众：<ul>
<li>不方便阅读的人（主要）</li>
<li>视觉受损或视力不好人士</li>
<li>声音爱好者（声控）</li>
</ul>
</li>
<li>优质有声书的标准<ol>
<li>听着舒服（双向【说的人舒服，听的人舒服】）</li>
<li>戏感到位（画面+情绪）</li>
<li>个人特色（加分项）</li>
</ol>
</li>
</ul>
<h3 id="有声书的制作"><a href="#有声书的制作" class="headerlink" title="有声书的制作"></a>有声书的制作</h3><p>制作流程：</p>
<ol>
<li>画本<br><img src="/.https:/img.nonnight.com/img/post-img/audio-book-1.png" alt="画本"><br>- 注意：</li>
<li>录制<br><img src="/.https:/img.nonnight.com/img/post-img/audio-book-2.png" alt="录制"><br>- 注意：</li>
<li>审反<br><img src="/.https:/img.nonnight.com/img/post-img/audio-book-3.png" alt="审反"><br>- 注意：<ol>
<li>只需重新补录正确部分；返音要求与录制相同</li>
</ol>
</li>
</ol>
<h3 id="有声书的分类"><a href="#有声书的分类" class="headerlink" title="有声书的分类"></a>有声书的分类</h3><ul>
<li>出版物<br><img src="/.https:/img.nonnight.com/img/post-img/audio-book-4.png" alt="出版物"></li>
<li>社科类<br><img src="/.https:/img.nonnight.com/img/post-img/audio-book-5.png" alt="社科类"></li>
<li>网络小说<ul>
<li>男频搞笑<br><img src="/.https:/img.nonnight.com/img/post-img/audio-book-6.png" alt="男频搞笑"></li>
<li>女频宫斗<br><img src="/.https:/img.nonnight.com/img/post-img/audio-book-7.png" alt="女频宫斗"></li>
<li>男频玄幻<br><img src="/.https:/img.nonnight.com/img/post-img/audio-book-8.png" alt="男频玄幻"></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>知声配音</category>
      </categories>
      <tags>
        <tag>苔花小米</tag>
        <tag>声音优化</tag>
      </tags>
  </entry>
  <entry>
    <title>想起你的声音-气声的运用（3-5）</title>
    <url>/%E7%9F%A5%E5%A3%B0%E9%85%8D%E9%9F%B3/think-of-voice/think-of-voice-use-of-breath-3-5.html</url>
    <content><![CDATA[<h3 id="接戏气息状态"><a href="#接戏气息状态" class="headerlink" title="接戏气息状态"></a>接戏气息状态</h3><ul>
<li><p>常规：</p>
<ul>
<li>自然呼吸（一般叙述）</li>
<li>偷气（节奏紧迫，突出连贯）</li>
<li>急换气（紧张、激动、气愤、痛苦）</li>
<li>憋气（说到一半不愿意继续说下去）</li>
<li>倒吸气（震惊、意外）</li>
<li>提气（喜悦、回忆、节奏突变、受伤）</li>
<li>长呼气（无限感慨、绝望、哀伤）</li>
<li>颤抖用气（激动气愤，却强行自我控制）</li>
</ul>
</li>
<li><p>特殊：</p>
<ul>
<li>感情激动用气（先用急速呼吸为自己的清晰做准备，然后接戏紧凑）</li>
<li>从远处跑来报告急事时用气（保持喘息感同时吐字清楚）</li>
<li>激烈的形体活动中对话用气（吸气快而深）</li>
<li>重病及临终前气息状态（渐轻、渐缓、减弱）</li>
<li>自然环境的变化与呼吸状态（冷：“嘶。。。”哆嗦、长呼气长吸气；热：深吸一口气，快速呼出）</li>
</ul>
</li>
</ul>
<h3 id="打斗戏动作感气息运用"><a href="#打斗戏动作感气息运用" class="headerlink" title="打斗戏动作感气息运用"></a>打斗戏动作感气息运用</h3><ul>
<li>在形体活动中，依然保持说台词的状态</li>
</ul>
<blockquote>
<p>此项练习训练演员在激烈的形体活动过程中，<br>能够保持气息运用自如，语言清楚，苦笑不虚假，<br>并能与形体动作配合协调</p>
</blockquote>
]]></content>
      <categories>
        <category>知声配音</category>
      </categories>
      <tags>
        <tag>苔花小米</tag>
        <tag>声音优化</tag>
      </tags>
  </entry>
  <entry>
    <title>想起你的声音-声线精调(3-7)</title>
    <url>/%E7%9F%A5%E5%A3%B0%E9%85%8D%E9%9F%B3/think-of-voice/think-of-voice-voice-modulation-3-7.html</url>
    <content><![CDATA[<h3 id="声线精调"><a href="#声线精调" class="headerlink" title="声线精调"></a>声线精调</h3><ul>
<li>基础<ul>
<li>气息：声音的动力</li>
<li>发声：气息的呈现结果</li>
<li>情绪：打动人心的关键</li>
</ul>
</li>
<li>秘诀<ul>
<li>找到声音的可变维度（高低、）</li>
<li>声音维度的极限在哪</li>
<li>灵活运用声音的维度</li>
</ul>
</li>
</ul>
<h3 id="萝莉音"><a href="#萝莉音" class="headerlink" title="萝莉音"></a>萝莉音</h3><ul>
<li>发声方法：</li>
</ul>
<blockquote>
<p>也可以通过发‘a’长音来找，从本音开始，慢慢抬高，多‘a’几遍，直到找到那个发声点，一般来说，在比较高的地方能找到萝莉音。</p>
</blockquote>
<ul>
<li>发声特点：</li>
</ul>
<blockquote>
<p>音调拉高，嗓子变尖，加重鼻音，语气稚嫩。</p>
</blockquote>
<ol>
<li>虚实声结合</li>
<li>声调调高</li>
<li>发生位置偏高</li>
<li>语气</li>
<li>嘴型变圆</li>
</ol>
<ul>
<li>注意：<ol>
<li>宜短不宜长</li>
<li>注意不要出现严重拖音，否则会变得很嗲</li>
</ol>
</li>
</ul>
<h3 id="正太音"><a href="#正太音" class="headerlink" title="正太音"></a>正太音</h3><ul>
<li>发声方法：</li>
</ul>
<blockquote>
<p>可以通过发‘a’长音来找，从高音到低音，多‘a’几遍，直到找到那个发声点。</p>
</blockquote>
<ul>
<li>发声特点：</li>
</ul>
<blockquote>
<p>音调拉高，嗓子压低。在少女音的基础上，加上刚硬、活力的感觉。</p>
</blockquote>
<ol>
<li>可爱系正太（斋藤彩夏，植之冢光邦）：咬字靠前，露出上牙，气息往下冲。发声点在萝莉音上，要萌的话，使用一种含混，略吐字不清的方式来吐字。</li>
<li>低沉正太（坂本真绫，夏尔）：压音 + 胸腔共鸣 + 气息往下冲</li>
<li>元气正太：转音与尾音音调多往上，语气起伏强。而冷漠正太则相反，总之可以自己摸索不同的说法方式。</li>
</ol>
<ul>
<li>注意：</li>
</ul>
<blockquote>
<p>正太音的语调、语速要注意。小孩子在变声之前，气息必定不成熟，会很短，语气稚嫩。所以发正太音的时候，要把嘴型放圆，出气变小，嗓子变粗，语气变稚嫩。</p>
</blockquote>
<h3 id="少年音"><a href="#少年音" class="headerlink" title="少年音"></a>少年音</h3><blockquote>
<p>语气语调都比较有活力，<br>咬字发音都很清脆。<br>口腔的中前部分和鼻腔的中前部分配合<br>情绪上很动感，即可使声音年轻而华丽</p>
</blockquote>
<h3 id="少御音"><a href="#少御音" class="headerlink" title="少御音"></a>少御音</h3><blockquote>
<p>声音特点：圆润、优美，语调柔和动人。<br>气流的强弱要适量，虚实声分寸感的把握，<br>声带的张力与气流力度的协调</p>
</blockquote>
<h3 id="青年男音"><a href="#青年男音" class="headerlink" title="青年男音"></a>青年男音</h3><blockquote>
<p>用中声区并略带胸腔共鸣的声音来造型，<br>以突出人物但是主要还是要使声音的运用与人物的形象、性格相协调</p>
</blockquote>
<h3 id="中年音"><a href="#中年音" class="headerlink" title="中年音"></a>中年音</h3><blockquote>
<p>要结合具体人物的具体情况，加以运用。<br>在语言的速度节奏上，往比较沉稳、庄重、较有分量。<br>声音偏用中声区</p>
</blockquote>
<h3 id="御姐音"><a href="#御姐音" class="headerlink" title="御姐音"></a>御姐音</h3><blockquote>
<p>要结合具体人物的具体情况，加以运用。<br>在语言的速度节奏上，往比较沉稳、庄重，较有分量。<br>声音偏用中声区。</p>
</blockquote>
<h3 id="老年音"><a href="#老年音" class="headerlink" title="老年音"></a>老年音</h3><blockquote>
<p>语速：放慢<br>发声位置：重点在口腔的后部控制<br>共鸣：咽腔共鸣<br>声音放的很扁很扁，然后收声音的时候要弱化，必要时候也可以配合上咳嗽，喘气这样就会有老年的感觉和音色。</p>
</blockquote>
]]></content>
      <categories>
        <category>知声配音</category>
      </categories>
      <tags>
        <tag>苔花小米</tag>
        <tag>声音优化</tag>
      </tags>
  </entry>
  <entry>
    <title>想起你的声音-朗诵的语音技巧(2-2)</title>
    <url>/%E7%9F%A5%E5%A3%B0%E9%85%8D%E9%9F%B3/think-of-voice/think-of-voice-voice-skills-for-recitation-2-2.html</url>
    <content><![CDATA[<h3 id="语气"><a href="#语气" class="headerlink" title="语气"></a>语气</h3><ul>
<li>概念：说话时流露出来的感情色彩（情绪—表情）（共情能力）</li>
<li>稳一些和高低起伏到底有啥区别<ol>
<li>音量大小——今天天气<strong>真好~</strong></li>
<li>表情&#x3D;情绪（放大情绪、夸张）</li>
<li>语言情绪要与文字情绪相符</li>
<li>表情要先于语言出来</li>
</ol>
</li>
<li>练习：<blockquote>
<pre><code>             《火烧云》
</code></pre>
<p>晚饭过后，火烧云上来了，霞光、照得小孩子的脸、红红的。<br>大白狗变成红的了。红公鸡变成金的了。黑母鸡变成紫檀色的了。</p>
<p>喂猪的老头儿在墙根靠着，笑盈盈地看着他的两头小白<br>猪变成小金猪了。旁边走来个乘凉的人对他说：“您老人家<br>必要高寿，您老是金胡子了。”</p>
</blockquote>
</li>
</ul>
<h3 id="重音"><a href="#重音" class="headerlink" title="重音"></a>重音</h3><ul>
<li>常见重音： <ol>
<li>形容词，频率副词（经常，从不，常常……）</li>
<li>程度副词（特别，及其，很……） </li>
<li>动词（力度比较大，比较小的）</li>
<li>表达情绪的词（骄傲，自豪，伤感……）</li>
</ol>
</li>
<li>重音的表达方式：<ul>
<li>非常正能量：强、快、实</li>
<li>伤感的情绪：弱、慢、虚</li>
</ul>
</li>
<li>练习：<blockquote>
<p>那一张张<strong>面黄肌瘦</strong>(轻慢虚)的脸庞，<br>那一个个<strong>衣衫褴褛</strong>的背影，把<br><strong>理想</strong>（重慢实）挥作<strong>引路</strong>的旗帜，<br>把<strong>信念</strong>闪成<strong>前进</strong>的明灯。<br><strong>”砰砰砰“</strong>外面传来一阵<strong>急促的</strong>敲<br>门声，似乎不开门就要<strong>闯</strong>进来似的。</p>
</blockquote>
<ul>
<li>情景与感官结合<blockquote>
<p>LEVEL1:酸 甜 苦 辣 香 臭 可爱 苏堤春晓<br>LEVEL2:（视觉） 桃树、杏树、梨树，你不让我，我不让你，<br>都开满了花赶趟儿。红的像火，粉的像霞，白的像雪。（味觉）<br>花里带着甜味儿，闭了眼，树上仿佛已经满是桃儿、杏儿、梨<br>儿。（听觉）花下成千成百的蜜蜂嗡嗡地闹着，（视觉）大小<br>的蝴蝶飞来飞去。野花遍地是：杂样儿，有名字的，没名字的，<br>散在草丛里，像眼睛，像星星，还眨呀眨的。<br>触觉：<br>“吹面不寒杨柳风”<br>，不错的，像母亲的手抚摸着你风<br>里带来些新翻的泥土的气息，混着青草味儿，还有各种花的香，<br>都在微微润湿的空气里酝酿。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="停连"><a href="#停连" class="headerlink" title="停连"></a>停连</h3><ul>
<li>三原则：<ol>
<li>标点符号是参考</li>
<li>语法关系是基础</li>
<li>情感表达是根本</li>
</ol>
</li>
<li>种类：<ul>
<li>并列性停连<blockquote>
<p>山\朗润起来了，水\涨起来了，太阳的脸\红起来了。(主语)</p>
</blockquote>
</li>
<li>强调性停连<blockquote>
<p>胜利——不惜一切代价\也要赢得胜利！</p>
</blockquote>
</li>
<li>判断性停连<blockquote>
<p>他看到远处的河面上\好像\有个人影，“有人落水了”，他边脱衣服边急速奔向岸边。(似乎、也许、大概、应该、可能……判断性词语)</p>
</blockquote>
</li>
<li>生理性停连<blockquote>
<p>“我从小就爱吃西瓜……我想我之所以老而不死……就是因为吃了这西瓜皮的缘故……”(咳嗽声、叹气声、说话时的迟疑等等（台词里）)</p>
</blockquote>
</li>
<li>灵活性停连<blockquote>
<p>你、是翠兰吧？</p>
</blockquote>
</li>
</ul>
</li>
<li>停顿的方法<ol>
<li>主语……（每一句的主语） </li>
<li>方位词（……中、……上、……下,前面，后面，左边，右边……）</li>
<li>疑问点（1、好像？、似乎？、大概？、也许？……2、疑问句）</li>
<li>标点符号（、 ， ……（结巴、咳嗽、哽咽、抽泣、清嗓子等等） —— ：“” 《》 。）</li>
<li>……\和、与…… 这是我们的理想\和信念</li>
</ol>
</li>
<li>练习<blockquote>
<p>七岁时\妈给俺定了这门亲，今年\俺都十九岁了，还不<br>知道女婿\长的什么样呢!是高个?矮个?光脸?麻脸?是胖<br>的?还是瘦的?唉!管他什么样哟，反正从今儿起，这辈子，<br>他就是俺的男人，俺\就是他的媳妇啦!<br>                               ——《山桃的心声》</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>知声配音</category>
      </categories>
      <tags>
        <tag>苔花小米</tag>
        <tag>声音优化</tag>
      </tags>
  </entry>
  <entry>
    <title>想起你的声音-韵母</title>
    <url>/%E7%9F%A5%E5%A3%B0%E9%85%8D%E9%9F%B3/think-of-voice/think-of-voice-vowel.html</url>
    <content><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul>
<li>韵母：韵母&#x3D;韵头（介音）+韵腹（元音，韵母中最关键的部分）+韵尾（可元音可辅音，其中的辅音专指鼻韵母）</li>
<li>音节：汉语的音节是由声母和韵母相拼组成的语音单位，单个韵母也可自成音节<ul>
<li>韵头：又称介音，是韵腹前面、起前导作用的部分，发音比较模糊，往往迅速带过；</li>
<li>韵腹：又称主要元音，是一个韵母发音的关键，是韵母发音过程时，口腔肌肉最紧张，发音最响亮的部分；</li>
<li>韵尾：可元音可辅音。一种叫鼻韵尾，有-n，-ng两个。另一种叫口韵尾。韵尾是韵腹后面、起收尾作用的部分，发音也比较模糊，但务求发到位。</li>
</ul>
</li>
</ul>
<h3 id="单元音韵母"><a href="#单元音韵母" class="headerlink" title="单元音韵母"></a>单元音韵母</h3><ul>
<li><p>说明：单韵母是由单元音充当的，普通话10个单韵母可以分为舌面元音、舌尖元音和卷舌元音三类。舌面元音是由舌面起主要作用的元音，有a、o、e、ê、i、u、ü七个；舌尖元音是由舌尖起主要作用的元音，有-i(前)、-i(后)两个；er是卷舌元音。      </p>
<blockquote>
<p>第一、舌位的前后舌位指发音时舌面隆起部分的所在位置。发元音时舌头前伸，舌位在前，这时发出的元音叫前元音。普通话舌面元音里有两个前元音，就是i、ü。发元音时，舌头后缩，舌位在后，这时发出&gt; 的元音叫后元音。普通话舌面元音里有3个后元音，就是o、e、u。发元音时，舌头不前不后，舌位居中，这时发出的元音叫央元音。普通话里有1个舌面央元音，就是ɑ。<br>第二、舌位的高低舌面抬高，和硬腭 &gt; 的距离达到最小时，发出的元音叫高元音。舌面降低，和硬腭的距离达到最大时，发出的元音叫低元音。由高元音到低元音的这段距离可以分为相等的四份，中间有三个点。舌位处在这三个点上时，发出的元&gt; 音由上而下分别叫作半高元音、中元音和半低元音。普通话里有3个舌面高元音，就是i、u、ü，有两个半高元音，就是o、e，有1个低元音，就是ɑ。<br>第三、唇形的圆展嘴唇收圆，发出的元音叫圆唇元音；嘴唇展开，发出的元音叫不圆唇元音。普通话舌面元音里有3个圆唇元音，就是o、u、ü，有4个不圆唇元音，就是ɑ、e、i、ê。<br>单韵母的发音特点是发音过程中舌位、唇形和开口度始终不变。如有一点变化，就不是纯正的单韵母了，所以，发音时要保持固定的口形。</p>
</blockquote>
</li>
<li><p>ɑ[A] 舌面、央、低、不圆唇元音</p>
<ul>
<li>发音技巧：发音时口大开，舌尖微离下齿背，舌位低，舌面中部微微隆起和硬腭后部相对。唇形不圆。</li>
<li>绕口令：<blockquote>
<p>妈妈开拉达，爸爸桑塔纳，<br>娃娃是警察，会开雅马哈。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>o[о] 舌面、后、半高、圆唇元音</p>
<ul>
<li>发音技巧：发音时，舌身后缩，舌面后部隆起和软腭相对，舌位半高，上下唇自然拢圆。</li>
<li>绕口令：<blockquote>
<p>打南边走来个老婆婆，俩手托着俩笸箩。<br>左手托着的笸箩装的是菠萝，右手托着的笸箩装的是萝卜。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>e[γ] 舌面、后、半高、不圆唇元音</p>
<ul>
<li>发音技巧：发音时，口半闭，扁唇，舌头后缩，舌面后部略隆起，舌面两边微卷，舌面中部稍凹，舌尖置于下齿龈后，嘴角向两边微展，声带振动。软腭上升，关闭鼻腔通路。</li>
<li>绕口令：<blockquote>
<p>坡上立着一只鹅，<br>坡下就是一条河。<br>宽宽的河，肥肥的鹅，<br>鹅要过河，河要渡鹅。<br>不知是鹅过河，还是河渡鹅？</p>
</blockquote>
</li>
</ul>
</li>
<li><p>ê[ε] 舌面、前、半低、不圆唇元音</p>
<ul>
<li>发音技巧：发音时，口半开，舌位半低，展唇，舌尖抵住下齿背，使舌面前部隆起和硬腭相对，唇形不圆。</li>
<li>练习词：<blockquote>
<p>单音节：姐、切、别<br>双音节：谢谢、节约、借阅<br>四音节：邪不压正、确有其事</p>
</blockquote>
</li>
</ul>
</li>
<li><p>i[i] 舌面、前、高、不圆唇元音</p>
<ul>
<li>发音技巧：发音时，口微开，唇形呈扁平形，上下齿相对（齐齿），舌尖接触下齿背，使舌面前部隆起和硬腭前部相对。</li>
<li>绕口令：<blockquote>
<p>七加一，七减一，<br>加完减完等于几？<br>七加一，七减一，<br>加完减完还是七。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>u[u] 舌面、后、高、圆唇元音</p>
<ul>
<li>发音技巧：发音时，两唇收缩成圆形，略向前突出；舌后缩，舌面后部高度隆起和软腭相对。</li>
<li>绕口令：<blockquote>
<p>肩背一匹布，<br>手提一瓶醋，<br>走了一里路，<br>看见一只兔，<br>卸下布，放下醋，去捉兔。<br>跑了兔，丢了布，洒了醋。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>ü[y] 舌面、前、高、圆唇元音</p>
<ul>
<li>发音技巧：发音时，发音状况与i基本相同，但两唇拢圆，略向前突。</li>
<li>绕口令：<blockquote>
<p>芜湖徐如玉，<br>出去屡次遇大雾。<br>曲阜苏愚卢，<br>上路五回遇大雨。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>er[] 卷舌、央、中、不圆唇元音</p>
<ul>
<li>发音技巧：发音时，口腔在半开半闭之间自然打开，舌前部上台，舌尖向后卷向硬腭，但不接触。这个元音只能自成音节。</li>
<li>练习词：<blockquote>
<p>单音节：儿、耳、二<br>双音节：而今、而已、儿童<br>四音节：尔虞我诈、耳濡目染</p>
</blockquote>
</li>
</ul>
</li>
<li><p>-i(前) 舌尖、前、高、不圆唇元音</p>
<ul>
<li>发音技巧：发音时，口略开，展唇，舌尖隆起部位与上齿背相对，保持适当距离，气流经过时不发生摩擦。这个韵母在普通话里只出现在z、c、s声母的后面。</li>
<li>练习词：<blockquote>
<p>紫\之、词\尺<br>自私\指示、自此\咫尺</p>
</blockquote>
</li>
<li>绕口令：<blockquote>
<p>四是四，十是十。<br>十四是十四，四十是四十。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>-i(后) 舌尖、后、高、不圆唇元音</p>
<ul>
<li>发音技巧：发音时，口略开，展唇，舌尖前端抬起和硬腭前部相对，这个韵母在普通话里只出现在zh、ch、sh、r声母的后面。</li>
<li>练习词：<blockquote>
<p>紫\之、词\尺<br>自私\指示、自此\咫尺</p>
</blockquote>
</li>
<li>绕口令：<blockquote>
<p>四是四，十是十。<br>十四是十四，四十是四十。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="复合元音韵母"><a href="#复合元音韵母" class="headerlink" title="复合元音韵母"></a>复合元音韵母</h3><ul>
<li>说明：<ul>
<li>复合元音韵母简称复韵母，是有两个或者两个以上元音组合而成的。</li>
<li>复合元音的发音过程中，舌位、腭、唇型，都要发声连续的移动变化。</li>
<li>舌位动程：舌头位置移动变化的过程</li>
<li>如何发复韵母：<blockquote>
<p>复韵母是一个元音滑向另一个元音，没有任何一个<br>元音是独立存在的，总是融合前后元音的音色<br>复韵母在发音时，每个元音发音的时长不同，其中<br>发音时长最长、口腔开度最大、声音最响亮的部分<br>叫做韵腹，它的前面是韵头，后面是韵尾</p>
</blockquote>
</li>
</ul>
</li>
<li>前响复韵母（ai、ei、ao、ou）<ul>
<li>特点：舌位由低向高滑动，使发音过程成为一个整体，开头的元音音素响亮清晰，因为收尾的音只表示舌位移动的方向，显得轻短模糊。</li>
<li>ai：先发a音，迅速向i滑动，气流不间断，音由强至弱<ul>
<li>a：口腔打开，舌头自然放平，舌尖接触下齿龈，唇自然打开</li>
<li>i：口腔开度小，舌位前高，双唇呈扁平型，嘴角向两边打开，舌尖轻触下齿背</li>
<li>练习词：<blockquote>
<p>哀、百、拍<br>爱戴、摆开、拍卖<br>排山倒海、在所不辞</p>
</blockquote>
</li>
</ul>
</li>
<li>ei：发音时，这里的起点前e，发音后舌位向前高滑动，终止位置接近高元音i<ul>
<li>e：口腔半闭，舌后缩，舌面后部隆起，舌面中部稍凹，嘴角向两边微展</li>
<li>i：口腔开度小，舌位前高，双唇呈扁平型，嘴角向两边打开，舌尖轻触下齿背</li>
<li>练习词：<blockquote>
<p>胚、费、给<br>北非、配备、肥美<br>背道而驰、眉飞色舞</p>
</blockquote>
</li>
</ul>
</li>
<li>ao：先发a音，然后舌根上台，口型逐渐缩圆，轻连上o，近似u，发奥音<ul>
<li>a：口腔打开，舌头自然放平，舌尖接触下齿龈，唇自然打开</li>
<li>o：舌后缩，舌面后部隆起舌面中部稍凹，上下唇自然拢圆  </li>
<li>练习词：<blockquote>
<p>包、冒、扫<br>冒号、宝岛、骚扰<br>貌合神离、劳苦功高</p>
</blockquote>
</li>
</ul>
</li>
<li>ou：先发o的音，然后口型收拢，舌根提高，口型从大圆到小圆，发“欧”音<ul>
<li>o：舌后缩 舌面后部隆起，舌面中部稍凹，上下唇自然拢圆</li>
<li>u：口腔开度小，舌位后高，双唇收缩成圆形，稍向前凸，中间留一小孔，舌后缩</li>
<li>练习词：<blockquote>
<p>欧、剖、某<br>欧洲、剖腹、谋求<br>呕心沥血、藕断丝连</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li>后响复韵母（ia、ie、ua、uo、üe）<ul>
<li>特点：舌位由高向低滑动，使发音过程成为一个整体，收尾的元音音素响亮清晰，在韵母中处在韵腹低位，而开头的元音发音不太响亮比较短促 </li>
<li>ia：起点元音是前高元音i，舌位滑向央低元音a。由于受i的影响，终止位置往往要比a稍偏前<ul>
<li>i：口腔开度小，舌位前高，双唇呈扁平型，嘴角向两边打开，舌尖轻触下齿背</li>
<li>a：口腔打开，舌头自然放平，舌尖接触下齿龈，唇自然打开</li>
<li>练习词：<blockquote>
<p>芽、加、恰<br>压价、下家、掐架<br>雅俗共享、戛然而止</p>
</blockquote>
</li>
</ul>
</li>
<li>ie：起点元音是前高元音i，舌位向下滑向前半低元音ê。终止位置是ê略高。ie 舌位动程比较窄<ul>
<li>i：口腔开度小，舌位前高，双唇呈扁平型，嘴角向两边打开，舌尖轻触下齿背</li>
<li>e：口腔半闭，舌后缩，舌面后部隆起，舌面中部稍凹，嘴角向两边微展</li>
<li>练习词：<blockquote>
<p>叶、别、聂<br>业界、结业、谢谢<br>喋喋不休、铁证如山</p>
</blockquote>
</li>
</ul>
</li>
<li>ua：这里的起点元音是后高圆唇u，舌位滑向央低元音a，唇形逐渐由圆变展<ul>
<li>u：口腔开度小，舌位后高，双唇收缩成圆形，稍向前凸，中间留一小孔，舌后缩</li>
<li>a：口腔打开，舌头自然放平，舌尖接触下齿龈，唇自然打开</li>
<li>练习词：<blockquote>
<p>娃、爪、耍<br>画画、刷刷、耍滑<br>瓦解冰消、挖空心思</p>
</blockquote>
</li>
</ul>
</li>
<li>uo：这里的起点元音是后高圆唇u，舌位下滑到后半高元音o。唇形始终为圆唇，收尾时唇形开度稍大<ul>
<li>u：口腔开度小，舌位后高，双唇收缩成圆形，稍向前凸，中间留一小孔，舌后缩</li>
<li>o：舌后缩 舌面后部隆起，舌面中部稍凹，上下唇自然拢</li>
<li>练习词：<blockquote>
<p>窝、撮、昨<br>蹉跎、懦弱、硕果<br>左右逢源、多难兴邦</p>
</blockquote>
</li>
</ul>
</li>
<li>üe: 起点元音是圆唇前高元音ü，舌位下滑至接近前半低元音ê的位置，唇形由圆唇逐渐展开<ul>
<li>ü：口腔开度小，舌位前高，双唇搓圆，略向前凸，中间留一扁圆小孔，舌尖抵下齿背</li>
<li>e:口腔半闭，舌后缩，舌面后部隆起，舌面中部稍凹，嘴角向两边微展</li>
<li>练习词：<blockquote>
<p>约、雪、决<br>绝学、雀跃、薛岳<br>约定成俗、越俎代庖</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li>中响复韵母(iao、iou、uai、uei)<ul>
<li>特点：舌位由高向低滑动，再从低向高滑动。开头的元音音素不响亮较短促，中间的元音音素响亮清晰，收尾的元音音素轻短模糊</li>
<li>iao：舌位由起点元音i开始，向下向后，滑向a，再由低升高到o。唇形由咧唇到转折点a开始逐渐变为圆唇<ul>
<li>练习词：<blockquote>
<p>邀、瓢、妙<br>飘摇、窈窕、缥缈<br>咬文嚼字、寥寥无几</p>
</blockquote>
</li>
</ul>
</li>
<li>iou:iu&#x3D;iou<ul>
<li>练习词：<blockquote>
<p>优、丢、留<br>悠久、旧友、优秀<br>游刃有余、有勇无谋</p>
</blockquote>
</li>
</ul>
</li>
<li>uai：由元音u开始舌位向下滑动到前a，再折往元音i的方向滑升，唇形由圆唇开始到a，逐渐变化为展唇<ul>
<li>练习词：<blockquote>
<p>歪、拽、甩<br>外踝、乖乖、怀揣<br>歪风邪气、怀才不遇</p>
</blockquote>
</li>
</ul>
</li>
<li>uei: 由后高元音u开始舌位向下滑动到前半高e，再折向前高元音i的方向滑升。唇形由拢圆到展开（ui&#x3D;uei）<ul>
<li>练习词：<blockquote>
<p>威、醉、岁<br>尾随、回归、愧对<br>惟妙惟肖、水到渠成</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="鼻韵母"><a href="#鼻韵母" class="headerlink" title="鼻韵母"></a>鼻韵母</h3><ul>
<li>说明：鼻韵母有16个，由元音和鼻辅音n或ng复合而成，分开口呼（an,en,ang,eng,ong）、齐口呼（ian、in、iang、ing、iong）、合口呼（uan、uen、uang、ueng）和撮口呼（üan、ün）</li>
<li>-n的发声原理（前鼻音韵母【an、en、in、un、ian、uan、üan、uen】）：韵尾-n的发音部位是舌面前部向硬腭接触，可把舌尖抵住上门齿齿背,然后下腭向上靠拢，使舌面向前贴紧上齿龈，振动声带发音。前鼻音尾韵母的发音中，韵头的发音比较轻短，韵腹的发音清晰响亮，韵尾的发音只做出发音状态。<ul>
<li>由前“a”开始发音，舌尖活动是顶下齿背到抵上牙龈部分，舌面稍升，舌前伸。收音时an上下齿闭拢。</li>
</ul>
</li>
<li>-ng的发声原理（后鼻音韵母【ang、eng、ing、ong、iang、uang、ueng、iong】）：韵尾ng是舌面后、浊、鼻音，发音时，软腭下降关闭口腔，打开鼻腔通道，舌面后部后缩，并抵住软腭,气流颤动声带，从鼻腔通过。后鼻音尾韵母的发音中，韵头的发音比较轻短，韵腹的发音清晰响亮，韵尾的发音只做出发音状态。<ul>
<li>由后“a”开始发音，舌尖离开下齿背，舌头后缩，舌根抬起与软腭接触，舌头后缩。读ang收音。</li>
</ul>
</li>
<li>比较练习：<blockquote>
<p>an - ang   开饭-开放 天坛-天堂<br>ian - iang 新鲜-新乡 小县-小巷<br>uan - uang 官民-光明 车船-车床<br>en - eng   长针-长征 真理-整理<br>in - ing   信服-幸福 辛勤-心情<br>un - ong   乡村-香葱 飞轮-飞龙<br>un - iong  勋章-胸章 运煤-用煤</p>
</blockquote>
</li>
<li>连用练习：<blockquote>
<p>an - ang     班长 盼望<br>ang - an     长安 抗旱<br>ian - iang   艳阳 边疆<br>iang - ian   香烟 抢险<br>uan - uang   宽广 观光<br>uang - uan   黄砖 光环<br>en - eng     真正 神圣<br>eng - en     诚恳 生根<br>in - ing     民兵 聘请<br>ing - in     影印 行进<br>un - ong     轮空 蚊虫<br>ong - un     通顺 农村  </p>
</blockquote>
</li>
<li>绕口令练习：<blockquote>
<p>扁担[biǎn dan] 长，板凳[bǎn dènɡ]宽，<br>板凳没有扁担长，扁担没有板凳宽，<br>扁担要扁担绑在板凳上，<br>板凳不让扁担绑在板凳上。<br>扁担偏要扁担绑在板凳上！<br>扁担急了，扁担抄起扁担打了板凳一扁担；<br>板凳急了，板凳抄起板凳打了扁担一板凳。</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>知声配音</category>
      </categories>
      <tags>
        <tag>苔花小米</tag>
        <tag>声音优化</tag>
      </tags>
  </entry>
  <entry>
    <title>望风吹</title>
    <url>/%E8%AF%97%E8%AF%8D%E6%95%A3%E6%96%87/verse-and-prose/look-at-the-wind-blowing.html</url>
    <content><![CDATA[<p>虔心祈，<br>春风，代替秋雨，<br>花开，抹去冷寂，<br>一点的凝望，<br>换一点驻足的歌唱。</p>
<p>愿风来，<br>小草摆头等待，<br>细雪调皮欢快，<br>我逃离了泪眼之地，<br>没有无助，<br>也没有刻意。</p>
<p>忘思愁，<br>清晨的挽留，<br>勾勒出，<br>夕阳下你温柔的眼眸。</p>
]]></content>
      <categories>
        <category>诗词散文</category>
      </categories>
      <tags>
        <tag>夜风</tag>
        <tag>伤感</tag>
      </tags>
  </entry>
  <entry>
    <title>本人年华</title>
    <url>/%E8%AF%97%E8%AF%8D%E6%95%A3%E6%96%87/verse-and-prose/self-year.html</url>
    <content><![CDATA[<span id="more"></span>

<h3 id="真诚的人生信仰"><a href="#真诚的人生信仰" class="headerlink" title="真诚的人生信仰"></a>真诚的人生信仰</h3><p>大概从初中开始，我就开始思索自己的人生信仰，当时也没有什么目的，只是单纯的觉得有自己的信条，会很帅。刚开始想的是真诚、善良、机敏、勇笃，我记得还有对应的意象，真诚如风，善良如冰，机敏如声，勇笃如铮，现在想来，当时可能只是想押个韵，但细细一品，其实是有一些味道的。再后来，思考着思考着，就只留下真诚了；善良会使人温暖，但负不了敌人，机敏让人清晰，但不可把控，不能锻炼；勇笃更是束之高阁的东西，一腔热血，终会停歇。但真诚确是一种由内而外散发出来的感觉，是的，真诚其实是一种感觉，一种可以无怨无悔的感觉；当然，它也可以抽象成准则，真且诚恳，解决问题要真，这样问题才会真正的被解决，待人处要诚恳，用真心才会发现真心。其实感觉自己对真诚的理解还不够高，但这样也更让自己坚信这个信仰，我相信这个信仰，会把我带到我喜欢的道路上去，无论早晚。</p>
<h3 id="习惯的漫漫长路"><a href="#习惯的漫漫长路" class="headerlink" title="习惯的漫漫长路"></a>习惯的漫漫长路</h3><p>以前经常有满腔热血的时候，想着怎么努力，怎么拼搏，但努力几天后，就没那么愤慨，想着一飞冲天的感觉了，多次后总结的区别，可能就是多努力几天，少努力几天吧。后来觉得，只有养成习惯，才是自己的。规划一段时间的事情，然后把规划的事情实现，再规划，再完成，一定周期后进行总结思考，就会发现自己其实是有些成长的，但过程中，要切切实实的做好每一件事情，多总结，多思考，多记录。其实在实行过程中，还会有很多其他的问题，比如长时间在忙一部分计划放弃式中断了，一些事情在坚持后发现不是太适宜，这些事情都是很严重的阻碍，多次反馈后，我发现多半是计划设计的不好，自己太贪心，太急于求成了，两个月看本书，三个月学个乐器，一个月准备个考试，一生很短也很长，既然决定终身学习，那么就不要急。</p>
<p>未完待续。。。</p>
]]></content>
      <categories>
        <category>诗词散文</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>日记</tag>
        <tag>感慨</tag>
      </tags>
  </entry>
  <entry>
    <title>因为那夜风</title>
    <url>/%E8%AF%97%E8%AF%8D%E6%95%A3%E6%96%87/verse-and-prose/study-pouwer.html</url>
    <content><![CDATA[<p>总是因为风中的一丝味道而伤感。</p>
<span id="more"></span>

<h3 id="因为那夜风"><a href="#因为那夜风" class="headerlink" title="因为那夜风"></a>因为那夜风</h3><p>因为一场风，<br>落日迎来了星空点点，<br>余晖拉长了记忆的影子，<br>月光洒下，<br>荡起层层细语。</p>
<p>吹来的这阵风，<br>偷走了曾经的一个梦，<br>曾想把它藏在过去，<br>如今却随风而去。</p>
<p>那夜里吹走了的风，<br>朦朦胧胧，<br>抓不到，<br>也留不住，<br>但有种种思绪，<br>因为这风，<br>成为了心中默默嘈杂的mi密。</p>
]]></content>
      <categories>
        <category>诗词散文</category>
      </categories>
      <tags>
        <tag>夜风</tag>
        <tag>伤感</tag>
      </tags>
  </entry>
  <entry>
    <title>语珠的故事</title>
    <url>/%E8%AF%97%E8%AF%8D%E6%95%A3%E6%96%87/verse-and-prose/the-story-of-the-pearl-of-words.html</url>
    <content><![CDATA[<pre><code>生活是值得期待的，因为它会时不时的给你一场相遇，每场相遇会让我惊喜万分，虽然望着望着都再也看不见了，但这一次，我决定要勇敢的上前打招呼。
</code></pre>
<hr>
<p>   第一次见她的时候，我就感受到她肯定是一个认真而又专注的女孩子。她有一股让别人也认真的能量，让逐渐熟悉职场开始有些懈怠的我感觉到了硕大的忏愧，也让我对她的初步印象十分深刻。但由于种种原因，后来就很少再见到她了，打听后才知道，她到其他楼层工作了。有时工作乏累的时候，会不经意的看向她曾经的座位，想起她，就仿佛又有了些力量。</p>
<p>   现场一期任务结束后，我就被调回了公司，一天又一天的工作生活，让自己又有些麻木了起来，直到有一天同事谈及到了她，同时还得到了一个很重要的消息，当时就感觉仿佛自己从梦中醒来了一般，想一想她，又看了看现在的自己，做出了一个坚定的决则，三个月，我要坚持跑步，让自己更健康，我要走出屋子，让自己内心更阔达，我要按时睡觉，让自己更加精神，我要为这个决定做好充足的准备。时间一天天过去，自己也仿佛回到了一年前刚入职的时候那般认真了，一切都向着我希望到达的方向前进着。但自己一如既往的倒霉，从她朋友那里得知，她有了可以照顾好她的人。我无法清晰的回想起当时的心情，只知道自己给她发了祝福，发了个私密的朋友圈，然后就又回到了自己的世界里。</p>
<blockquote>
<p>万里无云的天空，倒映在河水中，微风拂过，平静了，伴着花，牵着柳，格外清朗。俄而乌云忽至，群草倾覆，暴雨连连，一顿一顿地涌向心间。<br>外边的世界，也渐渐迎来了月光，路过欢声笑语，路过吵闹喧哗，路过他人走过自己也想走的路，路过低语喃喃的丁香花。<br>坐上回去的车，看了眼匆匆而去，瞥了眼迟迟未到，恍然间的站起伫立，恍然间的呆滞迷离，想言想语也疯言疯语，索性默默的退了回去，退了回去。<br>可能接下来会自然而然的下车，到一个该去的地方，做平常都在做的事，但总会是一片安静，安静之后是什么？时光流逝，该来的来，想走的走，<br>锤一锤胸，晃一晃头，喊出些声音，惊扰下自己。</p>
<p>烦事三千，有久备断始，有忘念楚现，有迷而不知，有奋而误因，有愤天吼不敌万里无人。。。何止三千，吾祝，吾愿。</p>
</blockquote>
<p>   一转眼，差不多一年过去了，跑步和早睡已经成了习惯，一切都不好不坏，就像昨天一样，明天大概也是如此吧，挺好。</p>
<p>   有时候，上天总是喜欢开玩笑，让有些事情，那么的不可能，但又确确实实的发生了，还是那个同事，还是那个我回忆中依旧清晰的她。这次我不要再等三个月了，虽然不知道当时为什么会决定准备那么长时间，但我不止一次想穿越回去，重重地敲一敲当时自己的脑子。</p>
<p>   忽然而来地惊喜让我感受到从未有过的开心，多长时间聊天没有这么投入了，多长时间没有会因为开心激动而一两点还睡不着觉，明知道明天见她时要神采奕奕，但内心总是又兴奋又紧张。</p>
<p>   能见到她的那两天，是我最开心的两天，虽然第一次主动邀请和女孩子一块看音乐剧，一块逛公园，但我发现她给我了一种非常强烈的亲切感，我没有想象中紧张无言，也没有想像中的手足无措，让我觉得，她仿佛本来就是我很要好的人一般。我曾经也有倾注过感情地人，但那时自己只能做她们月光下亲密的倒影，她给我的回应，让我有了从未有过的动力，让自己觉得自己竟是如此的幸运，想让自己变得更优秀，可以帮助她更多更多，可以带给她更多地快乐。</p>
<p>   我决定送给她一件礼物，因为她的手链只有三十块钱，因为她那晚笑的样子像我想要买的礼物一样光彩夺人，我晚上早早地下班了，从商场这头逛到那头，从这个商场逛到那个商场，最后选完包装后，就想找个时间送给她，我觉得，她肯定喜欢。</p>
<p>   近乎为零地经验，让我做了个错误地决定，虽然最终没有执行，但过程中还是给她带来了一些烦恼。朋友结婚让我帮忙准备一下晚上地活动，是一个大家快快乐乐地活动。我突然想起她给我说旅游时有情侣在朋友帮助下求婚成功地事情，想着如果那时把礼物送给她，她肯定也会很惊喜吧。现在想想，自己地想法是多么自私和愚蠢。</p>
<p>   在朋友婚礼上，我感受到了很多，父母地托付和彼此地相爱，让自己即感动又羡慕，觉得爱是世间最大地幸福和责任。</p>
<p>   近些天她在准备考试，我和她之间聊的少了，我也慢慢从那种兴奋癫狂中冷静了下来，我想和她一块变得优秀，只要她愿意，我愿意一直陪她前进。虽然不知道将来会怎样，但二十七年来，我从未如此珍惜，也未如此幸运。</p>
]]></content>
      <categories>
        <category>诗词散文</category>
      </categories>
      <tags>
        <tag>日记散文</tag>
      </tags>
  </entry>
  <entry>
    <title>怯乐悲色</title>
    <url>/%E8%AF%97%E8%AF%8D%E6%95%A3%E6%96%87/verse-and-prose/timidity-and-sadness.html</url>
    <content><![CDATA[<span id="more"></span>

<h3 id="怯弱"><a href="#怯弱" class="headerlink" title="怯弱"></a>怯弱</h3><p>何为怯？是不敢，是畏惧，是踌躇，是后悔的开始；怯弱让人悲观，让人失去大好机会，使本不该失去的东西，再也得不到。就仿佛把自己框到笼子里，可能笼子并不坚固，甚至触之即碎，但仍然无法走出，到最后，因为怯弱，它愈加坚固，甚至会让人觉得更加舒服，准确的说，不是舒服，而且习惯了，坦然了。<br>怯弱确实会上瘾，以前害怕陌生人，然后就避开陌生人，最后熟悉的人也陌生了，所以也就慢慢喜欢一个人了。其实不能说是喜欢，只是相较与陌生人相处，一个人，反而没那么忐忑与不适。<br>那怎样才能不怯弱呢？硬着头皮乱吼吗？如果真这样做的话，可能就再也没办法回头了，因为负面的情绪会给你更大的重击，让人永坠谷底。我觉得吧，怯弱本质上还是因为自卑，卑自己容貌不佳，卑自己举止不雅，卑自己思维迟钝，卑自己身份低微，人前半生的环境是很难自己选择的，环境不一样，起点不一样，遇见的人也不一样，做过的事也不一样，和他人比，终究会有强弱与好坏，一些人出身就能拿到几个亿，我可能这辈子都攒不够这个数。所以，拿两个人进行比较本身就是不公平的，人应该和自己比，和昨天的自己比，和以前的自己比，有人可能会说，这样脱离环境的自娱自乐很可悲，但人不就是为自己而活，为需要自己的人而活的吗？别人可以是目标，可以是参照，也可以是教训，和别人比，终究会乱了神，迷了心，眼观六路，耳听八方，走自己的路，不自卑，不怯弱，心里有光，目光灼灼。</p>
<hr>
<h3 id="迷乐"><a href="#迷乐" class="headerlink" title="迷乐"></a>迷乐</h3><p>迷，头脑不清；乐，情绪高涨，不冷静，不敏锐。处于迷乐状态有多种原因，第一种，得志的时候，由自满而产生的情绪高涨，周围环境所产生的有利氛围，让人迷乐，这可能会导致给你机会的人觉得你不够稳重，太张扬而有所疑虑，也可能会使你的同事对你产生厌恶情绪，这时多想一想如果自己同事得志了，自己希望他处于怎样的状态，自己就试着处于那种状态。第二种，沉迷娱乐时，也会造成迷乐，不管是喝酒玩乐，游戏玩乐，都可能会产生迷乐情绪，这时候迷乐可能会让你口无遮拦，让你说出一些会后悔的言语，所以把我好自己的度，适可而止才能不沉迷。迷乐其实很难自我发现，但多做少说，多自勉少自满，多观察周围，多思考自己的环境，终会清心寡欲，从容不迫的。</p>
<h3 id="悲愁"><a href="#悲愁" class="headerlink" title="悲愁"></a>悲愁</h3><p>夜风萧瑟，路灯闪烁，漫漫长路，形影相吊，无人追赶，无处寻觅，天空洒下的月光，仿佛把时间冰冻了一般；拖着沉重的步伐，没有目的地前进，前方的路和曾经走过的路那么相似，变了的只有自己，这条路很宽，宽的左拐右拐还能回到原地，它也很窄，绑着你脚，不管逃到哪里，你总在它的上面；有些乏力了，但隔壁地路上人来人往，一拳一拳地在后面捶打着自己，也曾抬头挥翅，兴奋地想要飞到高处，但总也飞不出去，不是向往地地方太高，是自己少了些羽翼；走着走着，遇到了一条河，在河中看到了喜欢的人渐渐远离，看到了想要的果实被别人摘取，看到了周围人的质疑，亲人的冷语；有时多想成为一个不会思考，没有感受的傻瓜，不去爱，也不去争，不知不觉的沉睡，自给自足的老去，但自己就是自己，想去争，想被爱，想被需要，既然生命的尽头不可知，那就探索寻觅到走到尽头的那一刻，戛然而止也好，功成名就也罢。</p>
<h3 id="繁色"><a href="#繁色" class="headerlink" title="繁色"></a>繁色</h3><p>怒目圆睁是色，喜极而泣是色，情欲狰狞也是色。古人云：”困于心，衡于虑，而后作；征与色，发于声，而后喻。“《生于忧患，死于安乐-孟子》，然他人之感独己难变，人没办法改变他人的想法，解释会变成掩饰，措辞会变成说辞，情感流露需要有场景区别，是需要有感情程度的，对于陌生人，你的哭泣可能会引来嘲讽，对于亲近之人，一滴眼泪可能就会引起他心中的风云变化，亲近之人征于色，陌生之人掩于色，毕竟没有人会对一潭清水指指点点。那么这种行为算是虚伪吗？我认为是不算的，因为对于内人你已经是真诚相待的，至于外人，你捎带扰乱的坦诚反而会更让人生厌。</p>
<hr>
<p>怯乐悲色，也许像喜怒哀乐一般让生活变得真实，也会给生活带来诸多不变，古人长谈修心养性，有的人四面圆滑，有的人正气凌然，大家都在做，但结果总是呈现出多样性，经历生活多次衍生出来的理解，不同方面会有不同方面的好坏，以前常警戒自己”怯乐悲色，哀若如死人一般“，现在想来，仿佛没有个结果，看不到终点，终享不得圆满。</p>
]]></content>
      <categories>
        <category>诗词散文</category>
      </categories>
      <tags>
        <tag>日记</tag>
        <tag>思考</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机硬件-CPU（中央处理器）</title>
    <url>/WebStudy/web-study/computer-cpu.html</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>CPU（central processing unit）即中央处理器，是计算机系统的运算和控制核心，是信息处理、程序运行的最终执行单元；</p>
<p>CPU 主要功能是解释计算机指令以及处理计算机软件中的数据。</p>
<p>CPU 由运算器、控制器和寄存器及实现它们之间联系的数据、控制及状态的总线构成。</p>
<h3 id="性能衡量指标"><a href="#性能衡量指标" class="headerlink" title="性能衡量指标"></a>性能衡量指标</h3><ul>
<li>主频： CPU 运行计算时工作频率，每秒的运算速度<ul>
<li>睿频： Intel 的加速技术，性能分配上实现按需分配，根据系统的运行自动调整频率。</li>
<li>超频： CPU 和主板都支持超频时，可手动调整频率。</li>
</ul>
</li>
<li>核心数： 计算核心数，核心数越多可以打开的程序就越多，同时进行多任务计算的能力也越高。</li>
<li>位数： CPU 位数&#x3D;CPU 中寄存器的位数&#x3D;CPU 能够一次并行处理的数据宽度（位数）&#x3D;数据总线宽度。（pg.现在的计算机处理器一般都是 64 位)</li>
<li>缓存指令集: CPU 缓存,用于暂存指令。</li>
</ul>
<h3 id="后缀详解"><a href="#后缀详解" class="headerlink" title="后缀详解"></a>后缀详解</h3><h4 id="intel-处理器含义："><a href="#intel-处理器含义：" class="headerlink" title="intel 处理器含义："></a>intel 处理器含义：</h4><ul>
<li>X：高端牛逼处理器</li>
<li>K：解锁超频模式的处理器，适合超频玩家</li>
<li>F：没有内置核显，需要搭配额外的独立显卡</li>
<li>S：节能版处理器，相比于同型号不带 S 的处理器性能差一些</li>
<li>T：相比于同型号后面带 S 的更加节能，但是功耗更低，适合长时间开机但是对性能要求不那么高的用户</li>
<li>U：笔记本低功耗处理器，性能偏弱，续航能力强，多用于轻薄本</li>
<li>Q：笔记本高性能四核处理器</li>
<li>M：移动版 CPU</li>
<li>Y：超低功耗处理器，性能很弱，功耗很低，大多数用于平板电脑</li>
<li>H：高电压处理器，功耗高、主频高的处理器</li>
<li>R：有 Iris 的核显，没有独立显卡的情况下有比较强的图形处理能力</li>
<li>G：与 AMD 合作的产物，带 AMD 家的 Vega 牛逼核显</li>
</ul>
<h4 id="AMD-处理器含义："><a href="#AMD-处理器含义：" class="headerlink" title="AMD 处理器含义："></a>AMD 处理器含义：</h4><ul>
<li>X：高端牛逼处理器</li>
<li>K：解锁超频模式的处理器，适合超频玩家</li>
<li>U：低功耗处理器，性能偏弱，续航能力强，一般用于轻薄本</li>
<li>G：有 Vega 的核显，没有独立显卡的情况下有比较强的图形处理能力</li>
<li>H：高电压处理器，功耗高主频高的处理器</li>
<li>E：低功耗处理器，性能弱</li>
<li>T：比较古老的 AMD 处理器后缀 T 表示支持 Turbo 睿频技术，如果是比较新版的，一般跟 Intel 一样表示超低功耗</li>
<li>B：一般是低功耗的商务本</li>
<li>C：一般用于 Chrome OS 的笔记本电脑</li>
<li>W: 是指工作的专业 CPU，最适合编程画图渲染的朋友。</li>
<li>WX: 这个后缀 CPU 是 AMD 平台中最好最贵的 CPU，性能也是最好的。经常用在玩游戏和高端设计上。</li>
</ul>
<h3 id="购买注意事项"><a href="#购买注意事项" class="headerlink" title="购买注意事项"></a>购买注意事项</h3><ol>
<li>注意与主板规格适配</li>
<li>处理器后缀含义与处理器生产厂商直接相关</li>
<li>睿频参数较大影响 CPU 运算速度，建议和主频共同参考</li>
<li>核数多但单核主频较低的 CPU 不建议购买</li>
</ol>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.leixue.com/ask/what-do-the-letters-of-the-cpu-suffix-represent?hl=2</span><br><span class="line">https://www.jianshu.com/p/273551811a77</span><br><span class="line">https://baike.baidu.com/item/%E4%B8%AD%E5%A4%AE%E5%A4%84%E7%90%86%E5%99%A8/284033</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>WebStudy</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>硬件</tag>
        <tag>知识普及</tag>
      </tags>
  </entry>
  <entry>
    <title>css-动画</title>
    <url>/WebStudy/web-study/css-animation.html</url>
    <content><![CDATA[<blockquote>
<p>浏览器最低版本支持： Chrome（43.0）、Firefox（16.0）、Opera（30.0）、Internet（10.0）</p>
</blockquote>
<h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><h4 id="animation属性系列"><a href="#animation属性系列" class="headerlink" title="animation属性系列"></a>animation属性系列</h4><ul>
<li><p><code>animation: name duration timing-function delay iteration-count direction</code></p>
</li>
<li><p><em><strong>animation-name</strong></em>：<br><strong>描述</strong>：规定 @keyframes 动画的名称<br><strong>语法</strong>：<code>animation-name: keyframename|none;</code><br><strong>属性</strong>：</p>
  <table>
  <tbody><tr>
  <th style="width:25%;">值</th>
  <th>描述</th>
  </tr>

  <tr>
  <td><i>keyframename</i></td>
  <td>规定需要绑定到选择器的 keyframe 的名称。</td>
  </tr>

  <tr>
  <td>none</td>
  <td>规定无动画效果（可用于覆盖来自级联的动画）。</td>
  </tr>
  </tbody></table>
</li>
<li><p><em><strong>animation-duration</strong></em>：<br><strong>描述</strong>：规定完成动画所花费的时间，以秒或毫秒计。<br><strong>语法</strong>：<code>animation-duration: time;</code><br><strong>属性</strong>：</p>
  <table>
  <tbody><tr>
  <th style="width:25%;">值</th>
  <th>描述</th>
  </tr>

  <tr>
  <td><i>time</i></td>
  <td>规定完成动画所花费的时间。默认值是 0，意味着没有动画效果。</td>
  </tr>
  </tbody></table>
</li>
<li><p><em><strong>animation-timing-function</strong></em>：<br><strong>描述</strong>：规定动画的速度曲线。<br><strong>语法</strong>：<code>animation-timing-function: value;</code><br><strong>属性</strong>：</p>
  <table>
  <tbody>
  <tr>
  <th style="width:25%;">值</th>
  <th>描述</th>
  </tr>

  <tr>
  <td>linear</td>
  <td>动画从头到尾的速度是相同的。</td>
  </tr>

  <tr>
  <td>ease</td>
  <td>默认。动画以低速开始，然后加快，在结束前变慢。</td>
  </tr>

  <tr>
  <td>ease-in</td>
  <td>动画以低速开始。</td>
  </tr>

  <tr>
  <td>ease-out</td>
  <td>动画以低速结束。</td>
  </tr>


  <tr>
  <td>ease-in-out</td>
  <td>动画以低速开始和结束。</td>
  </tr>

  <tr>
  <td>cubic-bezier(<i>n</i>,<i>n</i>,<i>n</i>,<i>n</i>)</td>
  <td>在 cubic-bezier 函数中自己的值。可能的值是从 0 到 1 的数值。</td>
  <td></td>
  </tr>
  </tbody></table>
</li>
<li><p><em><strong>animation-delay</strong></em>：<br><strong>描述</strong>：规定在动画开始之前的延迟。<br><strong>语法</strong>：<code>animation-delay: time;</code><br><strong>属性</strong>：</p>
  <table>
  <tbody>
  <tr>
  <th style="width:25%;">值</th>
  <th>描述</th>
  </tr>

  <tr>
  <td><i>time</i></td>
  <td>可选。定义动画开始前等待的时间，以秒或毫秒计。默认值是 0。</td>
  </tr>
  </tbody></table>
</li>
<li><p><em><strong>animation-iteration-count</strong></em>：<br><strong>描述</strong>：规定动画应该播放的次数。<br><strong>语法</strong>：<code>animation-iteration-count: n|infinite;</code><br><strong>属性</strong>：</p>
  <table>
  <tbody><tr>
  <th style="width:25%;">值</th>
  <th>描述</th>
  </tr>

  <tr>
  <td><i>n</i></td>
  <td>定义动画播放次数的数值。</td>
  </tr>

  <tr>
  <td>infinite</td>
  <td>规定动画应该无限次播放。</td>
  </tr>
  </tbody></table>
</li>
<li><p><em><strong>animation-direction</strong></em>：<br><strong>描述</strong>：规定是否应该轮流反向播放动画。<br><strong>语法</strong>：<code>animation-direction: normal|alternate;</code><br><strong>属性</strong>：</p>
  <table>
  <tbody><tr>
  <th style="width:25%;">值</th>
  <th>描述</th>
  </tr>

  <tr>
  <td>normal</td>
  <td>默认值。动画应该正常播放。</td>
  </tr>

  <tr>
  <td>alternate</td>
  <td>动画应该轮流反向播放。</td>
  </tr>
  </tbody></table>
</li>
<li><p><em><strong>animation-fill-mode</strong></em>：<br><strong>描述</strong>：规定动画在执行时间之外应用的值。<br><strong>语法</strong>：<code>animation-fill-mode : none | forwards | backwards | both;</code><br><strong>属性</strong>：</p>
  <table>
  <tbody><tr>
  <th style="width:25%;">值</th>
  <th>描述</th>
  </tr>

  <tr>
  <td>none</td>
  <td>不改变默认行为。</td>
  </tr>

  <tr>
  <td>forwards</td>
  <td>当动画完成后，保持最后一个属性值（在最后一个关键帧中定义）。</td>
  </tr>

  <tr>
  <td>backwards</td>
  <td>在 animation-delay 所指定的一段时间内，在动画显示之前，应用开始属性值（在第一个关键帧中定义）。</td>
  </tr>

  <tr>
  <td>both</td>
  <td>向前和向后填充模式都被应用。</td>
  </tr>

  </tbody></table>
</li>
<li><p><em><strong>animation-play-state</strong></em>：<br><strong>描述</strong>：规定动画是正在运行还是暂停。<br><strong>语法</strong>：<code>animation-play-state: paused|running;</code><br><strong>属性</strong>：</p>
  <table>
  <tbody><tr>
  <th style="width:25%;">值</th>
  <th>描述</th>
  </tr>

  <tr>
  <td>paused</td>
  <td>规定动画已暂停。</td>
  </tr>

  <tr>
  <td>running</td>
  <td>规定动画正在播放。</td>
  </tr>
  </tbody></table></li>
</ul>
<h4 id="keyframes属性"><a href="#keyframes属性" class="headerlink" title="@keyframes属性"></a>@keyframes属性</h4><ul>
<li><p><strong>描述</strong>：规定动画模式。</p>
</li>
<li><p><strong>语法</strong>：<code>@keyframes animationname &#123;keyframes-selector &#123;css-styles;&#125;&#125;</code></p>
</li>
<li><p><strong>属性</strong>：</p>
<table>
<tbody><tr>
<th style="width:25%;">值</th>
<th>描述</th>
</tr>

<tr>
<td><i>animationname</i></td>
<td>必需。定义动画的名称。</td>
</tr>

<tr>
<td><i>keyframes-selector</i></td>
<td>
  <p>必需。动画时长的百分比。</p>
  <p>合法的值：</p>
    0-100% 、
    from（与 0% 相同）、
    to（与 100% 相同）
</td>
</tr>

<tr>
<td><i>css-styles</i></td>
<td>必需。一个或多个合法的 CSS 样式属性。</td>
</tr>
</tbody></table></li>
</ul>
<h3 id="应用范围分析"><a href="#应用范围分析" class="headerlink" title="应用范围分析"></a>应用范围分析</h3><ul>
<li>基础使用：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  background-color: red;</span><br><span class="line">  animation-name: example;</span><br><span class="line">  animation-duration: 4s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes example &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    background-color: red;</span><br><span class="line">  &#125;</span><br><span class="line">  25% &#123;</span><br><span class="line">    background-color: yellow;</span><br><span class="line">  &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    background-color: blue;</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    background-color: green;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>WebStudy</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>css-网格布局（Grid）</title>
    <url>/WebStudy/web-study/css-grid.html</url>
    <content><![CDATA[<h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><h4 id="容器和项目"><a href="#容器和项目" class="headerlink" title="容器和项目"></a>容器和项目</h4><p>  采用网格布局的区域，称为”容器”（container）。容器内部采用网格定位的子元素，称为”项目”（item）。<br>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><br>  上面代码中，最外层的&lt; div&gt;元素就是容器，内层的三个&lt; div&gt;元素就是项目。</p>
<p>  <font color=Red>注意</font>：项目只能是容器的顶层子元素，不包含项目的子元素，比如上面代码的&lt; p&gt;元素就不是项目。Grid 布局只对项目生效。</p>
<h4 id="行和列"><a href="#行和列" class="headerlink" title="行和列"></a>行和列</h4><p>  容器里面的水平区域称为”行”（row），垂直区域称为”列”（column）。</p>
<h4 id="单元格"><a href="#单元格" class="headerlink" title="单元格"></a>单元格</h4><p>  行和列的交叉区域，称为”单元格”（cell）。</p>
<p>  正常情况下，<font color='#9932CC'>n</font>行和<font color='#9932CC'>m</font>列会产生<font color='#9932CC'>n x m</font>个单元格。比如，3行3列会产生9个单元格。</p>
<h4 id="网格线"><a href="#网格线" class="headerlink" title="网格线"></a>网格线</h4><p>  划分网格的线，称为”网格线”（grid line）。水平网格线划分出行，垂直网格线划分出列。</p>
<p>  正常情况下，<font color='#9932CC'>n</font>行有<font color='#9932CC'>n + 1</font>根水平网格线，<font color='#9932CC'>m</font>列有<font color='#9932CC'>m + 1</font>根垂直网格线，比如三行就有四根水平网格线。</p>
<h3 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h3><h4 id="display：容器布局模式"><a href="#display：容器布局模式" class="headerlink" title="display：容器布局模式"></a>display：容器布局模式</h4><ul>
<li><p>display: grid  容器作为块状元素</p>
</li>
<li><p>display: inline-grid;  容器作为行内元素<br>  <font color=Red>注意</font>:设为网格布局以后，容器子元素（项目）的float、display: inline-block、display: table-cell、vertical-align、column-*、width和height等设置都将失效。</p>
</li>
</ul>
<h4 id="grid-template-columns、grid-template-rows：列宽和行高设置"><a href="#grid-template-columns、grid-template-rows：列宽和行高设置" class="headerlink" title="grid-template-columns、grid-template-rows：列宽和行高设置"></a>grid-template-columns、grid-template-rows：列宽和行高设置</h4><ul>
<li><p>px,具体数值</p>
<blockquote>
<p>grid-template-columns: 100px 100px 100px; 每列列宽为100px</p>
</blockquote>
</li>
<li><p>%,百分比</p>
<blockquote>
<p>grid-template-columns: 33.33% 33.33% 33.33%; 每列列宽为33.33%</p>
</blockquote>
</li>
<li><p>fr,份数</p>
<blockquote>
<p>grid-template-columns: 1fr 1fr 1fr; 每列列宽为1份</p>
</blockquote>
</li>
<li><p>repeat(n, m), 重复函数(n为重复次数，m为重复内容)</p>
<blockquote>
<p>grid-template-columns: repeat(3, 33.33%); 共3列，每列列宽为33.33%<br>grid-template-columns: repeat(3, 1fr); 共3列，每列列宽为1份<br>grid-template-columns: repeat(2, 100px 20px 80px); 共2列，每列列宽为100px、20px、80px（实际显示6列）<br>grid-template-columns: repeat(auto-fill, 100px); 自由列数，每列100px，具体多少列由容器宽度决定</p>
</blockquote>
</li>
<li><p>minmax(min,max)，区间（min为最小值，max为最大值）</p>
<blockquote>
<p>grid-template-columns: 1fr 1fr minmax(100px, 1fr); 第三列最小为100px，最大为1分宽度</p>
</blockquote>
</li>
<li><p>auto，自由宽度</p>
<blockquote>
<p>grid-template-columns: 100px auto 100px; 第二列由浏览器自己决定长度</p>
</blockquote>
</li>
</ul>
<h4 id="grid-row-gap，grid-column-gap，grid-gap：-间距设置"><a href="#grid-row-gap，grid-column-gap，grid-gap：-间距设置" class="headerlink" title="grid-row-gap，grid-column-gap，grid-gap： 间距设置"></a>grid-row-gap，grid-column-gap，grid-gap： 间距设置</h4><ul>
<li>grid-gap: &lt; grid-row-gap&gt; &lt; grid-column-gap&gt;; 行间距和列间距</li>
</ul>
<h4 id="grid-auto-flow：布局方向设置"><a href="#grid-auto-flow：布局方向设置" class="headerlink" title="grid-auto-flow：布局方向设置"></a>grid-auto-flow：布局方向设置</h4><ul>
<li>grid-auto-flow: column; 先行后列</li>
<li>grid-auto-flow: row; 先列后行</li>
</ul>
<h4 id="justify-items，align-items，place-items：项目元素对齐方式（垂直方向与水平方向）"><a href="#justify-items，align-items，place-items：项目元素对齐方式（垂直方向与水平方向）" class="headerlink" title="justify-items，align-items，place-items：项目元素对齐方式（垂直方向与水平方向）"></a>justify-items，align-items，place-items：项目元素对齐方式（垂直方向与水平方向）</h4><ul>
<li>place-items: &lt; align-items&gt; &lt; justify-items&gt;; 垂直方向与水平方向</li>
<li>justify-items: start; 对齐单元格的起始边缘</li>
<li>justify-items: end; 对齐单元格的结束边缘</li>
<li>justify-items: center; 单元格内部居中</li>
<li>justify-items: stretch; 拉伸，占满单元格的整个宽度（默认值）</li>
</ul>
<h4 id="justify-content，align-content，place-content：内容区的对齐方式（垂直方向与水平方向）"><a href="#justify-content，align-content，place-content：内容区的对齐方式（垂直方向与水平方向）" class="headerlink" title="justify-content，align-content，place-content：内容区的对齐方式（垂直方向与水平方向）"></a>justify-content，align-content，place-content：内容区的对齐方式（垂直方向与水平方向）</h4><ul>
<li>place-content: &lt; align-content&gt; &lt; justify-content&gt; ; 垂直方向与水平方向</li>
<li>justify-content: start ; 对齐容器的起始边框。</li>
<li>justify-content: end; 对齐容器的结束边框。</li>
<li>justify-content: center; 容器内部居中。</li>
<li>justify-content: stretch; 项目大小没有指定时，拉伸占据整个网格容器。</li>
<li>justify-content: space-around; 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与容器边框的间隔大一倍。</li>
<li>justify-content: space-between; 项目与项目的间隔相等，项目与容器边框之间没有间隔。</li>
<li>justify-content: space-evenly; 项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔。</li>
</ul>
<h3 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h3><h4 id="grid-column-start，grid-column-end，grid-row-start，grid-row-end：设置项目定位在哪根网格线（垂直方向与水平方向）"><a href="#grid-column-start，grid-column-end，grid-row-start，grid-row-end：设置项目定位在哪根网格线（垂直方向与水平方向）" class="headerlink" title="grid-column-start，grid-column-end，grid-row-start，grid-row-end：设置项目定位在哪根网格线（垂直方向与水平方向）"></a>grid-column-start，grid-column-end，grid-row-start，grid-row-end：设置项目定位在哪根网格线（垂直方向与水平方向）</h4><ul>
<li>grid-column: &lt; grid-column-start&gt; &lt; grid-column-end&gt;; 左边框所在的垂直网格线与右边框所在的垂直网格线</li>
<li>grid-row: &lt; grid-row-start&gt; &lt; grid-row-end&gt;; 上边框所在的水平网格线与下边框所在的水平网格线</li>
<li>grid-column-start: 1; 设置左边框在1号垂直网格线</li>
<li>grid-column-end: 3; 设置右边框在3号垂直网格线</li>
<li>grid-row-start: 2; 设置上边框在2号水平网格线</li>
<li>grid-row-end: 4; 设置下边框在4号水平网格线</li>
</ul>
<h4 id="justify-self，align-self，place-self：项目内容位置设置（垂直方向与水平方向）"><a href="#justify-self，align-self，place-self：项目内容位置设置（垂直方向与水平方向）" class="headerlink" title="justify-self，align-self，place-self：项目内容位置设置（垂直方向与水平方向）"></a>justify-self，align-self，place-self：项目内容位置设置（垂直方向与水平方向）</h4><ul>
<li>place-self: &lt; align-self&gt; &lt; justify-self&gt;; 垂直方向与水平方向</li>
<li>justify-self: start; 对齐单元格的起始边缘</li>
<li>justify-self: end; 对齐单元格的结束边缘</li>
<li>justify-self: center; 单元格内部居中</li>
<li>justify-self: stretch; 拉伸，占满单元格的整个宽度（默认值）</li>
</ul>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>WebStudy</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>css-过渡（transition）</title>
    <url>/WebStudy/web-study/css-transition.html</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>transition CSS 属性是 transition-property、transition-duration、transition-timing-function 和 transition-delay 的一个简写属性。过渡可以为一个元素在不同状态之间切换的时候定义不同的过渡效果。比如在不同的伪元素之间切换，像是 :hover，:active 或者通过 JavaScript 实现的状态变化。</p>
<blockquote>
<p>transition: &lt; property &gt; &lt; duration &gt; &lt; timing-function &gt; &lt; delay &gt;;</p>
</blockquote>
<h3 id="属性说明"><a href="#属性说明" class="headerlink" title="属性说明"></a>属性说明</h3><h4 id="transition-property"><a href="#transition-property" class="headerlink" title="transition-property"></a>transition-property</h4><ul>
<li>说明: 指定哪个或哪些 CSS 属性用于过渡。只有指定的属性才会在过渡中发生动画，其他属性仍如通常那样瞬间变化。</li>
<li>transition-property: none | all | property</li>
</ul>
<blockquote>
<p>none: 没有过渡动画<br>all: 所有可被动画的属性都表现出过渡动画<br>property: 定义应用过渡效果的 CSS 属性名称列表，列表以逗号分隔</p>
</blockquote>
<h4 id="transition-duration"><a href="#transition-duration" class="headerlink" title="transition-duration"></a>transition-duration</h4><ul>
<li>说明: 指定过渡的时长。你可以为所有属性指定一个值，或者指定多个值，或者为每个属性指定不同的时长。</li>
<li>transition-duration: time</li>
</ul>
<blockquote>
<p>time: 规定完成过渡效果需要花费的时间，单位为秒或毫秒，默认为 0，意味着不会有效果</p>
</blockquote>
<h4 id="transition-timing-function-指定应用过渡属性的名称"><a href="#transition-timing-function-指定应用过渡属性的名称" class="headerlink" title="transition-timing-function 指定应用过渡属性的名称"></a>transition-timing-function 指定应用过渡属性的名称</h4><ul>
<li>说明: 指定一个函数，定义属性值怎么变化。缓动函数定义属性如何计算。大多数缓动函数由四点定义一个立方贝塞尔曲线。也可以从 Easing Functions Cheat Sheet 选择缓动效果</li>
<li>transition-timing-function: ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(n,n,n,n)</li>
</ul>
<blockquote>
<p>ease: 默认值，规定慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier(0.25,0.1,0.25,1)）<br>linear: 以常量速度进行过渡，规定以相同速度开始至结束的过渡效果（等于 cubic-bezier(0,0,1,1)）。。<br>ease-in: 慢速开始，规定以慢速开始的过渡效果（等于 cubic-bezier(0.42,0,1,1)）。<br>ease-out: 慢速结束，规定以慢速结束的过渡效果（等于 cubic-bezier(0,0,0.58,1)）。<br>ease-in-out: 先慢后快，规定以慢速开始和结束的过渡效果（等于 cubic-bezier(0.42,0,0.58,1)）。<br>cubic-bezier(n,n,n,n): 定义一个 cubic-bezier 函数，用来定义自己的缓动效果，可能的值是 0 至 1 之间的数值。</p>
</blockquote>
<h4 id="transition-delay-指定应用过渡属性的名称"><a href="#transition-delay-指定应用过渡属性的名称" class="headerlink" title="transition-delay 指定应用过渡属性的名称"></a>transition-delay 指定应用过渡属性的名称</h4><ul>
<li>说明: 指定延迟，即属性开始变化时与过渡开始发生时之间的时长。</li>
<li>transition-delay: time</li>
</ul>
<blockquote>
<p>time: 规定延迟的时间，单位为秒或毫秒，默认为 0，意味着属性在过渡之前不会延迟</p>
</blockquote>
]]></content>
      <categories>
        <category>WebStudy</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>我是一个WebGIS开发工程师</title>
    <url>/WebStudy/web-study/i-am-a-GIS-development-engineer.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>   我总在追求清晰，避免模糊的道路上前进，因为模糊会让我看不清自己。我也总在反复确定自己身份，确定自己在社会群体中，担任着怎么样的职务，三年前褪去学生的身份后，我走上了WebGis的职业道路上，在社会角色扮演中，职业是最重要的一重身份。第一年学习前端开发，第二年学习后端开发，第三年作为核心开发人员进行综合开发，如今第四年也已经过去了两个月多，回头想一想，总是会有一些茫然，学习了很多，但感觉又很单薄，因此想抽出一些时间，认真描绘一下自己职业的轮廓。<br>   ps.本文为个人所遇所感，所思所想，如有不足，请谅解。</p>
<h3 id="职业简介"><a href="#职业简介" class="headerlink" title="职业简介"></a>职业简介</h3><p>   顾名思义，WebGIS开发工程师就是以WebGIS开发模式进行GIS系统开发的工程师，WebGIS开发是软件研发的重要方向，以网络请求做为信息传输方式，在客户端与服务端进行数据传输，从而实现各种各样的业务系统平台；GIS系统是以地图和空间数据为基础，对自然地理或者人文地理相关问题进行分析和处理的一类系统。因此，WebGIS开发工程师需要地理学相关支持，从而支持本身主要的业务能力，同时也需要Web前端、Web后端和网络技术三大方面的技术能力支持。计算机网络领域发展十分迅速，各种框架推陈出新，新的技术也不断产生，仿佛无限增长又望之不尽的海洋，但一个职业的职能是确定的，不同种类工具的作用也是明确的，一个职业的人用自己知道的工具做成这个职业需要做到的事，便足以。</p>
<h3 id="WEB开发相关技术"><a href="#WEB开发相关技术" class="headerlink" title="WEB开发相关技术"></a>WEB开发相关技术</h3><ul>
<li>计算机技术<ol>
<li>linux系统</li>
<li>数据库<ol>
<li>MySQL</li>
<li>PostgreSQL</li>
</ol>
</li>
</ol>
</li>
<li>前端技术<ol>
<li>前端基础<ol>
<li>HTML5</li>
<li>CSS3</li>
<li>ECMAScript 6</li>
</ol>
</li>
<li>前端环境（Node.js）<ol>
<li>包的管理工具 npm&#x2F;yarn</li>
<li>资源构建工具 webpack</li>
</ol>
</li>
<li>前端框架<ol>
<li>vue(组件化 数据驱动)</li>
</ol>
</li>
</ol>
</li>
<li>后端技术<ol>
<li>微服务技术栈<ol>
<li>Spring Boot</li>
<li>Spring Clound</li>
<li>Docker</li>
<li>Eureka</li>
<li>Ribbon</li>
<li>Feign</li>
<li>GateWay</li>
<li>RabbitMQ</li>
</ol>
</li>
<li>后端环境（JDK8）</li>
</ol>
</li>
<li>网络技术<ol>
<li>nginx</li>
<li>http&#x2F;https</li>
</ol>
</li>
</ul>
<h3 id="WebGIS系统特有技术"><a href="#WebGIS系统特有技术" class="headerlink" title="WebGIS系统特有技术"></a>WebGIS系统特有技术</h3><ul>
<li>SuperMap产品<ol>
<li>iDecktop</li>
<li>iServer</li>
<li>iManage</li>
</ol>
</li>
<li>地图库<ol>
<li>leaflet</li>
<li>Cesium</li>
</ol>
</li>
</ul>
<p>未完待续。。。</p>
]]></content>
      <categories>
        <category>WebStudy</category>
      </categories>
      <tags>
        <tag>思考总结</tag>
      </tags>
  </entry>
  <entry>
    <title>webGIS-基础知识框架</title>
    <url>/WebStudy/web-study/web-gis-basic.html</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>该文章将简要概括 webGIS 的基础知识框架体系，以基础、进阶、扩展三个维度阐述前端 GIS 开发的技术内容，结合自身工作经历与工作认知清晰明确的说明技术体系，协助所需朋友的职业构建。</p>
<h3 id="webGIS-开发的工作过程"><a href="#webGIS-开发的工作过程" class="headerlink" title="webGIS 开发的工作过程"></a>webGIS 开发的工作过程</h3><ul>
<li>开发员工工作流程：编写项目具体功能模块与解决日常需求与 BUG<ol>
<li>需求对接-&gt;功能开发-&gt;功能测试-&gt;需求交接</li>
</ol>
</li>
<li>开发经理工作流程：项目开发安排协助与<ol>
<li>项目对接-&gt;开发方案制定-&gt;（项目搭建-&gt;共用与基础功能开发）-&gt;（开发文档编写与跟踪-需求评审-代码走查-分享培训）-&gt;项目测试-&gt;项目交接</li>
</ol>
<hr>
</li>
</ul>
<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><ul>
<li>页面开发基础<ul>
<li>学习地址：<a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a></li>
</ul>
<ol>
<li>HTML5</li>
<li>CSS3</li>
<li>JavaScript</li>
</ol>
</li>
<li>二三维地图库（leaflet 和 cesium）<ol>
<li>leaflet.js<ul>
<li>学习地址：<a href="https://blog.csdn.net/qq_44725504/article/details/128744105">https://blog.csdn.net/qq_44725504/article/details/128744105</a></li>
</ul>
</li>
<li>cesium.js<ul>
<li>学习地址：<a href="https://zhuanlan.zhihu.com/p/588049871">https://zhuanlan.zhihu.com/p/588049871</a></li>
</ul>
</li>
</ol>
</li>
</ul>
<h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><ul>
<li>打包工具（webpack）<ul>
<li>学习地址：<a href="https://blog.csdn.net/li5466667/article/details/124545028">https://blog.csdn.net/li5466667/article/details/124545028</a></li>
</ul>
</li>
<li>代码管理（Git）<ul>
<li>学习地址：<a href="https://www.yuque.com/skyjilygao/na9bh8/qp8xdf">https://www.yuque.com/skyjilygao/na9bh8/qp8xdf</a></li>
</ul>
</li>
<li>前端框架（VUE、React）<ol>
<li>VUE</li>
</ol>
<ul>
<li>学习地址：<a href="https://cn.vuejs.org/">https://cn.vuejs.org/</a></li>
</ul>
<ol start="2">
<li>React</li>
</ol>
<ul>
<li>学习地址：<a href="https://react.docschina.org/">https://react.docschina.org/</a></li>
</ul>
</li>
</ul>
<ul>
<li>前端 UI 框架（Ant Design）<ul>
<li>学习地址：<a href="https://ant.design/index-cn">https://ant.design/index-cn</a></li>
</ul>
</li>
<li>数据可视化（ECharts）<ul>
<li>学习地址：<a href="https://echarts.apache.org/zh/index.html">https://echarts.apache.org/zh/index.html</a></li>
</ul>
</li>
<li>JavaScript 运行环境（node.js）<ul>
<li>学习地址： <a href="https://learn-anything.cn/node-js-start">https://learn-anything.cn/node-js-start</a></li>
</ul>
</li>
</ul>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><ul>
<li>数据处理与服务发布<ol>
<li>超图</li>
</ol>
<ul>
<li>学习地址：<a href="http://support.supermap.com.cn:8090/iserver/help/html/zh/index.htm">http://support.supermap.com.cn:8090/iserver/help/html/zh/index.htm</a></li>
</ul>
<ol start="2">
<li>ESRI</li>
</ol>
<ul>
<li>学习地址：<a href="http://www.dsac.cn/Development?cate=14481">http://www.dsac.cn/Development?cate=14481</a></li>
</ul>
</li>
<li>linux 系统基础使用<ul>
<li>学习地址：<a href="http://cn.linux.vbird.org/linux_basic/linux_basic.php">http://cn.linux.vbird.org/linux_basic/linux_basic.php</a></li>
</ul>
</li>
<li>空间数据库基础使用<ul>
<li>学习地址：<a href="https://gitee.com/chubby/postgres#https://gitee.com/AiShiYuShiJiePingXing/postgres">https://gitee.com/chubby/postgres#https://gitee.com/AiShiYuShiJiePingXing/postgres</a></li>
</ul>
</li>
<li>SuperMap 相关产品使用<ul>
<li>学习地址：<a href="https://www.supermap.com/">https://www.supermap.com/</a></li>
</ul>
</li>
<li>ESRI 相关产品使用<ul>
<li>学习地址：<a href="https://www.esri.com/zh-cn/home">https://www.esri.com/zh-cn/home</a></li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">参考链接:</span><br><span class="line"> - https://zhuanlan.zhihu.com/p/603970067</span><br><span class="line"> - https://www.osgeo.cn/tutorial/</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>WebStudy</category>
      </categories>
      <tags>
        <tag>WEB-GIS</tag>
        <tag>知识</tag>
        <tag>概括</tag>
      </tags>
  </entry>
</search>
